<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 184f3f7bd45643cb80f828d0bb001991ec3a5fad Maintainer: rjhdby Status: ready -->
<!-- Reviewed: yes Maintainer: lex -->

<refentry xmlns="http://docbook.org/ns/docbook" xml:id="function.session-set-save-handler" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>session_set_save_handler</refname>
  <refpurpose>Устанавливает пользовательские обработчики хранения сессии</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>bool</type><methodname>session_set_save_handler</methodname>
   <methodparam><type>callable</type><parameter>open</parameter></methodparam>
   <methodparam><type>callable</type><parameter>close</parameter></methodparam>
   <methodparam><type>callable</type><parameter>read</parameter></methodparam>
   <methodparam><type>callable</type><parameter>write</parameter></methodparam>
   <methodparam><type>callable</type><parameter>destroy</parameter></methodparam>
   <methodparam><type>callable</type><parameter>gc</parameter></methodparam>
   <methodparam choice="opt"><type>callable</type><parameter>create_sid</parameter></methodparam>
   <methodparam choice="opt"><type>callable</type><parameter>validate_sid</parameter></methodparam>
   <methodparam choice="opt"><type>callable</type><parameter>update_timestamp</parameter></methodparam>
  </methodsynopsis>
  <para>
   Также возможно зарегистрировать следующий прототип:
  </para>
  <methodsynopsis>
   <type>bool</type><methodname>session_set_save_handler</methodname>
   <methodparam><type>object</type><parameter>sessionhandler</parameter></methodparam>
   <methodparam choice="opt"><type>bool</type><parameter>register_shutdown</parameter><initializer>&true;</initializer></methodparam>
  </methodsynopsis>
  <para>
   <function>session_set_save_handler</function> устанавливает пользовательские
   обработчики хранения сессии, которые используются для сохранения
   и получения данных, связанных с сессией. Это особенно полезно, когда
   предпочтительным является метод хранения, отличный от тех, которые предоставляются
   сессиями PHP, например, хранение данных сессии в локальной базе данных.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   Данная функция имеет два определения (прототипа).
   <variablelist>
    <varlistentry>
     <term><parameter>sessionhandler</parameter></term>
     <listitem>
      <para>
       Экземпляр класса, реализующий интерфейс
       <interfacename>SessionHandlerInterface</interfacename> и необязательные
       <interfacename>SessionIdInterface</interfacename> и/или
       <interfacename>SessionUpdateTimestampHandlerInterface</interfacename>,
       такой как <classname>SessionHandler</classname>, для регистрации
       в качестве обработчика сессии.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>register_shutdown</parameter></term>
     <listitem>
      <para>
       Зарегистрировать <function>session_write_close</function> как
       функцию <function>register_shutdown_function</function>.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>

   или

   <variablelist>
    <varlistentry>
     <term><parameter>open</parameter></term>
     <listitem>
      <para>
       Callback-функция со следующей сигнатурой:
       <methodsynopsis>
        <type>bool</type><methodname><replaceable>open</replaceable></methodname>
        <methodparam><type>string</type><parameter>savePath</parameter></methodparam>
        <methodparam><type>string</type><parameter>sessionName</parameter></methodparam>
       </methodsynopsis>
      </para>
      <para>
       Callback-функция <parameter>open</parameter> работает как конструктор в классах и выполняется
       при открытии сессии. Это первая callback-функция, которая выполняется,
       когда сессия стартует автоматически либо вручную через <function>session_start</function>.
       Возвращаемое значение &true; в случае успешного выполнения, &false; в случае неудачи.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>close</parameter></term>
     <listitem>
      <para>
       Callback-функция со следующей сигнатурой:
       <methodsynopsis>
        <type>bool</type><methodname><replaceable>close</replaceable></methodname>
        <void/>
       </methodsynopsis>
      </para>
      <para>
       Callback-функция <parameter>close</parameter> работает как деструктор в классах и выполняется
       после того, как была вызвана callback-функция <parameter>write</parameter>. Она также вызывается
       при вызове <function>session_write_close</function>.
       Возвращаемое значение должно быть &true; в случае успешного выполнения, &false; в случае неудачи.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>read</parameter></term>
     <listitem>
      <para>
       Callback-функция со следующей сигнатурой:
       <methodsynopsis>
        <type>string</type><methodname><replaceable>read</replaceable></methodname>
        <methodparam><type>string</type><parameter>sessionId</parameter></methodparam>
       </methodsynopsis>
      </para>
      <para>
       Callback-функция <parameter>read</parameter> должна всегда возвращать кодированную (сериализованную)
       строку сессии или пустую строку, если нет данных для чтения.
      </para>
      <para>
       Эта callback-функция вызывается внутренним механизмом PHP при старте сессии или при вызове
       <function>session_start</function>. Перед тем, как будет вызвана эта callback-функция,
       PHP вызовет callback-функцию <parameter>open</parameter>.
      </para>
      <para>
       Возвращаемое значение данной callback-функции должно быть в точно таком же сериализованном формате,
       который изначально передавался для хранения в callback-функцию <parameter>write</parameter>. Возвращаемое
       значение будет автоматически десериализовано PHP и использовано для заполнения суперглобальной переменной
       <varname>$_SESSION</varname>. Даже если данные похожи на результат <function>serialize</function>, стоит
       помнить, что это другой формат сериализации, который определён ini-директивой <link linkend="ini.session.serialize-handler">session.serialize_handler</link>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>write</parameter></term>
     <listitem>
      <para>
       Callback-функция со следующей сигнатурой:
       <methodsynopsis>
        <type>bool</type><methodname><replaceable>write</replaceable></methodname>
        <methodparam><type>string</type><parameter>sessionId</parameter></methodparam>
        <methodparam><type>string</type><parameter>data</parameter></methodparam>
       </methodsynopsis>
      </para>
      <para>
       Callback-функция <parameter>write</parameter> вызывается, когда сессия должна быть сохранена и закрыта. Данная
       callback-функция принимает идентификатор текущей сессии и сериализованную версию суперглобальной переменной
       <varname>$_SESSION</varname>. Используемый внутри PHP метод сериализации определён ini-директивой
       <link linkend="ini.session.serialize-handler">session.serialize_handler</link>.
      </para>
      <para>
       Переданные в эту callback-функцию сериализованные данные сессии должны быть сохранены в связи с переданным
       идентификатором сессии. При получении этих данных, callback-функция <parameter>read</parameter> должна вернуть
       то же самое значение, что было передано в callback-функцию <parameter>write</parameter>.
      </para>
      <para>
       Данная callback-функция вызывается, когда PHP завершает работу или явно при вызове <function>session_write_close</function>.
       Следует помнить, что после выполнения этой callback-функции, PHP выполнит callback-функцию <parameter>close</parameter>.
       <note>
        <para>
         Обработчик "write" не выполнится до тех пор, пока выходной поток не будет
         закрыт. Таким образом, вывод отладочных операторов в обработчике "write"
         никогда не отобразится в браузере. Если необходим вывод отладочной информации,
         рекомендуется записывать отладочные данные в файл.
        </para>
       </note>
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>destroy</parameter></term>
     <listitem>
      <para>
       Callback-функция со следующей сигнатурой:
       <methodsynopsis>
        <type>bool</type><methodname><replaceable>destroy</replaceable></methodname>
        <methodparam><type>string</type><parameter>sessionId</parameter></methodparam>
       </methodsynopsis>
      </para>
      <para>
       Данная callback-функция вызывается, когда сессия уничтожается с помощью <function>session_destroy</function>
       или при вызове <function>session_regenerate_id</function> с параметром destroy, установленным в &true;.
       Возвращаемое значение должно быть &true; в случае успешного выполнения, &false; в случае неудачи.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>gc</parameter></term>
     <listitem>
      <para>
       Callback-функция со следующей сигнатурой:
       <methodsynopsis>
        <type>bool</type><methodname><replaceable>gc</replaceable></methodname>
        <methodparam><type>int</type><parameter>lifetime</parameter></methodparam>
       </methodsynopsis>
      </para>
      <para>
       Callback-функция сборщика мусора периодически вызывается PHP для очистки данных старых сессий.
       Частота контролируется директивами <link linkend="ini.session.gc-probability">session.gc_probability</link>
       и <link linkend="ini.session.gc-divisor">session.gc_divisor</link>. Значение lifetime, которое передаётся
       в данную callback-функцию может быть установлено в <link linkend="ini.session.gc-maxlifetime">session.gc_maxlifetime</link>.
       Возвращаемое значение должно быть &true; в случае успешного выполнения, &false; в случае неудачи.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>create_sid</parameter></term>
     <listitem>
      <para>
       Callback-функция со следующей сигнатурой:
       <methodsynopsis>
        <type>string</type><methodname><replaceable>create_sid</replaceable></methodname>
        <void/>
       </methodsynopsis>
      </para>
      <para>
       Данная callback-функция выполняется, когда требуется новый идентификатор сессии. Не
       предусматривает параметров, а возвращаемое значение должно быть строкой, которая
       является допустимым идентификатором сессии для вашего обработчика.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>validate_sid</parameter></term>
     <listitem>
      <para>
       Callback-функция со следующей сигнатурой:
       <methodsynopsis>
        <type>bool</type><methodname><replaceable>validate_sid</replaceable></methodname>
        <methodparam><type>string</type><parameter>key</parameter></methodparam>
       </methodsynopsis>
      </para>
      <para>
       Callback-функция выполняется, когда должна быть запущена сессия, предоставляется идентификатор сессии
       и включается <link linkend="ini.session.use-strict-mode">session.use_strict_mode</link>.
       <parameter>key</parameter> - это идентификатор сессии для проверки.
       Идентификатор сессии действителен, если сессия с таким идентификатором уже существует.
       Возвращаемое значение должно быть &true; в случае успешного выполнения или &false; в случае возникновения ошибки.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>update_timestamp</parameter></term>
     <listitem>
      <para>
       Callback-функция со следующей сигнатурой:
       <methodsynopsis>
        <type>bool</type><methodname><replaceable>update_timestamp</replaceable></methodname>
        <methodparam><type>string</type><parameter>key</parameter></methodparam>
        <methodparam><type>string</type><parameter>val</parameter></methodparam>
       </methodsynopsis>
      </para>
      <para>
       Callback-функция выполняется при сессии.
       <parameter>key</parameter> - это идентификатор сессии, <parameter>val</parameter> - это данные сессии.
       Возвращаемое значение должно быть &true; в случае успешного выполнения или &false; в случае возникновения ошибки.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.success;
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>
     Пользовательский обработчик сессии: полный код смотрите в описании <classname>SessionHandlerInterface</classname>.
    </title>
    <para>
     Здесь только продемонстрирован вызов session_set_save_handler,
     полный пример можно посмотреть в описании <classname>SessionHandlerInterface</classname>.
    </para>
    <para>
     Заметьте, что с <function>session_set_save_handler</function> мы используем ООП-прототип и регистрируем
     функцию завершения, используя флаг параметра функции. Это обычно рекомендуется при регистрации
     объектов в качестве обработчиков хранения сессии.
    </para>
    <programlisting role="php">
<![CDATA[
<?php
class MySessionHandler implements SessionHandlerInterface
{
    // здесь реализация интерфейса
}

$handler = new MySessionHandler();
session_set_save_handler($handler, true);
session_start();

// устанавливаем и получаем значения по ключу из $_SESSION
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  <warning>
   <para>
    Обработчики <parameter>write</parameter> и
    <parameter>close</parameter> вызываются после деструктора объекта и
    поэтому не могут использовать его контекст или бросать исключения. Исключения
    не могут быть обработаны, так как не будут пойманы, не будет отражена трассировка
    стека исключения и выполнение просто прекратится неожиданно. Однако при этом, деструкторы
    объекта могут использовать сессии.
   </para>
   <para>
    Можно вызвать <function>session_write_close</function> из деструктора, чтобы
    решить эту проблему "курицы и яйца", но самый надёжный способ - это регистрировать
    функцию завершения, как описано выше.
   </para>
  </warning>
  <warning>
   <para>
    Текущий рабочий каталог изменяется некоторыми SAPI, если сессия закрывается при
    завершении скрипта. Завершить сессию можно раньше с помощью
    <function>session_write_close</function>.
   </para>
  </warning>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member>
     Директива <link linkend="ini.session.save-handler">session.save_handler</link>
    </member>
    <member>
     Директива <link linkend="ini.session.serialize-handler">session.serialize_handler</link>
    </member>
    <member><function>register_shutdown_function</function></member>
    <member><function>session_register_shutdown</function></member>
    <member>
     Обратитесь к <link xlink:href="&url.session-save-handler;">save_handler.inc</link>
     для полного набора рекомендаций по реализации
    </member>
   </simplelist>
  </para>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
