<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 151e61773c016edcae8fd4989ad9a86ffd03c283 Maintainer: rjhdby Status: ready -->
<!-- Reviewed: yes Maintainer: lex -->
<refentry xml:id="function.session-start" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>session_start</refname>
  <refpurpose>Стартует новую сессию, либо возобновляет существующую</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>bool</type><methodname>session_start</methodname>
   <methodparam choice="opt"><type>array</type><parameter>options</parameter><initializer>[]</initializer></methodparam>
  </methodsynopsis>
  <para>
   Функция <function>session_start</function> создаёт сессию, либо возобновляет
   существующую, основываясь на идентификаторе сессии, переданном через
   GET- или POST-запрос, либо переданный через cookie.
  </para>
  <para>
   Когда вызвана функция <function>session_start</function> или когда сессия создаётся
   автоматически, PHP вызовет открытие и чтение обработчиков записи сессии. Это могут
   быть как встроенные обработчики, так и предоставляемые модулями (например,
   SQLite или Memcached); или вообще определённый пользователем обработчик, заданный
   функцией <function>session_set_save_handler</function>.
   Callback-функция чтения извлечёт все существующие данные сессии (сохранённые в
   специальном сериализованном виде), десериализует их и занесёт в суперглобальный
   массив $_SESSION, после чего вернёт сохранённые данные обработчику сессий PHP.
  </para>
  <para>
   Для использования именованных сессий, используйте
   <function>session_name</function> перед
   <function>session_start</function>.
  </para>
  <para>
   Если разрешена опция <link linkend="ini.session.use-trans-sid">session.use_trans_sid</link>,
   функция <function>session_start</function> регистрирует внутренний обработчик вывода
   для перезаписи URL.
  </para>
  <para>
   Если пользователь использует <literal>ob_gzhandler</literal> или что-то подобное
   совместно с функцией <function>ob_start</function>, порядок функций важен для
   правильного вывода. К примеру, <literal>ob_gzhandler</literal> должен быть
   зарегистрирован до старта сессии.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <variablelist>
   <varlistentry>
    <term><parameter>options</parameter></term>
    <listitem>
     <para>
      Если задано, то должно быть ассоциативным массивом, переопределяющим
      текущие <link linkend="session.configuration">директивы конфигурации сессий</link>.
      Ключи не должны иметь префикса <literal>session.</literal>.
     </para>
     <para>
      В дополнение к обычному набору конфигурационных директив, может быть
      добавлена опция <literal>read_and_close</literal>. Если установлена в &true;, то
      сессия будет закрыта сразу же после прочтения, теоретически позволяя избежать
      блокировки, если данные сессии не будут изменяться.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Функция возвращает &true;, если сессия успешно стартована, в противном случае &false;.
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>7.1.0</entry>
       <entry>
        <function>session_start</function> теперь возвращает &false; и больше не
        инициализирует <varname>$_SESSION</varname>, когда она не смогла запустить сессию.
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <refsect2>
   <title>Простой пример сессии</title>

   <para>
    <example>
     <title><filename>page1.php</filename></title>
     <programlisting role="php">
<![CDATA[
<?php
// page1.php

session_start();

echo 'Добро пожаловать на страницу 1';

$_SESSION['favcolor'] = 'green';
$_SESSION['animal']   = 'cat';
$_SESSION['time']     = time();

// Работает, если сессионная cookie принята
echo '<br /><a href="page2.php">page 2</a>';

// Или можно передать идентификатор сессии, если нужно
echo '<br /><a href="page2.php?' . SID . '">page 2</a>';
?>
]]>
     </programlisting>
    </example>
   </para>
   <para>
    После просмотра <filename>page1.php</filename>, вторая страница
    <filename>page2.php</filename> чудесным образом получит все данные сессии.
    Читайте раздел <link linkend="ref.session">работа с сессиями</link>,
    там рассказывается про <link linkend="session.idpassing">передачу
    идентификаторов сессий</link>. В частности там рассказывается про то, что
    такое константа <constant>SID</constant>.
   </para>
   <para>
    <example>
     <title><filename>page2.php</filename></title>
     <programlisting role="php">
<![CDATA[
<?php
// page2.php

session_start();

echo 'Добро пожаловать на страницу 2<br />';

echo $_SESSION['favcolor']; // green
echo $_SESSION['animal'];   // cat
echo date('Y m d H:i:s', $_SESSION['time']);

// Можете тут использовать идентификатор сессии, как в page1.php
echo '<br /><a href="page1.php">page 1</a>';
?>
]]>
     </programlisting>
    </example>
   </para>
  </refsect2>
  <refsect2>
   <title>Передача опций в <function>session_start</function></title>

   <example>
    <title>Переопределение времени жизни cookie</title>
    <programlisting role="php">
<![CDATA[
<?php
// Устанавливаем срок действия cookie одному дню.
session_start([
    'cookie_lifetime' => 86400,
]);
?>
]]>
    </programlisting>
   </example>

   <example>
    <title>Чтение и закрытие сессии</title>
    <programlisting role="php">
<![CDATA[
<?php
// Если мы знаем, что в сессии не надо ничего изменять,
// мы можем просто прочитать её переменные и сразу закрыть,
// чтобы не блокировать файл сессии, который может понадобиться другим сессиям
session_start([
    'cookie_lifetime' => 86400,
    'read_and_close'  => true,
]);
]]>
    </programlisting>
   </example>
  </refsect2>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  <note>
   <para>
    Для использования сессий на основе cookie, функция <function>session_start</function>
    должна быть вызвана перед выводом чего бы то ни было в браузер.
   </para>
  </note>
  <note>
   <para>
    Используйте <link linkend="ini.zlib.output-compression">zlib.output_compression</link>
    вместо <function>ob_gzhandler</function>
   </para>
  </note>
  <note>
   <para>
    Эта функция отсылает несколько заголовков HTTP, в зависимости от настроек.
    Смотрите описание функции <function>session_cache_limiter</function> для
    управления этими заголовками.
   </para>
  </note>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><varname>$_SESSION</varname></member>
    <member>
     Директива конфигурации <link linkend="ini.session.auto-start">session.auto_start</link>
    </member>
    <member><function>session_id</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
