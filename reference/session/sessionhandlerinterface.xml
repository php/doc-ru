<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: d1c3de7ae65dde4440720f1ebdc05734b55e91cc Maintainer: rjhdby Status: ready -->
<!-- Reviewed: no -->
<phpdoc:classref xml:id="class.sessionhandlerinterface" xmlns:phpdoc="http://php.net/ns/phpdoc" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude">

 <title>Класс SessionHandlerInterface</title>
 <titleabbrev>SessionHandlerInterface</titleabbrev>

 <partintro>

  <!-- {{{ SessionHandlerInterface intro -->
  <section xml:id="sessionhandlerinterface.intro">
   &reftitle.intro;
   <para>
    <classname>SessionHandlerInterface</classname> - это интерфейс, который определяет минимальный прототип
    для создания пользовательского обработчика сессии. Для предоставления пользовательского
    обработчика сессии функции <function>session_set_save_handler</function>, используя её
    <abbrev>ООП</abbrev> реализацию, класс должен реализовывать этот
    интерфейс.
   </para>
   <para>
    Обратите внимание, что callback-методы этого класса созданы для внутренних
    вызовов PHP и не предназначены для вызовов из вашего кода.
   </para>
  </section>
  <!-- }}} -->

  <section xml:id="sessionhandlerinterface.synopsis">
   &reftitle.interfacesynopsis;

   <!-- {{{ Synopsis -->
   <classsynopsis>
    <ooclass><classname>SessionHandlerInterface</classname></ooclass>

    <!-- {{{ Class synopsis -->
    <classsynopsisinfo>
     <oointerface>
      <interfacename>SessionHandlerInterface</interfacename>
     </oointerface>
    </classsynopsisinfo>
    <!-- }}} -->

    <classsynopsisinfo role="comment">&Methods;</classsynopsisinfo>
    <xi:include xpointer="xmlns(db=http://docbook.org/ns/docbook) xpointer(id('class.sessionhandlerinterface')/db:refentry/db:refsect1[@role='description']/descendant::db:methodsynopsis[1])" />
   </classsynopsis>
   <!-- }}} -->

  </section>

  <section xml:id="sessionhandlerinterface.examples">
   <example>
    <title>
     Пример использования <classname>SessionHandlerInterface</classname>
    </title>
    <para>
     Следующий пример реализует файловую сессию таким же образом, как это реализовано
     во внутреннем обработчике сессии PHP. Этот пример может быть легко расширен для
     обеспечения хранения сессий в предпочитаемой вами базе данных.
    </para>
    <para>
     Обратите внимание, что мы используем объектно-ориентированные прототипы с функцией
     <function>session_set_save_handler</function> и регистрируем функцию завершения
     (shutdown) используя один из параметров этой функции.  Это действие рекомендуется
     производить в большинстве случаев, когда объекты регистрируются в качестве
     обработчиков сессии.
    </para>
    <caution>
     <para>
      Для краткости в этом примере не добавлена проверка входных данных.
      Обратите внимание, что параметр <literal>$id</literal> предоставляется
      пользователем и обязательно должен проверяться для исключения возможных
      атак, использующих, например, проблемы обхода пути.
      <emphasis>Так что ни в коем случае не используйте этот код в промышленной
       эксплуатации, не добавив соответствующие проверки.</emphasis>
     </para>
    </caution>
    <programlisting role="php">
     <![CDATA[
<?php
class MySessionHandler implements SessionHandlerInterface
{
    private $savePath;
    public function open($savePath, $sessionName): bool
    {
        $this->savePath = $savePath;
        if (!is_dir($this->savePath)) {
            mkdir($this->savePath, 0777);
        }
        return true;
    }
    public function close(): bool
    {
        return true;
    }
    #[ReturnTypeWillChange]
    public function read($id)
    {
        return (string)@file_get_contents("$this->savePath/sess_$id");
    }
    public function write($id, $data): bool
    {
        return file_put_contents("$this->savePath/sess_$id", $data) === false ? false : true;
    }
    public function destroy($id): bool
    {
        $file = "$this->savePath/sess_$id";
        if (file_exists($file)) {
            unlink($file);
        }
        return true;
    }
    #[ReturnTypeWillChange]
    public function gc($maxlifetime)
    {
        foreach (glob("$this->savePath/sess_*") as $file) {
            if (filemtime($file) + $maxlifetime < time() && file_exists($file)) {
                unlink($file);
            }
        }
        return true;
    }
}
$handler = new MySessionHandler();
session_set_save_handler($handler, true);
session_start();

// продолжаем работать с переменными сессии, устанавливая или читая их значение из $_SESSION
]]>
    </programlisting>
   </example>
  </section>

 </partintro>

 &reference.session.entities.sessionhandlerinterface;

</phpdoc:classref>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
