<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: f9c4a68ef4f89e51e6d9b905ad3ddb6492386dd3 Maintainer: bfl Status: ready -->
<!-- Reviewed: yes Maintainer: lex -->
<refentry xml:id="function.pack" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>pack</refname>
  <refpurpose>Упаковать данные в бинарную строку</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>string</type><methodname>pack</methodname>
   <methodparam><type>string</type><parameter>format</parameter></methodparam>
   <methodparam rep="repeat"><type>mixed</type><parameter>values</parameter></methodparam>
  </methodsynopsis>
  <para>
   Упаковывает заданные аргументы в бинарную строку в соответствии с форматом в параметре
   <parameter>format</parameter>.
  </para>
  <para>
   Идея этой функции была заимствована из Perl и все коды форматирования
   работают так же. Однако, есть некоторые отсутствующие коды форматирования,
   такие как код формата Perl "u".
  </para>
  <para>
   Необходимо иметь в виду, что отличие между знаковыми и беззнаковыми
   значениями влияет только на функцию <function>unpack</function>, тогда как
   функция <function>pack</function> даёт одинаковый результат для знаковых и
   беззнаковых кодов формата.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>format</parameter></term>
     <listitem>
      <para>
       Параметр <parameter>format</parameter> задаётся в виде строки и состоит
       из кодов формата и опционального аргумента повторения. Аргумент может быть
       целочисленным, либо <literal>*</literal> для повторения до конца введённых
       данных. Для a, A, h, H число повторений определяет то, сколько символов
       взято от одного аргумента данных, для @ - это абсолютная позиция для размещения
       следующих данных, для всего остального число повторений определяет как много
       аргументов данных было обработано и упаковано в результирующую бинарную строку.
      </para>
      <para>
       Работающие на данный момент форматы:
       <table>
        <title>Символы форматов функции <function>pack</function></title>
        <tgroup cols="2">
         <thead>
          <row>
           <entry>Код</entry>
           <entry>Описание</entry>
          </row>
         </thead>
         <tbody>
          <row>
           <entry>a</entry>
           <entry>Строка (string) с NUL-заполнением</entry>
          </row>
          <row>
           <entry>A</entry>
           <entry>Строка (string) со SPACE-заполнением</entry></row>
          <row>
           <entry>h</entry>
           <entry>Hex-строка (Hex string), с нижнего разряда</entry></row>
          <row>
           <entry>H</entry>
           <entry>Hex-строка (Hex string), с верхнего разряда</entry></row>
          <row>
           <entry>c</entry>
           <entry>знаковый символ (char)</entry>
          </row>
          <row>
           <entry>C</entry>
           <entry>беззнаковый символ (char)</entry>
          </row>
          <row>
           <entry>s</entry>
           <entry>знаковый short (всегда 16 бит, машинный байтовый порядок)</entry>
          </row>
          <row>
           <entry>S</entry>
           <entry>беззнаковый short (всегда 16 бит, машинный байтовый порядок)</entry>
          </row>
          <row>
           <entry>n</entry>
           <entry>беззнаковый short (всегда 16 бит, порядок big endian)</entry>
          </row>
          <row>
           <entry>v</entry>
           <entry>беззнаковый short (всегда 16 бит, порядок little endian)</entry>
          </row>
          <row>
           <entry>i</entry>
           <entry>знаковый integer (машинно-зависимый размер и порядок)</entry>
          </row>
          <row>
           <entry>I</entry>
           <entry>беззнаковый integer (машинно-зависимый размер и порядок)</entry>
          </row>
          <row>
           <entry>l</entry>
           <entry>знаковый long (всегда 32 бит, машинный порядок)</entry>
          </row>
          <row>
           <entry>L</entry>
           <entry>беззнаковый long (всегда 32 бит, машинный порядок)</entry>
          </row>
          <row>
           <entry>N</entry>
           <entry>беззнаковый long (всегда 32 бит, порядок big endian)</entry>
          </row>
          <row>
           <entry>V</entry>
           <entry>беззнаковый long (всегда 32 бит, порядок little endian)</entry>
          </row>
          <row>
           <entry>q</entry>
           <entry>signed long long (всегда 64 bit, машинный порядок)</entry>
          </row>
          <row>
           <entry>Q</entry>
           <entry>беззнаковый long long (всегда 64 bit, машинный порядок)</entry>
          </row>
          <row>
           <entry>J</entry>
           <entry>беззнаковый long long (всегда 64 bit, порядок big endian)</entry>
          </row>
          <row>
           <entry>P</entry>
           <entry>беззнаковый long long (всегда 64 bit, порядок little endian)</entry>
          </row>
          <row>
           <entry>f</entry>
           <entry>float (машинно-зависимые размер и представление)</entry>
          </row>
          <row>
           <entry>g</entry>
           <entry>float (машинно-зависимые размер, порядок байт little endian)</entry>
          </row>
          <row>
           <entry>G</entry>
           <entry>float (машинно-зависимые размер, порядок байт big endian)</entry>
          </row>
          <row>
           <entry>d</entry>
           <entry>double (машинно-зависимые размер и представление)</entry>
          </row>
          <row>
           <entry>e</entry>
           <entry>double (машинно-зависимые размер, порядок байт little endian)</entry>
          </row>
          <row>
           <entry>E</entry>
           <entry>double (машинно-зависимые размер, порядок байт big endian)</entry>
          </row>
          <row>
           <entry>x</entry>
           <entry>байт NUL</entry>
          </row>
          <row>
           <entry>X</entry>
           <entry>Резервирование одного байта</entry>
          </row>
          <row>
           <entry>Z</entry>
           <entry>Строка (string) с NUL-заполнением</entry>
          </row>
          <row>
           <entry>@</entry>
           <entry>NUL-заполнение до абсолютной позиции</entry>
          </row>
         </tbody>
        </tgroup>
       </table>
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>values</parameter></term>
     <listitem>
      <para>
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Возвращает бинарную строку, содержащую данные&return.falseforfailure;.
  </para>
 </refsect1>

 <refsect1 role="changelog"><!-- {{{ -->
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>8.0.0</entry>
       <entry>
        Функция больше не возвращает &false; в случае возникновения ошибки.
       </entry>
      </row>
      <row>
       <entry>7.2.0</entry>
       <entry>
        Типы <type>float</type> и <type>double</type> поддерживают как обратный, так и прямой порядок передачи байтов.
       </entry>
      </row>
      <row>
       <entry>7.0.15,7.1.1</entry>
       <entry>
        Добавлены коды "e", "E", "g" и "G" для поддержки принудительного указания порядка байт для float и double.
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1><!-- }}} -->

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Пример использования <function>pack</function></title>
    <programlisting role="php">
<![CDATA[
<?php
$binarydata = pack("nvc*", 0x1234, 0x5678, 65, 66);
?>
]]>
    </programlisting>
    <para>
     Полученная бинарная строка длиной 6 байт будет содержать
     последовательность байтов 0x12, 0x34, 0x78, 0x56, 0x41, 0x42.
    </para>
   </example>
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  <caution>
   <para>
    Необходимо отметить, что PHP сохраняет значения типа <type>int</type> как
    знаковые с машинно-зависимым размером (C тип <literal>long</literal>).
    Все числа, переданные как <type>int</type>, но выходящие за границы этого типа будут сохранены с типом <type>float</type>.
    При упаковке этих <type>float</type> как <type>int</type>, они будут переданы с типом <type>int</type>. Это может как совпадать, так и нет с заданным шаблоном.
   </para>
   <para>
    Наиболее частым является случай, когда упаковываются беззнаковые числа типа <type>int</type>. В системах, где <type>int</type> имеет размер в 32 бита, число обычно передаётся по тому же шаблону, как если бы <type>int</type> был беззнаковым (хотя, это зависит от определённых преобразований из знаковое в беззнаковое, согласно стандарту С). В системах, где тип <type>int</type> имеет размер в 64 бита, тип <type>float</type> не имеет мантиссы, достаточной по размеру для хранения значения без потери точности. Если эти системы также имеют простой 64-битный С тип <literal>int</literal> (большинство UNIX систем не имеют), то единственным путём для использования формата <literal>I</literal> в верхнем разряде является создание отрицательных <type>int</type> значений с тем же представлением как и в определённом беззнаковом значении.
   </para>
  </caution>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>unpack</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry><!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
