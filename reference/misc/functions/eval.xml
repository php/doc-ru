<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 68308f0095c6ebf0d19afa72f2bac0a9f194e77d Maintainer: aur Status: ready -->
<!-- Reviewed: no -->
<refentry xml:id="function.eval" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>eval</refname>
  <refpurpose>Расценивает строку как PHP-код и выполняет его</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>mixed</type><methodname>eval</methodname>
   <methodparam><type>string</type><parameter>code</parameter></methodparam>
  </methodsynopsis>
  <para>
   Выполняет переданную в параметре <parameter>code</parameter> строку как код PHP.
  </para>
  <para>
   Выполняемый код наследует ту же
   <link linkend="language.variables.scope">область видимости переменной</link>,
   что и строка, на которой языковая конструкция <function>eval</function> была вызвана.
   Любые доступные на этой строке переменные будут доступны для чтения
   и изменения в выполняемом коде.
   Однако все объявленные в этом коде функции и классы получат глобальную область видимости.
   Говоря по-другому, компилятор расценит выполняемый код так, как если бы это был
   <link linkend="function.include">подключёный</link> файл.
  </para>
  <caution>
   <para>
    Языковая конструкция <function>eval</function> может быть <emphasis>очень
    опасной</emphasis>, поскольку может выполнять произвольный код.
    <emphasis>Поэтому от работы с ней воздерживаются</emphasis>. Если тщательный поиск других решений показал,
    что альтернативы нет, внимательно проверяют, чтобы в неё
    <emphasis>не передавались пользовательские данные</emphasis> без их правильной предварительной проверки.
   </para>
  </caution>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>code</parameter></term>
     <listitem>
      <para>
       Выполняемая строка кода PHP.
      </para>
      <para>
       Код не должен быть обёрнут открывающимся и закрывающимся
       <link linkend="language.basic-syntax.phpmode">тегами PHP</link>, то есть
       строка должна быть, например, такой: <literal>'echo "Привет!";'</literal>,
       но не такой <literal>'&lt;?php echo "Привет!"; &gt;'</literal>.
       Можно переключаться между режимами PHP- и HTML-кода, например:
       <literal>'echo "Код PHP!"; ?&gt;Код HTML&lt;?php echo "Снова код PHP!";'</literal>.
      </para>
      <para>
       Передаваемый код должен быть верным выполняемым кодом PHP. Это значит, что
       операторы должны быть разделены точкой с запятой (;).
       При выполнении строки <literal>'echo "Привет!"'</literal> будет сгенерирована ошибка,
       а строка <literal>'echo "Привет!";'</literal> будет успешно выполнена.
      </para>
      <para>
       Указание в строке кода ключевого слова <literal>return</literal> прекращает
       выполнение.
      </para>
      <para>
       Код из строки будет выполнен в той области видимости, в которой вызвана конструкция <function>eval</function>.
       Поэтому переменные, которые определены или
       изменены в ней, сохранят видимость
       после завершения вызова конструкции <function>eval</function>.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Языковая конструкция <function>eval</function> возвращает значение &null;, или значение,
   которое вернул вызванный в выполняемом коде оператор <literal>return</literal>.
   Начиная с PHP 7, если в выполняемом коде присутствует ошибка,
   то конструкция <function>eval</function> вызывает исключение "ParseError". До PHP 7 в таких случаях
   возвращалось булево значение &false; и продолжалось нормальное
   выполнение последующего кода. Невозможно поймать ошибку парсера в конструкции <function>eval</function>
   функцией <function>set_error_handler</function>.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Пример функции <function>eval</function> — простое слияние текста</title>
    <programlisting role="php">
<![CDATA[
<?php
$string = 'чашка';
$name = 'кофе';
$str = 'Это $string с моим $name.';
echo $str. "\n";
eval("\$str = \"$str\";");
echo $str. "\n";
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Это $string с моим $name.
Это чашка с моим кофе.
]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;

  &note.language-construct;

  &tip.ob-capture;
  <note>
   <para>
    В случае фатальной ошибки в выполняемом коде прекращается выполнение всего скрипта.
   </para>
  </note>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>call_user_func</function></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
