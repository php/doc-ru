<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: a60ef65239113c7871643be68ada91081376c936 Maintainer: tmn Status: ready -->
<!-- Reviewed: no -->
<refentry xml:id="function.mb-decode-numericentity" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>mb_decode_numericentity</refname>
  <refpurpose>Декодирует числовые HTML-сущности в символы</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>string</type><methodname>mb_decode_numericentity</methodname>
   <methodparam><type>string</type><parameter>string</parameter></methodparam>
   <methodparam><type>array</type><parameter>map</parameter></methodparam>
   <methodparam choice="opt"><type class="union"><type>string</type><type>null</type></type><parameter>encoding</parameter><initializer>&null;</initializer></methodparam>
  </methodsynopsis>
  <para>
   Функция преобразовывает числовые HTML-сущности строки <parameter>string</parameter>
   в символы на основе диапазонов кодовых точек.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>string</parameter></term>
     <listitem>
      <para>
       Декодируемая строка (<type>string</type>).
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>map</parameter></term>
     <listitem>
      <para>
       Параметр <parameter>map</parameter> принимает массив, который определяет диапазоны кодовых точек для преобразования.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>encoding</parameter></term>
     <listitem>
      &mbstring.encoding.parameter;
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>is_hex</parameter></term>
     <listitem>
      <para>
       Параметр устарел.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Функция возвращает преобразованную строку (<type>string</type>).
  </para>
 </refsect1>

 <refsect1 role="errors">
  &reftitle.errors;
  <simpara>
   Функция теперь выбрасывает ошибку <exceptionname>ValueError</exceptionname>,
   если список <parameter>map</parameter> содержит значения кроме &integer;.
  </simpara>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <informaltable>
   <tgroup cols="2">
    <thead>
     <row>
      <entry>&Version;</entry>
      <entry>&Description;</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry>8.4.0</entry>
      <entry>
       Функция <function>mb_decode_numericentity</function> теперь выбрасывает
       ошибку <exceptionname>ValueError</exceptionname>, если список <parameter>map</parameter>
       содержит значения кроме &integer;.
      </entry>
     </row>
     &mbstring.changelog.encoding-nullable;
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Пример формата для установки параметра <parameter>map</parameter></title>
    <programlisting role="php">
<![CDATA[
<?php

$convmap = array(
    int start_code1, int end_code1, int offset1, int mask1,
    int start_code2, int end_code2, int offset2, int mask2,
    // ........
    int start_codeN, int end_codeN, int offsetN, int maskN
);
// Значениями start_codeN и end_codeN определяется диапазон кодовых точек Юникода.
// К кодовой точке исходного символа добавляется смещение offsetN и выполняется побитовая операция 'И' со значением маски maskN,
// а полученное значение затем преобразовывается в числовую ссылку на символ.

?>
]]>
    </programlisting>
   </example>
  </para>

  <para>
   <example>
    <title>Пример экранирования строки JavaScript-кода через параметр <parameter>map</parameter></title>
    <programlisting role="php">
<![CDATA[
<?php

function escape_javascript_string($str)
{
    $map = [
        1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,0,0, // 49
        0,0,0,0,0,0,0,0,1,1,
        1,1,1,1,1,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,
        0,1,1,1,1,1,1,0,0,0, // 99
        0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,
        0,0,0,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1, // 149
        1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1, // 199
        1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1, // 249
        1,1,1,1,1,1,1, // 255
    ];

    // Кодировка символа UTF-8
    $mblen = mb_strlen($str, 'UTF-8');
    $utf32 = bin2hex(mb_convert_encoding($str, 'UTF-32', 'UTF-8'));

    for ($i=0, $encoded=''; $i < $mblen; $i++) {
        $u = substr($utf32, $i * 8, 8);
        $v = base_convert($u, 16, 10);

        if ($v < 256 && $map[$v]) {
            $encoded .= '\\x' . substr($u, 6,2);
        } else if ($v == 2028) {
            $encoded .= '\\u2028';
        } else if ($v == 2029) {
            $encoded .= '\\u2029';
        } else {
            $encoded .= mb_convert_encoding(hex2bin($u), 'UTF-8', 'UTF-32');
        }
    }

    return $encoded;
}

// Данные для теста
$convmap = [ 0x0, 0xffff, 0, 0xffff ];
$msg = '';

for ($i=0; $i < 1000; $i++) {
    // Функцией chr() невозможно сгенерировать правильные данные в кодировке UTF-8 с кодовыми точками больше 128,
    // поэтому вызывается функция mb_decode_numericentity()
    $msg .= mb_decode_numericentity('&#' . $i . ';', $convmap, 'UTF-8');
}

// var_dump($msg);
var_dump(escape_javascript_string($msg));

?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>mb_encode_numericentity</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
