<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: f9c4a68ef4f89e51e6d9b905ad3ddb6492386dd3 Maintainer: tmn Status: ready -->
<!-- $Revision$ -->
<!-- Reviewed: yes Maintainer: rjhdby -->
<refentry xml:id="function.spl-autoload-register" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>spl_autoload_register</refname>
  <refpurpose>
   Регистрирует заданную функцию в качестве реализации метода __autoload()
  </refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>bool</type><methodname>spl_autoload_register</methodname>
   <methodparam choice="opt"><type>callable</type><parameter>autoload_function</parameter></methodparam>
   <methodparam choice="opt"><type>bool</type><parameter>throw</parameter><initializer>&true;</initializer></methodparam>
   <methodparam choice="opt"><type>bool</type><parameter>prepend</parameter><initializer>&false;</initializer></methodparam>
  </methodsynopsis>
  <para>
   Регистрирует функцию __autoload в предоставляемой SPL очереди. В результате очередь будет
   активирована, даже если ранее она была выключена.
  </para>
  <para>
   Если в вашем скрипте реализована функция <function>__autoload</function>, её
   необходимо явно зарегистрировать в очереди __autoload. Это необходимо,
   т.к. <function>spl_autoload_register</function> полностью заменяет механизм
   кеширования <function>__autoload</function> функциями
   <function>spl_autoload</function> и
   <function>spl_autoload_call</function>.
  </para>
  <para>
   <function>spl_autoload_register</function> позволяет задать несколько реализаций
   метода автозагрузки. Она создаёт очередь из
   функций автозагрузки в порядке их определения в скрипте, тогда как
   встроенная функция <function>__autoload</function> может иметь
   только одну реализацию.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>autoload_function</parameter></term>
     <listitem>
      <para>
       Имя функции, реализующей метод <function>spl_autoload</function>. Если
       аргумент не задан, будет зарегистрирована реализация по умолчанию.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>throw</parameter></term>
     <listitem>
      <para>
       Этот параметр определяет, должна ли
       <function>spl_autoload_register</function> выбрасывать исключение, если
       зарегистрировать <parameter>autoload_function</parameter> оказалось
       невозможным.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>prepend</parameter></term>
     <listitem>
      <para>
       Если передано значение true, <function>spl_autoload_register</function>
       поместит указанную функцию в начало очереди вместо добавления в конец.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.success;
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>
     <function>spl_autoload_register</function> как альтернатива функции
     <function>__autoload</function>
    </title>
    <programlisting role="php">
<![CDATA[
<?php

// function __autoload($class) {
//     include 'classes/' . $class . '.class.php';
// }

function my_autoloader($class) {
    include 'classes/' . $class . '.class.php';
}

spl_autoload_register('my_autoloader');

// Можно использовать анонимные функции
spl_autoload_register(function ($class) {
    include 'classes/' . $class . '.class.php';
});

?>
]]>
    </programlisting>
   </example>
   <example>
    <title>
     Пример использования <function>spl_autoload_register</function>
     в случае, если класс не загрузился
    </title>
    <programlisting role="php">
<![CDATA[
<?php

namespace Foobar;

class Foo {
    static public function test($name) {
        print '[['. $name .']]';
    }
}

spl_autoload_register(__NAMESPACE__ .'\Foo::test');

new InexistentClass;

?>
]]>
    </programlisting>
    &example.outputs.similar;
    <screen>
<![CDATA[
[[Foobar\InexistentClass]]
Fatal error: Class 'Foobar\InexistentClass' not found in ...
]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>__autoload</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
