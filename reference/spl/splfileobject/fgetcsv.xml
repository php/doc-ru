<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 73007ad9889ca2a3d85b0a710b55deb44ac370cc Maintainer: tmn Status: ready -->
<!-- Reviewed: no -->
<refentry xml:id="splfileobject.fgetcsv" xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude">
 <refnamediv>
  <refname>SplFileObject::fgetcsv</refname>
  <refpurpose>
   Получает строку из файлового указателя и разбирает по CSV-полям
  </refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis role="SplFileObject">
   <modifier>public</modifier> <type class="union"><type>array</type><type>false</type></type><methodname>SplFileObject::fgetcsv</methodname>
   <methodparam choice="opt"><type>string</type><parameter>separator</parameter><initializer>","</initializer></methodparam>
   <methodparam choice="opt"><type>string</type><parameter>enclosure</parameter><initializer>"\""</initializer></methodparam>
   <methodparam choice="opt"><type>string</type><parameter>escape</parameter><initializer>"\\"</initializer></methodparam>
  </methodsynopsis>
  <para>
   Метод получает строку из <acronym>CSV</acronym>-файла и возвращает массив
   с прочитанными полями.
  </para>
  <xi:include xpointer="xmlns(db=http://docbook.org/ns/docbook) xpointer(id('function.fgetcsv')/db:refsect1[@role='description']//db:note/.)">
   <xi:fallback/>
  </xi:include>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>separator</parameter></term>
     <listitem>
      <para>
       Параметр устанавливает символ-разделитель полей и принимает только один однобайтовый символ.
       Значение по умолчанию равно запятой — <literal>,</literal> или символу, который
       установили методом <methodname>SplFileObject::setCsvControl</methodname>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>enclosure</parameter></term>
     <listitem>
      <para>
       Параметр устанавливает символ-ограничитель значений в полях и принимает
       только один однобайтовый символ. Значение по умолчанию равно двойной кавычке — <literal>"</literal>
       или значению, которое установили методом
       <methodname>SplFileObject::setCsvControl</methodname>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>escape</parameter></term>
     <listitem>
      <para>
       Параметр устанавливает символ экранирования и принимает не больше одного однобайтового символа.
       Значение по умолчанию равно обратному слешу
       <literal>\</literal> или значению, которое установили методом
       <methodname>SplFileObject::setCsvControl</methodname>.
       Пустая строка <literal>""</literal> отключает внутренний механизм экранирования.
      </para>
      <note>
       <simpara>
        Обычно символ ограничителя значений — <parameter>enclosure</parameter> экранируется внутри поля путём удвоения;
        однако как альтернативу разрешается использовать символ экранирования <parameter>escape</parameter>.
        Поэтому для стандартных значений параметра смысл значений <literal>""</literal> и <literal>\"</literal>
        одинаков. Символ экранирования — <parameter>escape</parameter> не несёт отдельного смысла,
        кроме экранирования символа ограничителя значений — <parameter>enclosure</parameter>;
        он даже не экранирует сам себя.
       </simpara>
      </note>
      <warning>
       <simpara>
        Начиная с PHP 8.4.0 полагаться на значение по умолчанию,
        которое содержит параметр <parameter>escape</parameter>, не рекомендуют.
        Значение потребуется указать явно: позиционно,
        как <link linkend="functions.named-arguments">именованный аргумент</link>
        или методом <methodname>SplFileObject::setCsvControl</methodname>.
       </simpara>
      </warning>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
  &warning.csv.escape-parameter;
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Метод возвращает массив, который содержит данные прочитанной строки, или &false;, если возникла ошибка.
  </para>
  <note>
   <para>
    Пустая строка в CSV-файле возвращается как массив с единственным элементом &null;,
    если только через побитовое ИЛИ не указали константы
    <constant>SplFileObject::SKIP_EMPTY | SplFileObject::DROP_NEW_LINE</constant>,
    с которыми пустые строки пропускаются.
   </para>
  </note>
 </refsect1>

 <xi:include xpointer="xmlns(db=http://docbook.org/ns/docbook) xpointer(id('function.fgetcsv')/db:refsect1[@role='errors']/.)">
  <xi:fallback/>
 </xi:include>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <xi:include xpointer="xmlns(db=http://docbook.org/ns/docbook) xpointer(id('function.fgetcsv')/db:refsect1[@role='changelog']//db:row[db:entry[text()='8.4.0']]/.)">
       <xi:fallback/>
      </xi:include>
      <row>
       <entry>7.4.0</entry>
       <entry>
        Теперь параметр <parameter>escape</parameter> принимает пустую строку
        для отключения внутреннего механизма экранирования.
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Пример получения и разбора строки по CSV-полям методом <methodname>SplFileObject::fgetcsv</methodname></title>
    <programlisting role="php">
<![CDATA[
<?php

$file = new SplFileObject("data.csv");

while (!$file->eof()) {
    var_dump($file->fgetcsv());
}

?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   <example>
    <title>Пример разбора строк с флагом <constant>SplFileObject::READ_CSV</constant></title>
    <programlisting role="php">
<![CDATA[
<?php

$file = new SplFileObject("animals.csv");
$file->setFlags(SplFileObject::READ_CSV);

foreach ($file as $row) {
    list($animal, $class, $legs) = $row;
    printf("A %s is a %s with %d legs\n", $animal, $class, $legs);
}

?>
]]>
    </programlisting>
    <para>Contents of animals.csv</para>
    <programlisting role="txt">
<![CDATA[
crocodile,reptile,4
dolphin,mammal,0
duck,bird,2
koala,mammal,4
salmon,fish,0
]]>
    </programlisting>
    &example.outputs.similar;
    <screen>
<![CDATA[
A crocodile is a reptile with 4 legs
A dolphin is a mammal with 0 legs
A duck is a bird with 2 legs
A koala is a mammal with 4 legs
A salmon is a fish with 0 legs
]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <simplelist>
   <member><methodname>SplFileObject::fputcsv</methodname></member>
   <member><methodname>SplFileObject::setCsvControl</methodname></member>
   <member><methodname>SplFileObject::getCsvControl</methodname></member>
   <member><methodname>SplFileObject::setFlags</methodname></member>
   <member><constant>SplFileObject::READ_CSV</constant></member>
   <member><methodname>SplFileObject::current</methodname></member>
   <member><function>fputcsv</function></member>
   <member><function>fgetcsv</function></member>
   <member><function>str_getcsv</function></member>
  </simplelist>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
