<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 88c8421cbef98b73ac59f58cc60d317c4861fd89 Maintainer: rjhdby Status: ready -->
<!-- Reviewed: yes Maintainer: sergey -->

<refentry xml:id="ev.recommendedbackends" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>Ev::recommendedBackends</refname>
  <refpurpose>Получить битовую маску рекомендованных бэкендов для данной платформы</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <modifier>final</modifier>
   <modifier>public</modifier>
   <modifier>static</modifier>
   <type>int</type>
   <methodname>Ev::recommendedBackends</methodname>
   <void />
  </methodsynopsis>
  <para>
   Возвращает набор всех бэкендов, встроенных в используемую
   <literal>libev</literal> и, также, рекомендованных для данной платформы, в
   том смысле, что они будут работать с большинством типов дескрипторов файлов.
   Обычно этот список меньше, чем возвращаемый
   <function>ev_supported_backends</function>.
   К примеру, <literal>kqueue</literal> не работает на большинстве систем
   <literal>BSD</literal> и не будет автоопределён, если только вы принудительно
   его не запросите. Это набор бэкендов которые будет опрашивать
   <literal>libev</literal>, если бэкенд не задан в явном виде.
  </para>
 </refsect1>
 <refsect1 role="parameters">
  &reftitle.parameters;
  &no.function.parameters;
 </refsect1>
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Возвращает битовую маску, содержащую
   <link
           linkend="ev.constants.watcher-backends">флаги бэкенда</link>, объединённые
   с помощью побитового <emphasis>ИЛИ</emphasis>.
  </para>
 </refsect1>
 <refsect1 role="examples">
  &reftitle.examples;
  <example>
   <title>Встраивание одного цикла в другой</title>
   <programlisting role="php">
    <![CDATA[
<?php
/*
* Попытаемся получить встраиваемый событийный цикл и встроить его в
* событийный цикл по умолчанию.
* Если это невозможно - используем цикл по умолчанию.
* Цикл по умолчанию хранится в $loop_hi, а встраиваемый в $loop_lo
* (который равен $loop_hi в случае, если нельзя использовать встраиваемый цикл).
*
* Пример взят с сайта
* http://pod.tst.eu/http://cvs.schmorp.de/libev/ev.pod#Examples_CONTENT-9
*/
$loop_hi = EvLoop::defaultLoop();
$loop_lo = NULL;
$embed   = NULL;

/*
* Смотрим, есть ли хотя бы один подходящий бэкенд
* (флаг 0 означает автоопределение)
*/
$loop_lo = Ev::embeddableBackends() & Ev::recommendedBackends()
 ? new EvLoop(Ev::embeddableBackends() & Ev::recommendedBackends())
 : 0;

if ($loop_lo) {
 $embed = new EvEmbed($loop_lo, function () {});
} else {
 $loop_lo = $loop_hi;
}
?>
]]>
   </programlisting>
  </example>
 </refsect1>
 <refsect1 role="seealso">
  &reftitle.seealso;
  <simplelist>
   <member>
    <classname>EvEmbed</classname>
   </member>
   <member>
    <methodname>Ev::embeddableBackends</methodname>
   </member>
   <member>
    <methodname>Ev::supportedBackends</methodname>
   </member>
   <member>
    <link linkend="ev.constants.watcher-backends">Флаги бэкенда</link>
   </member>
   <member>
    <link linkend="ev.examples">Примеры</link>
   </member>
  </simplelist>
 </refsect1>
</refentry>
        <!-- Keep this comment at the end of the file
        Local variables:
        mode: sgml
        sgml-omittag:t
        sgml-shorttag:t
        sgml-minimize-attributes:nil
        sgml-always-quote-attributes:t
        sgml-indent-step:1
        sgml-indent-data:t
        indent-tabs-mode:nil
        sgml-parent-document:nil
        sgml-default-dtd-file:"~/.phpdoc/manual.ced"
        sgml-exposed-tags:nil
        sgml-local-catalogs:nil
        sgml-local-ecat-files:nil
        End:
        vim600: syn=xml fen fdm=syntax fdl=2 si
        vim: et tw=78 syn=sgml
        vi: ts=1 sw=1
        -->
