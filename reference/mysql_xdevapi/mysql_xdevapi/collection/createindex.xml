<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 5a20fd035d9e63be7ccc3b4ac2e361a10a5add32 Maintainer: sergey Status: ready -->
<!-- Reviewed: no -->

<refentry xml:id="mysql-xdevapi-collection.createindex" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>Collection::createIndex</refname>
  <refpurpose>Создаёт индекс для коллекции</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <modifier>public</modifier> <type>void</type><methodname>mysql_xdevapi\Collection::createIndex</methodname>
   <methodparam><type>string</type><parameter>index_name</parameter></methodparam>
   <methodparam><type>string</type><parameter>index_desc_json</parameter></methodparam>
  </methodsynopsis>
  <para>
    Создаёт индекс для коллекции.
  </para>
  <para>
   Выдаётся исключение, если индекс с таким именем уже существует,
   или если определение индекса сформировано неправильно.
   </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <variablelist>
   <varlistentry>
    <term><parameter>index_name</parameter></term>
    <listitem>
     <para>
      Имя индекса, который нужно создать. Должно быть корректным именем индекса,
      допустимым для SQL-запроса <literal>CREATE INDEX</literal>.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><parameter>index_desc_json</parameter></term>
    <listitem>
     <para>
      Определение индекса для создания. Содержит массив объектов IndexField,
      и каждый объект описывает один элемент документа для добавления в индекс,
      а также необязательную строку для типа индекса, который может быть INDEX (по умолчанию) или SPATIAL.
     </para>
     <para>
      Одно описание IndexField состоит из следующих полей:
     </para>
     <itemizedlist>
      <listitem>
        <para>
          <code>field</code>: строка, полный путь документа к элементу документа или полю для индексации.
        </para>
      </listitem>
      <listitem>
       <para>
        <code>type</code>: строка, один из поддерживаемых типов столбцов SQL для сопоставления поля.
        Для числовых типов может быть добавлено необязательное ключевое слово UNSIGNED.
        Для типа TEXT может быть добавлена длина, учитываемая для индексации.
       </para>
      </listitem>
      <listitem>
        <para>
         <code>required</code>: булево, (необязательное) true, если поле должно быть обязательным в документе.
         По умолчанию используется значение &false;, за исключением типа <literal>GEOJSON</literal>,
         где по умолчанию используется значение &true;.
         </para>
       </listitem>
      <listitem>
        <para>
         <code>options</code>: целое число, (необязательное) флаги специальных опций для использования
         при декодировании данных <literal>GEOJSON</literal>.
        </para>
      </listitem>
      <listitem>
        <para>
         <code>srid</code>: целое число, (необязательное) значение srid для использования
         при декодировании данных <literal>GEOJSON</literal>.
        </para>
      </listitem>
      </itemizedlist>

      <para>
       Ошибочно включать другие поля, не описанные выше, в документы
       IndexDefinition или IndexField.
      </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para></para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <example>
   <title>Пример использования <function>mysql_xdevapi\Collection::createIndex</function></title>
   <programlisting role="php">
<![CDATA[
<?php
$session = mysql_xdevapi\getSession("mysqlx://user:password@localhost");
$session->sql("DROP DATABASE IF EXISTS addressbook")->execute();
$session->sql("CREATE DATABASE addressbook")->execute();

$schema     = $session->getSchema("addressbook");
$collection = $schema->createCollection("people");

// Создание текстового индекса
$collection->createIndex(
  'myindex1',
  '{"fields": [{
    "field": "$.name",
    "type": "TEXT(25)",
    "required": true}],
    "unique": false}'
);

// Пространственный индекс
$collection->createIndex(
  'myindex2',
  '{"fields": [{
    "field": "$.home",
    "type": "GEOJSON",
    "required": true}],
    "type": "SPATIAL"}'
);

// Индекс с несколькими полями
$collection->createIndex(
  'myindex3',
  '{"fields": [
    {
      "field": "$.name",
      "type": "TEXT(20)",
      "required": true
    },
    {
      "field": "$.age",
      "type": "INTEGER"
    },
    {
      "field": "$.job",
      "type": "TEXT(30)",
      "required": false
    }
  ],
  "unique": true
  }'
);
]]>
   </programlisting>
  </example>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
