<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 3f3362ebcdd1a27cf9c9c751dd5cbe8a6264d1c3 Maintainer: sergey Status: ready -->
<!-- Reviewed: no -->
<refentry xml:id="function.simdjson-decode" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>simdjson_decode</refname>
  <refpurpose>Декодирует строку JSON</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>mixed</type><methodname>simdjson_decode</methodname>
   <methodparam><type>string</type><parameter>json</parameter></methodparam>
   <methodparam choice="opt"><type>bool</type><parameter>associative</parameter><initializer>&false;</initializer></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>depth</parameter><initializer>512</initializer></methodparam>
  </methodsynopsis>
  <para>
   Принимает строку в кодировке JSON и преобразовывает её в значение PHP.
   При этом будет использована более быстрая реализация Simultaneous Instruction,
   Multiple Data, чем в функции <function>json_decode</function>,
   если это поддерживается архитектурой компьютера.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <variablelist>
   <varlistentry>
    <term><parameter>json</parameter></term>
    <listitem>
     <para>
      Декодируемая строка (<type>string</type>) в <parameter>json</parameter> формате.
     </para>
     <para>
      Функция работает только со строками в кодировке UTF-8.
     </para>
     <para>
      Функция анализирует допустимые входные данные, которые функция <function>json_decode</function>
      может декодировать, при условии, что их длина не превышает 4 Гб.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><parameter>associative</parameter></term>
    <listitem>
     <para>
      При значении &true;, объекты JSON будут возвращены как ассоциативные массивы (&array;);
      при значении &false;, объекты JSON будут возвращены как объекты (&object;).
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><parameter>depth</parameter></term>
    <listitem>
     <para>
      Максимальная глубина вложенности декодируемой структуры.
      Значение должно быть больше <literal>0</literal> и меньше или равно <literal>2147483647</literal>.

      Вызывающие команды должны использовать достаточно маленькие значения,
      поскольку большая глубина требуют больше места в буфере и увеличивают глубину рекурсии,
      в отличие от текущей реализации функции <function>json_decode</function>.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Возвращает значение, закодированное в параметре <parameter>json</parameter>
   в соответствующем типе PHP.
   Значения <literal>true</literal>, <literal>false</literal> и <literal>null</literal>
   возвращаются как &true;, &false; и &null; соответственно.
  </para>
 </refsect1>

 <refsect1 role="errors">
  &reftitle.errors;
  <para>
   Если параметр <parameter>json</parameter> недействителен, то начиная с версии PECL simdjson 2.1.0
   выбрасывается исключение <classname>SimdJsonException</classname>,
   тогда как ранее выбрасывалось исключение <classname>RuntimeException</classname>.
  </para>
  <para>
   Если параметр <parameter>depth</parameter> находится вне допустимого диапазона,
   то начиная с версии PECL simdjson 3.0.0 выбрасывается исключение <classname>SimdJsonValueError</classname>,
   тогда как ранее выдавалась ошибка уровня <constant>E_WARNING</constant>.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Примеры использования <function>simdjson_decode</function></title>
    <programlisting role="php">
<![CDATA[
<?php
$json = '{"a":1,"b":2,"c":3}';

var_dump(simdjson_decode($json));
var_dump(simdjson_decode($json, true));

?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
object(stdClass)#1 (3) {
  ["a"]=>
  int(1)
  ["b"]=>
  int(2)
  ["c"]=>
  int(3)
}
array(3) {
  ["a"]=>
  int(1)
  ["b"]=>
  int(2)
  ["c"]=>
  int(3)
}
]]>
    </screen>
   </example>
   <example>
    <title>Доступ к недопустимым свойствам объекта</title>
    <simpara>
     Доступ к элементам объекта, содержащим символы, не разрешённые соглашением PHP об именовании (например, дефис),
     может быть осуществлён путём заключения имени элемента в фигурные скобки и апостроф.
    </simpara>
    <programlisting role="php">
<![CDATA[
<?php

$json = '{"foo-bar": 12345}';

$obj = simdjson_decode($json);
print $obj->{'foo-bar'}; // 12345

?>
]]>
    </programlisting>
   </example>
   <example>
    <title>Распространённые ошибки при использовании <function>simdjson_decode</function></title>
    <programlisting role="php">
<![CDATA[
<?php

// следующие строки являются допустимыми JavaScript, но не являются допустимыми JSON

// имя и значение должны быть заключены в двойные кавычки
// одинарные кавычки недопустимы
$bad_json = "{ 'bar': 'baz' }";
simdjson_decode($bad_json); // Выбрасывается исключение SimdJsonException

// имя должно быть заключено в двойные кавычки
$bad_json = '{ bar: "baz" }';
simdjson_decode($bad_json); // Выбрасывается исключение SimdJsonException

// запятые в конце не допускаются
$bad_json = '{ bar: "baz", }';
simdjson_decode($bad_json); // Выбрасывается исключение SimdJsonException

?>
]]>
    </programlisting>
   </example>
   <example>
    <title>Ошибки <parameter>depth</parameter></title>
    <programlisting role="php">
<![CDATA[
<?php
// Кодирование некоторых данных с максимальной глубиной 4
// (array -> array -> array -> string)
$json = json_encode(
    [
        1 => [
            'English' => [
                'One',
                'January'
            ],
            'French' => [
                'Une',
                'Janvier'
            ]
        ]
    ]
);

// Отображение ошибок для разных глубин.
var_dump(simdjson_decode($json, true, 4));
try {
    var_dump(simdjson_decode($json, true, 3));
} catch (SimdJsonException $e) {
     echo "Попался: ", $e->getMessage(), "\n";
}
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
array(1) {
  [1]=>
  array(2) {
    ["English"]=>
    array(2) {
      [0]=>
      string(3) "One"
      [1]=>
      string(7) "January"
    }
    ["French"]=>
    array(2) {
      [0]=>
      string(3) "Une"
      [1]=>
      string(7) "Janvier"
    }
  }
}
Попался: The JSON document was too deep (too many nested objects and arrays)
]]>
    </screen>
   </example>
   <example>
    <title><function>simdjson_decode</function> больших целых чисел</title>
    <programlisting role="php">
<![CDATA[
<?php
$json = '{"number": 12345678901234567890}';

var_dump(simdjson_decode($json));

?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
object(stdClass)#1 (1) {
  ["number"]=>
  float(1.2345678901235E+19)
}
]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  <note>
   <para>
    Спецификация JSON - это не JavaScript, а подмножество JavaScript.
   </para>
  </note>
  <note>
   <para>
    В случае возникновения ошибки декодирования выбрасывается исключение <classname>SimdJsonException</classname>,
    а <methodname>SimdJsonException::getCode</methodname> и <methodname>SimdJsonException::getMessage</methodname>
    могут быть использованы для определения точной природы ошибки.
   </para>
  </note>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>json_encode</function></member>
    <member><function>json_decode</function></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
