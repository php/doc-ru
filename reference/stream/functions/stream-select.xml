<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 4754397753fd79f1c846868b66a2448babab1c54 Maintainer: mch Status: ready -->
<!-- $Revision$ -->
<!-- Reviewed: yes -->
<refentry xml:id="function.stream-select" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>stream_select</refname>
  <refpurpose>Запускает эквивалент системного вызова select() на заданных массивах
   потоков с таймаутом, указанным параметрами tv_sec и tv_usec </refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>int</type><methodname>stream_select</methodname>
   <methodparam><type>array</type><parameter role="reference">read</parameter></methodparam>
   <methodparam><type>array</type><parameter role="reference">write</parameter></methodparam>
   <methodparam><type>array</type><parameter role="reference">except</parameter></methodparam>
   <methodparam><type>int</type><parameter>tv_sec</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>tv_usec</parameter><initializer>0</initializer></methodparam>
  </methodsynopsis>
  <para>
   Функция  <function>stream_select</function> получает массивы потоков и ждёт
   изменения их статуса. Её работа эквивалентна работе функции
   <function>socket_select</function>, за исключением того, что она работает с потоками.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>read</parameter></term>
     <listitem>
      <para>
       Потоки, перечисленные в массиве <parameter>read</parameter> будут отслеживаться на предмет
       появления символов, доступных для чтения (точнее, чтобы убедиться, что чтение
       не будет блокироваться - в частности, потоковый ресурс также готов для чтения в
       конце файла, но в этом случае функция <function>fread</function> будет возвращать
       строку нулевой длины).
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>write</parameter></term>
     <listitem>
      <para>
       Потоки, перечисленные в массиве <parameter>write</parameter>, будут отслеживаться
       на предмет того, что запись в них не будет блокироваться.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>except</parameter></term>
     <listitem>
      <para>
       Потоки, перечисленные в массиве <parameter>except</parameter>, будут отслеживаться на предмет
    поступления высокоприоритетных исключительных (внеполосных или "out-of-band") данных.
      </para>
      <note>
       <para>
        Когда <function>stream_select</function> возвращается, массивы
        <parameter>read</parameter>, <parameter>write</parameter> и
        <parameter>except</parameter> изменяются для того, чтобы указать, какие потоковые
        ресурсы на самом деле изменили статус.
        Исходные ключи массивов (&array;) сохраняются.
       </para>
      </note>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>tv_sec</parameter></term>
     <listitem>
      <para>
       Параметры <parameter>tv_sec</parameter> и <parameter>tv_usec</parameter>
       вместе формируют параметр <emphasis>timeout</emphasis>,
       <parameter>tv_sec</parameter> указывает число секунд, а
       <parameter>tv_usec</parameter> - число микросекунд.
       Параметр  <parameter>timeout</parameter> - это верхняя граница времени,
       которое функция <function>stream_select</function> будет ожидать до возвращения.
       Если параметры <parameter>tv_sec</parameter> и <parameter>tv_usec</parameter>
       оба установлены в <literal>0</literal>, то функция <function>stream_select</function>
       не будет ожидать данных - вместо этого она вернётся немедленно, указывая текущий
       статус потоков.
      </para>
      <para>
       Если параметр <parameter>tv_sec</parameter> равен &null;, то функция <function>stream_select</function>
       может выполняться неопределённое время, возвращаясь только тогда, когда происходит событие на одном из
       отслеживаемых потоков (или если системный вызов прерывается сигналом).
      </para>
      <warning>
       <para>
        Использование значения тайм-аута <literal>0</literal> позволяет вам
        мгновенно опросить статус потоков, однако ПЛОХАЯ
        идея использовать значение тайм-аута <literal>0</literal> в цикле, так как
        это заставит ваш скрипт потреблять слишком много процессорного времени.
       </para>
       <para>
        Гораздо лучше указать значение тайм-аута в несколько секунд, хотя
        если вам нужно проверять и одновременно запускать другой код, использование
        тайм-аута как минимум <literal>200000</literal> микросекунд
        поможет уменьшить использование процессорного времени вашим скриптом.
       </para>
       <para>
        Запомните, что значение тайм-аута - это максимальное время, которое будет затрачено.
        Функция <function>stream_select</function> вернётся как только
        запрошенные потоки будут готовы к использованию.
       </para>
      </warning>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>tv_usec</parameter></term>
     <listitem>
      <para>
       Смотрите описание параметра <parameter>tv_sec</parameter>.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   В случае успеха функция <function>stream_select</function> возвращает количество
   потоковых ресурсов, содержащееся в изменённых массивах, которое может равно нулю, если
   истёк тайм-аут до того, как произошло что-то интересное. В случае ошибки возвращается &false;
   и возникает предупреждение (это может случится, если системный вызов
   прерывается входящим сигналом).
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Пример использования <function>stream_select</function></title>
    <para>
     Этот пример проверяет, что получены данные для чтения на потоках
     <parameter>$stream1</parameter> или <parameter>$stream2</parameter>.
     Так как значение тайм-аута равно <literal>0</literal>, функция возвратится
     немедленно:
    </para>
    <programlisting role="php">
<![CDATA[
<?php
/* Подготовить массив для чтения */
$read   = array($stream1, $stream2);
$write  = NULL;
$except = NULL;
if (false === ($num_changed_streams = stream_select($read, $write, $except, 0))) {
    /* Обработка ошибок */
} elseif ($num_changed_streams > 0) {
    /* Как минимум на одном из потоков произошло что-то интересное */
}
?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  <note>
   <para>
    По причине ограничения в текущем  Zend Engine невозможно передать
    постоянную &null; непосредственно как параметр в функцию,
    которая ожидает, что этот параметр будет передан по ссылке. Вместо этого используйте
    временную переменную или выражение, в котором крайний левый член будет
    временной переменной:
    <programlisting role="php">
<![CDATA[
<?php
$e = NULL;
stream_select($r, $w, $e, 0);
?>
]]>
   </programlisting>
   </para>
  </note>
  <note>
   <para>
   Убедитесь, что используете оператор <literal>===</literal> при проверке на
   ошибку. Так как функция <function>stream_select</function> может возвращать 0,
   сравнение с  использованием <literal>==</literal> может возвращать &true;:
   <programlisting role="php">
<![CDATA[
<?php
$e = NULL;
if (false === stream_select($r, $w, $e, 0)) {
    echo "Произошла ошибка при вызове stream_select()\n";
}
?>
]]>
   </programlisting>
   </para>
  </note>
  <note>
   <para>
    Если вы читаете/пишете в поток, возвращаемый в массивах, знайте, что
    они не обязательно читают/пишут полное количество данных, которое вы
    запросили. Будьте готовы к тому, чтобы иметь возможность читать/писать
    даже по одному байту.
   </para>
  </note>
  <note>
   <para>
    Некоторые потоки (например, <literal>zlib</literal>) не могут быть выбраны этой
    функцией.
   </para>
  </note>
  <note>
   <title>Совместимость с Windows</title>
   <para>
    Использование функции <function>stream_select</function> на
    файловых дескрипторах, возвращённых функцией <function>proc_open</function> не удастся
    и возвратит &false; под Windows.
   </para>
   <para>
    <constant>STDIN</constant> из консоли меняет статус, как только становятся доступны <emphasis>какие-либо</emphasis>
    входные события, но чтение из потока всё ещё может блокироваться.
   </para>
  </note>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <simplelist>
   <member><function>stream_set_blocking</function></member>
  </simplelist>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
