<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: e41806c30bf6975e452c0d4ce35ab0984c2fa68c Maintainer: mch Status: ready -->
<!-- Reviewed: yes -->
<refentry xml:id="function.stream-filter-append" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>stream_filter_append</refname>
  <refpurpose>Прикрепить фильтр к потоку</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>resource</type><methodname>stream_filter_append</methodname>
   <methodparam><type>resource</type><parameter>stream</parameter></methodparam>
   <methodparam><type>string</type><parameter>filtername</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>read_write</parameter></methodparam>
   <methodparam choice="opt"><type>mixed</type><parameter>params</parameter></methodparam>
  </methodsynopsis>
  <para>
   Добавляет <parameter>filtername</parameter> в список фильтров,
   прикреплённых к <parameter>stream</parameter>.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>stream</parameter></term>
     <listitem>
      <para>
       Целевой поток.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>filtername</parameter></term>
     <listitem>
      <para>
       Название фильтра.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>read_write</parameter></term>
     <listitem>
      <para>
       По умолчанию <function>stream_filter_append</function> будет
       прикреплять фильтр к <literal>цепочке фильтров чтения</literal>,
       если файл был открыт для чтения (т. е. режим файла:
       <literal>r</literal>, и/или <literal>+</literal>). Фильтр
       также будет прикреплён к <literal>цепочке фильтров записи</literal>,
       если файл был открыт для записи (т. е. режим файла:
       <literal>w</literal>, <literal>a</literal>, и/или <literal>+</literal>).
       Константы <constant>STREAM_FILTER_READ</constant>,
       <constant>STREAM_FILTER_WRITE</constant> и/или
       <constant>STREAM_FILTER_ALL</constant> также могут быть переданы в параметре
       <parameter>read_write</parameter>, чтобы переопределить это поведение.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>params</parameter></term>
     <listitem>
      <para>
       Этот фильтр будет добавлен с указанными
       <parameter>params</parameter> к <emphasis>концу</emphasis> списка
       и, таким образом, будет вызван последним в списке потоковых операций.
       Чтобы добавить фильтр в начало списка, используйте
       <function>stream_filter_prepend</function>.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Возвращает ресурс в случае успешного выполнения или &false; при неудаче. Ресурс должен быть
   использован для ссылки на этот экземпляр фильтра во время вызова
   <function>stream_filter_remove</function>.
  </para>

  <para>
   Вернёт &false;, если <parameter>stream</parameter> не является ресурсом или если
   <parameter>filtername</parameter> не найден.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Контроль применения фильтров</title>
    <programlisting role="php">
<![CDATA[
<?php
/* Открываем тестовый файл для чтения и записи */
$fp = fopen('test.txt', 'w+');

/* Прикрепляем фильтр ROT13 к
 * цепочке фильтров записи, но не к
 * цепочке фильтров чтения */
stream_filter_append($fp, "string.rot13", STREAM_FILTER_WRITE);

/* Запишем простую строку в файл
 * она будет преобразована при помощи ROT13
 * на выходе */
fwrite($fp, "This is a test\n");

/* Назад к началу файла */
rewind($fp);

/* Прочитаем содержимое файла.
 * Если фильтр также был бы прикреплён к
 * цепочке фильтров чтения, мы бы увидели
 * преобразованный при помощи ROT13 текст в исходном состоянии */
fpassthru($fp);

fclose($fp);

/* Ожидаемый вывод
   ---------------

Guvf vf n grfg

 */
?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  <note>
   <title>При использовании пользовательских фильтров</title>
   <simpara>
    Сначала должна быть вызвана функция <function>stream_filter_register</function>
    для того, чтобы зарегистрировать желаемый пользовательский фильтр на имя <parameter>filtername</parameter>.
   </simpara>
  </note>
  <note>
   <simpara>
    Потоковые данные читаются из ресурсов (как локальных, так удалённых) по кускам,
    и любые невостребованные данные сохраняются во внутренних буферах. Когда новый фильтр
    добавляется в конец потока, то данные во внутренних буферах обрабатываются
    через новый фильтр. Это отличается от поведения функции
    <function>stream_filter_prepend</function>.
   </simpara>
  </note>
  <note>
   <simpara>
    Когда фильтр добавляется для чтения и записи, создаются два экземпляра
    фильтра. Функция <function>stream_filter_append</function> должна быть вызвана дважды
    с <constant>STREAM_FILTER_READ</constant> и
    <constant>STREAM_FILTER_WRITE</constant> чтобы получить оба ресурса фильтра.
   </simpara>
  </note>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <simplelist>
   <member><function>stream_filter_register</function></member>
   <member><function>stream_filter_prepend</function></member>
   <member><function>stream_get_filters</function></member>
  </simplelist>
 </refsect1>
</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
