<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 8ad9c12d9bf30c0a0c06f150643c0669d02c3125 Maintainer: rjhdby Status: ready -->
<!-- Reviewed: yes Maintainer: lex -->
<refentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="function.hash-pbkdf2">
 <refnamediv>
  <refname>hash_pbkdf2</refname>
  <refpurpose>Формирования ключа PBKDF2 для заданных входных данных</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>string</type><methodname>hash_pbkdf2</methodname>
   <methodparam><type>string</type><parameter>algo</parameter></methodparam>
   <methodparam><type>string</type><parameter>password</parameter></methodparam>
   <methodparam><type>string</type><parameter>salt</parameter></methodparam>
   <methodparam><type>int</type><parameter>iterations</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>length</parameter><initializer>0</initializer></methodparam>
   <methodparam choice="opt"><type>bool</type><parameter>binary</parameter><initializer>&false;</initializer></methodparam>
  </methodsynopsis>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>algo</parameter></term>
     <listitem>
      <para>
       Имя выбранного хеширующего алгоритма (например,
       <literal>md5</literal>, <literal>sha256</literal>,
       <literal>haval160,4</literal> и т.д.)
       Список поддерживаемых алгоритмов можно посмотреть в описании функции
       <function>hash_algos</function>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>password</parameter></term>
     <listitem>
      <para>
       Пароль, используемый для формирования.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>salt</parameter></term>
     <listitem>
      <para>
       Соль, используемая при формировании ключа. Значение необходимо генерировать случайным образом.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>iterations</parameter></term>
     <listitem>
      <para>
       Количество итераций для формирования ключа.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>length</parameter></term>
     <listitem>
      <para>
       Длина генерируемой строки. Если параметр
       <parameter>binary</parameter> задан как &true;, то этот
       параметр равен количеству байт в генерируемом ключе. Если
       <parameter>binary</parameter> установлен как &false;,
       то длина ключа в байтах будет в два раза меньше, так как каждый
       байт ключа будет возвращён в виде двух символов
       шестнадцатеричной системы (0-F).
      </para>
      <para>
       Если задано как <literal>0</literal>, то используется весь вывод
       заданного алгоритма.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>binary</parameter></term>
     <listitem>
      <para>
       Если установлено &true;, то вывод будет представлять из себя
       необработанные бинарные данные, а если &false;, то вывод будет
       представлен в виде строки шестнадцатеричных цифр в нижнем регистре.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues"><!-- {{{ -->
  &reftitle.returnvalues;
  <para>
   Возвращаемая строка содержит сформированный ключ в виде
   строки шестнадцатеричных чисел в нижнем регистре. Но если
   параметр <parameter>binary</parameter> установлен как &true;,
   то будут возвращены сырые бинарные данные.
  </para>
 </refsect1><!-- }}} -->

 <refsect1 role="errors"><!-- {{{ -->
  &reftitle.errors;
  <para>
   Ошибка уровня <constant>E_WARNING</constant> будет вызвана если
   заданный алгоритм некорректен, параметр
   <parameter>iterations</parameter> меньше или равен
   <literal>0</literal>, параметр <parameter>length</parameter>
   меньше чем <literal>0</literal> или если <parameter>salt</parameter>
   очень длинный
   (больше чем <constant>INT_MAX</constant><literal> - 4</literal>).
  </para>
 </refsect1><!-- }}} -->

 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>7.2.0</entry>
       <entry>Запрещено использование некриптографических функций
        (adler32, crc32, crc32b, fnv132, fnv1a32, fnv164, fnv1a64, joaat).</entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Пример простого использования <function>hash_pbkdf2</function></title>
    <programlisting role="php">
<![CDATA[
<?php
$password = "password";
$iterations = 1000;

// Создаём случайный инициализирующий вектор
// с помощью openssl_random_pseudo_bytes() или другого источника случайных данных
$salt = openssl_random_pseudo_bytes(16);

$hash = hash_pbkdf2("sha256", $password, $salt, $iterations, 20);
var_dump($hash);

// для необработанного двоичного файла параметр $length должен быть уменьшен вдвое для получения аналогичных результатов
$hash = hash_pbkdf2("sha256", $password, $salt, $iterations, 10, true);
var_dump(bin2hex($hash));?>
]]>
    </programlisting>
    &example.outputs.similar;
    <screen>
<![CDATA[
string(20) "120fb6cffcf8b32c43e7"
string(20) "120fb6cffcf8b32c43e7"
]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  <caution>
   <para>
    Метод PBKDF2 может быть использован для хеширования паролей в
    целях их хранения. Однако стоит помнить, что для этих целей гораздо
    лучше использовать <function>password_hash</function> или
    <function>crypt</function> с <constant>CRYPT_BLOWFISH</constant>.
   </para>
  </caution>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>crypt</function></member>
    <member><function>password_hash</function></member>
    <member><function>hash</function></member>
    <member><function>hash_algos</function></member>
    <member><function>hash_init</function></member>
    <member><function>hash_hmac</function></member>
    <member><function>hash_hmac_file</function></member>
    <member><function>openssl_pbkdf2</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
