<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: e41806c30bf6975e452c0d4ce35ab0984c2fa68c Maintainer: rjhdby Status: ready -->
<!-- Reviewed: no -->

<refentry xml:id="function.hash-hkdf" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>hash_hkdf</refname>
  <refpurpose>Формирования ключа HKDF для заданных входных данных</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>string</type><methodname>hash_hkdf</methodname>
   <methodparam><type>string</type><parameter>algo</parameter></methodparam>
   <methodparam><type>string</type><parameter>key</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>length</parameter><initializer>0</initializer></methodparam>
   <methodparam choice="opt"><type>string</type><parameter>info</parameter><initializer>""</initializer></methodparam>
   <methodparam choice="opt"><type>string</type><parameter>salt</parameter><initializer>""</initializer></methodparam>
  </methodsynopsis>

 </refsect1>
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>algo</parameter></term>
     <listitem>
      <para>
       Имя выбранного хеширующего алгоритма (например, "sha256", "sha512", "haval160,4" и т.д.)
       Список поддерживаемых алгоритмов можно посмотреть в описании функции
       <function>hash_algos</function>.
       <note>
        <para>
         Не криптографические хеширующие функции не допускаются.
        </para>
       </note>
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>key</parameter></term>
     <listitem>
      <para>
       Входные данные (необработанные бинарные данные). Не может быть пустым.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>length</parameter></term>
     <listitem>
      <para>
       Выбранная длина вывода в байтах.
       Не может быть более чем в 255 раз больше размера выбранной хеширующей функции.
      </para>
      <para>
       Если <parameter>length</parameter> установлено как <literal>0</literal>, то вывод
       по длине будет равен размеру выбранной хеширующей функции.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>info</parameter></term>
     <listitem>
      <para>
       Информационная строка, специфичная для приложения/контекста.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>salt</parameter></term>
     <listitem>
      <para>
       Соль, используемая при формировании ключа.
      </para>
      <para>
       Хотя и необязательно, но добавление случайной соли значительно улучшает силу HKDF.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Возвращает строку, содержащую необработанные бинарные данные, представляющие
   сформированный ключ или &false; в случае неудачи.
  </para>
 </refsect1>

 <refsect1 role="errors">
  &reftitle.errors;
  <para>
   Ошибка уровня <constant>E_WARNING</constant> будет сгенерирована в случае,
   если параметр <parameter>key</parameter> пуст, в параметре
   <parameter>algo</parameter> указан неизвестный либо не криптографический
   алгоритм, параметр <parameter>length</parameter> меньше <literal>0</literal> или
   очень большой (более чем в 255 раз больше размера хеш-функции).
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Пример использования <function>hash_hkdf</function></title>
    <programlisting role="php">
<![CDATA[
<?php
// Генерируем случайный ключ и соль для усиления процесса формирования.
$inputKey = random_bytes(32);
$salt = random_bytes(16);

// Формируем пару разных ключей, используя одни и те же входные данные.
$encryptionKey = hash_hkdf('sha256', $inputKey, 32, 'aes-256-encryption', $salt);
$authenticationKey = hash_hkdf('sha256', $inputKey, 32, 'sha-256-authentication', $salt);

var_dump($encryptionKey !== $authenticationKey); // bool(true)
?>
]]>
    </programlisting>
    <para>
     В примере выше создана пара разных ключей, подходящих для создания
     конструкции encrypt-then-HMAC, используя AES-256 и SHA-256 для кодирования и
     аутентификации соответственно.
    </para>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>hash_pbkdf2</function></member>
    <member><link xlink:href="&url.rfc;5869">RFC 5869</link></member>
    <member><link xlink:href="&url.git.hub;narfbg/hash_hkdf_compat">пользовательская реализация</link></member>
   </simplelist>
  </para>
 </refsect1>

</refentry><!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
