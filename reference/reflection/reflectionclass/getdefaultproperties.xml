<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 4754397753fd79f1c846868b66a2448babab1c54 Maintainer: aur Status: ready -->
<!-- Reviewed: yes -->
<!-- $Revision$ -->
<refentry xml:id="reflectionclass.getdefaultproperties" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>ReflectionClass::getDefaultProperties</refname>
  <refpurpose>Возвращает свойства по умолчанию</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <modifier>public</modifier> <type>array</type><methodname>ReflectionClass::getDefaultProperties</methodname>
   <void/>
  </methodsynopsis>
  <para>
   Возвращает свойства класса по умолчанию (включая унаследованные свойства).
  </para>
  <note>
   <para>
    Этот метод работает только для статических свойств при использовании с внутренними классами.
    Значение по умолчанию статического свойства нельзя отслеживать в классах, определённых пользователем.
   </para>
  </note>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  &no.function.parameters;
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Ассоциативный массив (<type>array</type>) свойств по умолчанию, ключами которого являются
   имена свойств, а значениями - соответствующие значения по умолчанию или же &null;,
   если этому свойству не было задано значение по умолчанию. Функция
   не различает статические и нестатические свойства, а также не предоставляет
   информацию о модификаторах видимости при выводе.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Пример использования <methodname>ReflectionClass::getDefaultProperties</methodname></title>
    <programlisting role="php">
<![CDATA[
<?php
class Bar {
    protected $inheritedProperty = 'унаследованное свойство по умолчанию';
}

class Foo extends Bar {
    public $property = 'свойство по умолчанию';
    private $privateProperty = 'закрытое свойство по умолчанию';
    public static $staticProperty = 'статическое свойство';
    public $defaultlessProperty;
}

$reflectionClass = new ReflectionClass('Foo');
var_dump($reflectionClass->getDefaultProperties());
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
array(5) {
  ["staticProperty"]=>
  string(39) "статическое свойство"
  ["property"]=>
  string(40) "свойство по умолчанию"
  ["privateProperty"]=>
  string(57) "закрытое свойство по умолчанию"
  ["defaultlessProperty"]=>
  NULL
  ["inheritedProperty"]=>
  string(69) "унаследованное свойство по умолчанию"
}
]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><methodname>ReflectionClass::getProperties</methodname></member>
    <member><methodname>ReflectionClass::getStaticProperties</methodname></member>
    <member><methodname>ReflectionClass::getProperty</methodname></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
