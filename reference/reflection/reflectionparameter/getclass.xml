<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 9b1673cf114a1e10c4563ab9223cb56aed552b89 Maintainer: tmn Status: ready -->
<!-- Reviewed: no -->
<refentry xml:id="reflectionparameter.getclass" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>ReflectionParameter::getClass</refname>
  <refpurpose>Получает объект <classname>ReflectionClass</classname> для отражаемого параметра или &null;</refpurpose>
 </refnamediv>

 <refsynopsisdiv>
   &warn.deprecated.function-8-0-0;
 </refsynopsisdiv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis role="ReflectionParameter">
   <modifier role="attribute">#[\Deprecated]</modifier>
   <modifier>public</modifier> <type class="union"><type>ReflectionClass</type><type>null</type></type><methodname>ReflectionParameter::getClass</methodname>
   <void/>
  </methodsynopsis>
  <para>
   Метод получает объект <classname>ReflectionClass</classname> для отражаемого параметра или &null;.
  </para>
  <para>
   Начиная с PHP 8.0.0 метод устарел и им не рекомендуют пользоваться.
   Вместо него лучше вызывать метод <methodname>ReflectionParameter::getType</methodname>,
   чтобы получить экземпляр отражения параметра — <classname>ReflectionType</classname>,
   а затем опросить этот объект, чтобы определить тип параметра.
  </para>

  &warn.undocumented.func;

 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  &no.function.parameters;
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Метод возвращает объект класса <classname>ReflectionClass</classname> или &null;,
   если тип не объявили или если объявленный тип не принадлежит классу или интерфейсу.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Пример получения объекта <classname>ReflectionParameter</classname> для отражаемого параметра</title>
    <programlisting role="php">
<![CDATA[
<?php

function foo(Exception $a) {}

$functionReflection = new ReflectionFunction('foo');
$parameters = $functionReflection->getParameters();
$aParameter = $parameters[0];

echo $aParameter->getClass()->name;

?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <informaltable>
   <tgroup cols="2">
    <thead>
     <row>
      <entry>&Version;</entry>
      <entry>&Description;</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry>8.0.0</entry>
      <entry>
       Метод устарел в пользу метода
       <methodname>ReflectionParameter::getType</methodname>.
      </entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><methodname>ReflectionParameter::getDeclaringClass</methodname></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
