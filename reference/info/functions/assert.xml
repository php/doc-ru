<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: dd522120279a5d08a8aeeaabfaafdea235991d72 Maintainer: rjhdby Status: ready -->
<!-- Reviewed: yes Maintainer: lex -->
<!-- $Revision$ -->
<refentry xml:id="function.assert" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>assert</refname>
  <refpurpose>Проверяет, является ли утверждение &false;</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <para>PHP 5 и 7</para>
  <methodsynopsis>
   <type>bool</type><methodname>assert</methodname>
   <methodparam><type>mixed</type><parameter>assertion</parameter></methodparam>
   <methodparam choice="opt"><type>string</type><parameter>description</parameter></methodparam>
  </methodsynopsis>
  <para>PHP 7</para>
  <methodsynopsis>
   <type>bool</type><methodname>assert</methodname>
   <methodparam><type>mixed</type><parameter>assertion</parameter></methodparam>
   <methodparam choice="opt"><type>Throwable</type><parameter>exception</parameter></methodparam>
  </methodsynopsis>
  <para>
   <function>assert</function> проверит заданное утверждение
   <parameter>assertion</parameter> и совершит соответствующее действие, если
   результатом проверки окажется &false;.
  </para>
  <refsect2>
   <title>Традиционная работа функции assert (PHP 5 и 7)</title>
   <para>
    Если <parameter>assertion</parameter> задаётся в виде строки, оно будет
    рассматриваться функцией <function>assert</function> как PHP-код.
    Если вы передадите в качестве параметра <parameter>assertion</parameter>
    логическое выражение, то это выражение не будет отображаться как параметр для
    функции утверждения, заданной с помощью <function>assert_options</function>.
    Это выражение будет преобразовано в строку перед вызовом функции обработчика, а
    в случае &false; будет использована пустая строка.
   </para>
   <para>
    Утверждения должны использоваться только в целях отладки. Их можно использовать
    для тестирования каких-то условий, которые в штатных ситуациях всегда принимают
    значение &true;, обратное должно указывать на программные ошибки. Также их можно
    использовать, чтобы удостовериться в наличии каких-либо модулей или системных
    ограничений.
   </para>
   <para>
    Утверждения не должны использоваться в обычных операциях, таких как проверка
    входных параметров. Как правило, скрипт должен корректно выполняться, если отключить проверку
    утверждений.
   </para>
   <para>
    Поведение функции <function>assert</function> можно изменять с помощью функции
    <function>assert_options</function> или установкой .ini-настроек.
   </para>
   <para>
    Функция <function>assert_options</function> и/или директива
    <constant>ASSERT_CALLBACK</constant> позволяют задать callback-функцию,
    которая будет вызываться при провале проверки утверждения.
   </para>
   <para>
    Возможность вызывать callback-функции из <function>assert</function> может
    быть полезна для создания автоматизированных тестовых пакетов. Посредством этих
    функций можно извлекать код, переданный на проверку вместе с информацией о том,
    где эта проверка была осуществлена. Подобную информацию можно получить и другими
    методами, однако использование утверждений быстрей и проще.
   </para>
   <para>
    Callback-функция должна принимать три аргумента. Первый аргумент должен содержать
    файл, в котором утверждение не прошло проверку. Второй аргумент отвечает за
    номер строки в этом файле. В третьем аргументе будет передаваться выражение,
    содержащее ошибку (если таких несколько, строковые значение, вроде 1 или "два"
    не будут передаваться через этот аргумент). Пользователи PHP версий 5.4.8 и
    выше могут задать четвёртый необязательный аргумент
    <parameter>description</parameter>, который будет также передан в функцию
    <function>assert</function>.
   </para>
  </refsect2>
  <refsect2 xml:id="function.assert.expectations">
   <title>Ожидания (только PHP 7)</title>
   <para>
    В PHP 7 <function>assert</function> - это языковая конструкция, позволяющая
    определять ожидания: утверждения, которые работают в среде разработки и тестирования,
    но в целях оптимизации отключены на продуктовом окружении.
   </para>
   <para>
    В то время как функция <function>assert_options</function> может по-прежнему
    быть использована для контроля над поведением программы описанным выше образом,
    для обратной совместимости, но в PHP 7 код должен использовать две новые
    конфигурационные директивы для управления поведением <function>assert</function> и
    не вызывать функцию <function>assert_options</function>.
   </para>
   <table>
    <title>
     Конфигурационные директивы PHP 7 для функции <function>assert</function>
    </title>
    <tgroup cols="3">
     <thead>
      <row>
       <entry>Директива</entry>
       <entry>Значение по умолчанию</entry>
       <entry>Возможные значения</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>
        <link linkend="ini.zend.assertions">zend.assertions</link>
       </entry>
       <entry><literal>1</literal></entry>
       <entry>
        <simplelist>
         <member>
          <literal>1</literal>: генерирует и выполняет код (режим разработки)
         </member>
         <member>
          <!-- TODO: look up the RFC to figure out why you'd want this -->
          <literal>0</literal>: генерирует код, но перепрыгивает через него во время выполнения
         </member>
         <member>
          <literal>-1</literal>: не генерирует код (рабочий режим)
         </member>
        </simplelist>
       </entry>
      </row>
      <row>
       <entry>
        <link linkend="ini.assert.exception">assert.exception</link>
       </entry>
       <entry><literal>0</literal></entry>
       <entry>
        <simplelist>
         <member>
          <literal>1</literal>: выбрасывает исключение, когда утверждение терпит неудачу,
          класса, предоставленного в параметре <parameter>exception</parameter>, либо
          класса <classname>AssertionError</classname>, если параметр <parameter>exception</parameter> не передан.
         </member>
         <member>
          <literal>0</literal>: использует или создаёт экземпляр класса
          <classname>Throwable</classname> как описано выше, но только генерирует
          предупреждение на основе этого объекта, не выбрасывая его
          (для совместимости с поведением PHP 5)
         </member>
        </simplelist>
       </entry>
      </row>
     </tbody>
    </tgroup>
   </table>
  </refsect2>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>assertion</parameter></term>
     <listitem>
      <para>
       Утверждение. В PHP 5 может быть строкой (<type>string</type>) для
       выполнения или логическим значением (<type>bool</type>) для проверки. В PHP 7 это также может быть
       любое выражение, которое возвращает значение, которое будет выполнено, и
       результат использован для определения успешности проверки.
      </para>
      <warning>
       <para>
        Использование значения типа <type>string</type> в параметре
        <parameter>assertion</parameter> объявлено
        <emphasis>УСТАРЕВШИМ</emphasis> с PHP 7.2.
       </para>
      </warning>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>description</parameter></term>
     <listitem>
      <para>
       Необязательное описание, которое будет добавлено в сообщение, если
       проверка утверждения <parameter>assertion</parameter> будет провалена. В PHP 7 используется описание по умолчанию (если оно не было передано), где будет указан сам вызов <function>assert</function>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>exception</parameter></term>
     <listitem>
      <para>
       В PHP 7 второй параметр может быть объектом <classname>Throwable</classname> вместо
       строки (<type>string</type>). Этот объект будет выбрасываться в случае неудачной проверки утверждения при
       включённой конфигурационной директиве <link linkend="ini.assert.exception">assert.exception</link>.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &false;, если проверка провалена, &true; в противном случае.
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>8.0.0</entry>
       <entry>
        Объявление функции с именем <literal>assert()</literal>
        внутри пространства имён теперь запрещено и вызывает <constant>E_COMPILE_ERROR</constant>.
       </entry>
      </row>
      <row>
       <entry>7.3.0</entry>
       <entry>
        Объявление функции с именем <literal>assert()</literal>
        внутри пространства имён объявлено устаревшим.
        Такое объявление теперь выдаёт ошибку уровня <constant>E_DEPRECATED</constant>.
       </entry>
      </row>
      <row>
       <entry>7.2.0</entry>
       <entry>
        Использование строк в параметре <parameter>assertion</parameter>
        объявлено устаревшим и будет приводить к ошибкам уровня
        <constant>E_DEPRECATED</constant> в случае, когда и
        <link linkend="ini.assert.active">assert.active</link>
        и <link linkend="ini.zend.assertions">zend.assertions</link> установлены в значение
        <literal>1</literal>.
       </entry>
      </row>
      <row>
       <entry>7.0.0</entry>
       <entry>
        <function>assert</function> теперь языковая конструкция, а не
        функция. <parameter>assertion</parameter> теперь может быть выражением.
        Второй параметр теперь интерпретируется как исключение <parameter>exception</parameter> (если
        передан объект <classname>Throwable</classname>), или как описание <parameter>description</parameter>,
        поддерживаемое с версии PHP 5.4.8 и далее.
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <refsect2>
   <title>Традиционная работа функции assert (PHP 5 и 7)</title>
   <para>
    <example>
     <title>Обработка неудачных проверок утверждений с использованием собственного обработчика</title>
     <programlisting role="php">
<![CDATA[
<?php
// Активация утверждений и отключение вывода ошибок
assert_options(ASSERT_ACTIVE, 1);
assert_options(ASSERT_WARNING, 0);
assert_options(ASSERT_QUIET_EVAL, 1);

// Создание обработчика
function my_assert_handler($file, $line, $code)
{
    echo "<hr>Неудачная проверка утверждения:
        Файл '$file'<br />
        Строка '$line'<br />
        Код '$code'<br /><hr />";
}

// Подключение callback-функции
assert_options(ASSERT_CALLBACK, 'my_assert_handler');

// Выполнение проверки утверждения, которое завершится неудачей
assert('mysql_query("")');
?>
]]>
     </programlisting>
    </example>
   </para>
   <para>
    <example>
     <title>Использование собственного обработчика с выводом описания</title>
     <programlisting role="php">
<![CDATA[
<?php
// Активация утверждений и отключение вывода ошибок
assert_options(ASSERT_ACTIVE, 1);
assert_options(ASSERT_WARNING, 0);
assert_options(ASSERT_QUIET_EVAL, 1);

// Создание обработчика
function my_assert_handler($file, $line, $code, $desc = null)
{
    echo "Неудачная проверка утверждения в $file:$line: $code";
    if ($desc) {
        echo ": $desc";
    }
    echo "\n";
}

// Подключение callback-функции
assert_options(ASSERT_CALLBACK, 'my_assert_handler');

// Выполнение проверки утверждения, которое завершится неудачей
assert('2 < 1');
assert('2 < 1', 'Два больше чем один');
?>
]]>
     </programlisting>
     &example.outputs;
     <screen>
<![CDATA[
 Неудачная проверка утверждения в test.php:21: 2 < 1
 Неудачная проверка утверждения в test.php:22: 2 < 1: Два больше чем один
 ]]>
     </screen>
    </example>
   </para>
  </refsect2>
  <refsect2>
   <title>Ожидания (только PHP 7)</title>
   <example>
    <title>Ожидания без собственного исключения</title>
    <programlisting role="php">
<![CDATA[
<?php
assert(true == false);
echo 'Привет!';
?>
]]>
    </programlisting>
    <para>
     При директиве <link linkend="ini.zend.assertions">zend.assertions</link>, установленной в 0,
     данный код выведет:
    </para>
    <screen>
<![CDATA[
Привет!
]]>
    </screen>
    <para>
     При директивах <link linkend="ini.zend.assertions">zend.assertions</link>, установленной в 1
     и <link linkend="ini.assert.exception">assert.exception</link>, установленной в 0,
     данный пример выведет:
    </para>
    <screen>
<![CDATA[
Warning: assert(): assert(true == false) failed in - on line 2
Привет!
]]>
    </screen>
    <para>
     При директивах <link linkend="ini.zend.assertions">zend.assertions</link>, установленной в 1
     и <link linkend="ini.assert.exception">assert.exception</link>, установленной в 1,
     данный код выведет:
    </para>
    <screen>
<![CDATA[
Fatal error: Uncaught AssertionError: assert(true == false) in -:2
Stack trace:
#0 -(2): assert(false, 'assert(true == ...')
#1 {main}
  thrown in - on line 2
]]>
    </screen>
   </example>
   <example>
    <title>Ожидания с собственным исключением</title>
    <programlisting role="php">
<![CDATA[
<?php
class CustomError extends AssertionError {}

assert(true == false, new CustomError('True не является false!'));
echo 'Привет!';
?>
]]>
    </programlisting>
    <para>
     При директиве <link linkend="ini.zend.assertions">zend.assertions</link>, установленной в 0,
     данный код выведет:
    </para>
    <screen>
<![CDATA[
Привет!
]]>
    </screen>
    <para>
     При директивах <link linkend="ini.zend.assertions">zend.assertions</link>, установленной в 1
     и <link linkend="ini.assert.exception">assert.exception</link>, установленной в 0,
     данный код выведет:
    </para>
    <screen>
<![CDATA[
Warning: assert(): CustomError: True не является false! in -:4
Stack trace:
#0 {main} failed in - on line 4
Привет!
]]>
    </screen>
    <para>
     При директивах <link linkend="ini.zend.assertions">zend.assertions</link>, установленной в 1
     и <link linkend="ini.assert.exception">assert.exception</link>, установленной в 1,
     данный код выведет:
    </para>
    <screen>
<![CDATA[
Fatal error: Uncaught CustomError: True не является false! in -:4
Stack trace:
#0 {main}
  thrown in - on line 4
]]>
    </screen>
   </example>
  </refsect2>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>assert_options</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
 Local variables:
 mode: sgml
 sgml-omittag:t
 sgml-shorttag:t
 sgml-minimize-attributes:nil
 sgml-always-quote-attributes:t
 sgml-indent-step:1
 sgml-indent-data:t
 indent-tabs-mode:nil
 sgml-parent-document:nil
 sgml-default-dtd-file:"~/.phpdoc/manual.ced"
 sgml-exposed-tags:nil
 sgml-local-catalogs:nil
 sgml-local-ecat-files:nil
 End:
 vim600: syn=xml fen fdm=syntax fdl=2 si
 vim: et tw=78 syn=sgml
 vi: ts=1 sw=1
 -->
