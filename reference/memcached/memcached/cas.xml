<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 68f42e51a3e451f7267b164d76654c8c59445f0f Maintainer: shein Status: ready -->
<!-- Reviewed: no -->

<refentry xml:id="memcached.cas" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>Memcached::cas</refname>
  <refpurpose>Сравнивает и устанавливает значение для записи</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <modifier>public</modifier> <type>bool</type><methodname>Memcached::cas</methodname>
   <methodparam><type>float</type><parameter>cas_token</parameter></methodparam>
   <methodparam><type>string</type><parameter>key</parameter></methodparam>
   <methodparam><type>mixed</type><parameter>value</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>expiration</parameter></methodparam>
  </methodsynopsis>
  <para>
   <function>Memcached::cas</function> осуществляет проверку и установку значения записи,
   новое значение будет сохранено, только если другие клиенты не обновили его
   со времени последнего обращения этим клиентом. Эта проверка осуществляется с помощью
   параметра <parameter>cas_token</parameter>, который представляет собой 64-битное значение
   присвоенное существующей записи сервером memcache. Обратитесь к документации метода
   <methodname>Memcached::get*</methodname>, который используется для получения этого токена.
   Обратите внимание, что токен представлен в виде числа двойной точности из-за ограничений
   диапазона значений целочисленного типа в PHP.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>cas_token</parameter></term>
     <listitem>
      <para>
       Уникальное значение, связанное с существующей записью. Генерируется сервером memcache.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>key</parameter></term>
     <listitem>
      <para>
       &memcached.parameter.key;
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>value</parameter></term>
     <listitem>
      <para>
       &memcached.parameter.value;
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>expiration</parameter></term>
     <listitem>
      <para>
       &memcached.parameter.expiration;
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.success;
   Метод <methodname>Memcached::getResultCode</methodname> возвращает
   <constant>Memcached::RES_DATA_EXISTS</constant> если запись которую вы пытаетесь сохранить
   была изменена с момента последнего обращения.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Пример использования <function>Memcached::cas</function></title>
    <programlisting role="php">
<![CDATA[
<?php
$m = new Memcached();
$m->addServer('localhost', 11211);

do {
    /* fetch IP list and its token */
    $ips = $m->get('ip_block', null, $cas);
    /* if list doesn't exist yet, create it and do
       an atomic add which will fail if someone else already added it */
    if ($m->getResultCode() == Memcached::RES_NOTFOUND) {
        $ips = array($_SERVER['REMOTE_ADDR']);
        $m->add('ip_block', $ips);
    /* otherwise, add IP to the list and store via compare-and-swap
       with the token, which will fail if someone else updated the list */
    } else {
        $ips[] = $_SERVER['REMOTE_ADDR'];
        $m->cas($cas, 'ip_block', $ips);
    }
} while ($m->getResultCode() != Memcached::RES_SUCCESS);

?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><methodname>Memcached::casByKey</methodname></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
