<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: f9c4a68ef4f89e51e6d9b905ad3ddb6492386dd3 Maintainer: rjhdby Status: ready -->
<!-- Reviewed: no -->

<appendix xml:id="memcached.constants" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 &reftitle.constants;
 &extension.constants;
 <variablelist>

  <varlistentry xml:id="memcached.constants.opt-compression">
   <term><constant>Memcached::OPT_COMPRESSION</constant></term>
   <listitem>
    <para>Разрешает или запрещает сжатие данных. Если разрешено, то записи длиннее
     определённого порога (обычно 100 байт) будут прозрачно сжиматься при сохранении и
     разжиматься при извлечении.</para>
    <para>Тип: <literal>boolean</literal>, по умолчанию: &true;.</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.opt-serializer">
   <term><constant>Memcached::OPT_SERIALIZER</constant></term>
   <listitem>
    <para>
     Задаёт сериализатор для сериализации не скалярных значений.
     Корректными значениями являются <constant>Memcached::SERIALIZER_PHP</constant>
     и <constant>Memcached::SERIALIZER_IGBINARY</constant>. Последний допустим, только
     если memcached собран с опцией
     <literal>--enable-memcached-igbinary</literal> и загружен модуль
     <literal>igbinary</literal>.
    </para>
    <para>Тип: <literal>integer</literal>, по умолчанию: <constant>Memcached::SERIALIZER_PHP</constant>.</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.serializer-php">
   <term><constant>Memcached::SERIALIZER_PHP</constant></term>
   <listitem>
    <para>Сериализатор PHP по умолчанию.</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.serializer-igbinary">
   <term><constant>Memcached::SERIALIZER_IGBINARY</constant></term>
   <listitem>
    <para>Сериализатор <link xlink:href="&url.igbinary;">igbinary</link>.
     Вместо текстового представления он сохраняет данные в компактном бинарном
     формате, что даёт выигрыш в размере и скорости работы.</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.serializer-json">
   <term><constant>Memcached::SERIALIZER_JSON</constant></term>
   <listitem>
    <para>Сериализатор JSON.</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.opt-prefix-key">
   <term><constant>Memcached::OPT_PREFIX_KEY</constant></term>
   <listitem>
    <para>Используется для создания "домена" для ваших ключей. Заданное здесь
     значение будет использоваться в качестве префикса для всех ключей. Значение
     не может быть длиннее <literal>128</literal> символов и, соответственно, максимальная
     длина ключей будет уменьшена. Префикс применяется только для обычных ключей, но
     не для серверных ключей.</para>
    <para>Тип: <literal>string</literal>, по умолчанию: <literal>""</literal>.</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.opt-hash">
   <term><constant>Memcached::OPT_HASH</constant></term>
   <listitem>
    <para>Задаёт алгоритм хеширования для ключей. Можно задавать константами
     <constant>Memcached::HASH_*</constant>. Каждый алгоритм хеширования имеет
     свои достоинства и недостатки. Используйте значение по умолчанию, если не уверены
     или вам всё равно.</para>
    <para>Тип: <literal>integer</literal>, по умолчанию: <constant>Memcached::HASH_DEFAULT</constant></para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.hash-default">
   <term><constant>Memcached::HASH_DEFAULT</constant></term>
   <listitem>
    <para>Алгоритм хеширования ключей по умолчанию (Jenkins one-at-a-time).</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.hash-md5">
   <term><constant>Memcached::HASH_MD5</constant></term>
   <listitem>
    <para>Алгоритм хеширования ключей MD5.</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.hash-crc">
   <term><constant>Memcached::HASH_CRC</constant></term>
   <listitem>
    <para>Алгоритм хеширования ключей CRC.</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.hash-fnv1-64">
   <term><constant>Memcached::HASH_FNV1_64</constant></term>
   <listitem>
    <para>Алгоритм хеширования ключей FNV1_64.</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.hash-fnv1a-64">
   <term><constant>Memcached::HASH_FNV1A_64</constant></term>
   <listitem>
    <para>Алгоритм хеширования ключей FNV1_64A.</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.hash-fnv1-32">
   <term><constant>Memcached::HASH_FNV1_32</constant></term>
   <listitem>
    <para>Алгоритм хеширования ключей FNV1_32.</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.hash-fnv1a-32">
   <term><constant>Memcached::HASH_FNV1A_32</constant></term>
   <listitem>
    <para>Алгоритм хеширования ключей FNV1_32A.</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.hash-hsieh">
   <term><constant>Memcached::HASH_HSIEH</constant></term>
   <listitem>
    <para>Алгоритм хеширования ключей Hsieh.</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.hash-murmur">
   <term><constant>Memcached::HASH_MURMUR</constant></term>
   <listitem>
    <para>Алгоритм хеширования ключей Murmur.</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.opt-distribution">
   <term><constant>Memcached::OPT_DISTRIBUTION</constant></term>
   <listitem>
    <para>Задаёт способ распределения ключей по серверам.
     В данный момент поддерживаются методы модульного и консистентного
     хеширования. Консистентное хеширование даёт лучшее распределение и
     позволяет добавлять сервера в кластер с минимальными потерями кеша.</para>
    <para>Тип: <literal>integer</literal>, по умолчанию: <constant>Memcached::DISTRIBUTION_MODULA.</constant></para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.distribution-modula">
   <term><constant>Memcached::DISTRIBUTION_MODULA</constant></term>
   <listitem>
    <para>Модульный алгоритм распределения ключей.</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.distribution-consistent">
   <term><constant>Memcached::DISTRIBUTION_CONSISTENT</constant></term>
   <listitem>
    <para>Алгоритм распределения ключей "Консистентное хеширование" (базируется на libketama).</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.opt-libketama-compatible">
   <term><constant>Memcached::OPT_LIBKETAMA_COMPATIBLE</constant></term>
   <listitem>
    <para>Включает или отключает совместимость с поведением типа libketama. Если
     включено, то алгоритм хеширования ключей устанавливается в MD5 и распределение
     ключей в режим консистентного хеширования на базе весов. Это полезно потому, что
     другие клиенты с поведением типа libketama (Python, Ruby и т.д.) с такими же
     настройками сервера смогут получить прозрачный доступ к ключам.
    </para>
    <note>
     <para>
      Крайне рекомендуется включить эту опцию если вы хотите использовать
      консистентное хеширование. Кроме того, она может быть включена по умолчанию в
      следующих релизах.
     </para>
    </note>
    <para>Тип: <literal>boolean</literal>, по умолчанию: &false;.</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.opt-buffer-writes">
   <term><constant>Memcached::OPT_BUFFER_WRITES</constant></term>
   <listitem>
    <para>Включает или отключает буферизованный ввод/вывод. Включение буферизации
     приводит к буферизации команд хранилищу вместо моментальной отправки.
     Любое действие по извлечению данных приведёт к немедленной отправке буфера
     на удалённый сервер. Выход или закрытие соединения также приводит к
     немедленной отправке буфера.</para>
    <para>Тип: <literal>boolean</literal>, по умолчанию: &false;.</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.opt-binary-protocol">
   <term><constant>Memcached::OPT_BINARY_PROTOCOL</constant></term>
   <listitem>
    <para>Включает использование бинарного протокола. Учтите, что на уже открытом
     соединении включить данную опцию не получится.</para>
    <para>Тип: <literal>boolean</literal>, по умолчанию: &false;.</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.opt-no-block">
   <term><constant>Memcached::OPT_NO_BLOCK</constant></term>
   <listitem>
    <para>Включает или отключает асинхронный ввод/вывод. Это самый быстрый транспорт
     для функций хранения.</para>
    <para>Тип: <literal>boolean</literal>, по умолчанию: &false;.</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.opt-tcp-nodelay">
   <term><constant>Memcached::OPT_TCP_NODELAY</constant></term>
   <listitem>
    <para>Включает или отключает опцию no-delay для сокетов соединения (в некоторых
     случаях может дать прирост скорости).</para>
    <para>Тип: <literal>boolean</literal>, по умолчанию: &false;.</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.opt-socket-send-size">
   <term><constant>Memcached::OPT_SOCKET_SEND_SIZE</constant></term>
   <listitem>
    <para>Максимальный размер буфера отправки для сокета в байтах.</para>
    <para>Тип: <literal>integer</literal>, по умолчанию: зависит от настроек платформы/ядра.</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.opt-socket-recv-size">
   <term><constant>Memcached::OPT_SOCKET_RECV_SIZE</constant></term>
   <listitem>
    <para>Максимальный размер буфера приёма для сокета в байтах.</para>
    <para>Тип: <literal>integer</literal>, по умолчанию: зависит от настроек платформы/ядра.</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.opt-connect-timeout">
   <term><constant>Memcached::OPT_CONNECT_TIMEOUT</constant></term>
   <listitem>
    <para>В неблокирующем режиме задаёт таймаут соединения для сокета в миллисекундах.</para>
    <para>Тип: <literal>integer</literal>, по умолчанию: <literal>1000</literal>.</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.opt-retry-timeout">
   <term><constant>Memcached::OPT_RETRY_TIMEOUT</constant></term>
   <listitem>
    <para>Задержка в секундах перед попыткой повторного соединения после ошибки.</para>
    <para>Тип: <literal>integer</literal>, по умолчанию: <literal>0</literal>.</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.opt-send-timeout">
   <term><constant>Memcached::OPT_SEND_TIMEOUT</constant></term>
   <listitem>
    <para>Таймаут отправки для сокета в микросекундах. В случаях, когда вы не можете
     использовать неблокирующий ввод/вывод это поможет вам сохранить таймауты при
     отсылке данных.</para>
    <para>Тип: <literal>integer</literal>, по умолчанию: <literal>0</literal>.</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.opt-recv-timeout">
   <term><constant>Memcached::OPT_RECV_TIMEOUT</constant></term>
   <listitem>
    <para>Таймаут чтения для сокета в микросекундах. В случаях, когда вы не можете
     использовать неблокирующий ввод/вывод это поможет вам сохранить таймауты при
     чтении данных.</para>
    <para>Тип: <literal>integer</literal>, по умолчанию: <literal>0</literal>.</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.opt-poll-timeout">
   <term><constant>Memcached::OPT_POLL_TIMEOUT</constant></term>
   <listitem>
    <para>Период опроса сокета в миллисекундах.</para>
    <para>Тип: <literal>integer</literal>, по умолчанию: <literal>1000</literal>.</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.opt-cache-lookups">
   <term><constant>Memcached::OPT_CACHE_LOOKUPS</constant></term>
   <listitem>
    <para>Разрешает или запрещает кешировать результаты запросов к DNS.</para>
    <para>Тип: <literal>boolean</literal>, по умолчанию: &false;.</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.opt-server-failure-limit">
   <term><constant>Memcached::OPT_SERVER_FAILURE_LIMIT</constant></term>
   <listitem>
    <para>Задаёт максимальное количество неудачных попыток соединиться с сервером.
     После достижения этого предела сервер будет удалён.</para>
    <para>Тип: <literal>integer</literal>, по умолчанию: <literal>0</literal>.</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.have-igbinary">
   <term><constant>Memcached::HAVE_IGBINARY</constant></term>
   <listitem>
    <para>Указывает, доступна ли поддержка сериализатора igbinary.</para>
    <para>Тип: <literal>boolean</literal>.</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.have-json">
   <term><constant>Memcached::HAVE_JSON</constant></term>
   <listitem>
    <para>Указывает, доступна ли поддержка сериализатора JSON.</para>
    <para>Тип: <literal>boolean</literal>.</para>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="memcached.constants.have-msgpack">
   <term><constant>Memcached::HAVE_MSGPACK</constant></term>
   <listitem>
    <para>Указывает, доступна ли поддержка сериализатора msgpack.</para>
    <para>Type: <literal>boolean</literal>.</para>
    <para>Доступно с Memcached 3.0.0.</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.have-session">
   <term><constant>Memcached::HAVE_SESSION</constant></term>
   <listitem>
    <para>Type: <literal>boolean</literal>.</para>
    <para>Доступно с Memcached 3.0.0.</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.have-sasl">
   <term><constant>Memcached::HAVE_SASL</constant></term>
   <listitem>
    <para>Type: <literal>boolean</literal>.</para>
    <para>Доступно с Memcached 3.0.0.</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.get-extended">
   <term><constant>Memcached::GET_EXTENDED</constant></term>
   <listitem>
    <para>Флаг для <function>Memcached::get</function>, <function>Memcached::getMulti</function> и
     <function>Memcached::getMultiByKey</function> дл того, чтобы также возвращались
     значения токена CAS.</para>
    <para>Доступно с Memcached 3.0.0.</para>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="memcached.constants.get-preserve-order">
   <term><constant>Memcached::GET_PRESERVE_ORDER</constant></term>
   <listitem>
    <para>Флаг для <function>Memcached::getMulti</function> и
     <function>Memcached::getMultiByKey</function> для гарантированного
     возвращения ключей в том же порядке, как они были запрошены. Несуществующие
     ключи будут возвращены со значениями &null;.</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-success">
   <term><constant>Memcached::RES_SUCCESS</constant></term>
   <listitem>
    <para>Операция прошла успешно.</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-failure">
   <term><constant>Memcached::RES_FAILURE</constant></term>
   <listitem>
    <para>Операция завершилась ошибкой.</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-host-lookup-failure">
   <term><constant>Memcached::RES_HOST_LOOKUP_FAILURE</constant></term>
   <listitem>
    <para>Ошибка запроса к DNS.</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-unknown-read-failure">
   <term><constant>Memcached::RES_UNKNOWN_READ_FAILURE</constant></term>
   <listitem>
    <para>Не удалось прочитать сетевые данные.</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-protocol-error">
   <term><constant>Memcached::RES_PROTOCOL_ERROR</constant></term>
   <listitem>
    <para>Некорректная команда в протоколе memcached.</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-client-error">
   <term><constant>Memcached::RES_CLIENT_ERROR</constant></term>
   <listitem>
    <para>Ошибка на стороне клиента.</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-server-error">
   <term><constant>Memcached::RES_SERVER_ERROR</constant></term>
   <listitem>
    <para>Ошибка на стороне сервера.</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-write-failure">
   <term><constant>Memcached::RES_WRITE_FAILURE</constant></term>
   <listitem>
    <para>Не удалось записать сетевые данные.</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-data-exists">
   <term><constant>Memcached::RES_DATA_EXISTS</constant></term>
   <listitem>
    <para>Не удалось сравнить-и-обменять: вы пытаетесь изменить элемент, который
     был изменён после того, как вы его прочитали в последний раз.</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-notstored">
   <term><constant>Memcached::RES_NOTSTORED</constant></term>
   <listitem>
    <para>Элемент не сохранён: но не из-за ошибки. Обычно такое означает, что
     не соблюдены предусловия команд "add" или "replace" либо что
     элемент находится в очереди на удаление.</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-notfound">
   <term><constant>Memcached::RES_NOTFOUND</constant></term>
   <listitem>
    <para>Элемент с заданным ключом не найден (при операциях "get" или "cas").</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-partial-read">
   <term><constant>Memcached::RES_PARTIAL_READ</constant></term>
   <listitem>
    <para>Частичная ошибка чтения сетевых данных.</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-some-errors">
   <term><constant>Memcached::RES_SOME_ERRORS</constant></term>
   <listitem>
    <para>Какие-то ошибки возникли при мульти-запросе.</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-no-servers">
   <term><constant>Memcached::RES_NO_SERVERS</constant></term>
   <listitem>
    <para>Список серверов пуст.</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-end">
   <term><constant>Memcached::RES_END</constant></term>
   <listitem>
    <para>Конец результирующего набора.</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-errno">
   <term><constant>Memcached::RES_ERRNO</constant></term>
   <listitem>
    <para>Системная ошибка.</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-buffered">
   <term><constant>Memcached::RES_BUFFERED</constant></term>
   <listitem>
    <para>Операция помещена в буфер.</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-timeout">
   <term><constant>Memcached::RES_TIMEOUT</constant></term>
   <listitem>
    <para>Превышен таймаут операции.</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-bad-key-provided">
   <term><constant>Memcached::RES_BAD_KEY_PROVIDED</constant></term>
   <listitem>
    <para>Некорректный ключ.</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-connection-socket-create-failure">
   <term><constant>Memcached::RES_CONNECTION_SOCKET_CREATE_FAILURE</constant></term>
   <listitem>
    <para>Не удалось создать сетевой сокет.</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-payload-failure">
   <term><constant>Memcached::RES_PAYLOAD_FAILURE</constant></term>
   <listitem>
    <para>Проблемы с данными: не удаётся сжать/разжать или сериализовать/десериализовать значение.</para>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="memcached.constants.res-auth-problem">
   <term><constant>Memcached::RES_AUTH_PROBLEM</constant></term>
   <listitem>
    <para>Доступно с Memcached 3.0.0.</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-auth-failure">
   <term><constant>Memcached::RES_AUTH_FAILURE</constant></term>
   <listitem>
    <para>Доступно с Memcached 3.0.0.</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-auth-continue">
   <term><constant>Memcached::RES_AUTH_CONTINUE</constant></term>
   <listitem>
    <para>Доступно с Memcached 3.0.0.</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-e2big">
   <term><constant>Memcached::RES_E2BIG</constant></term>
   <listitem>
    <para>Доступно с Memcached 3.0.0.</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-key-too-big">
   <term><constant>Memcached::RES_KEY_TOO_BIG</constant></term>
   <listitem>
    <para>Доступно с Memcached 3.0.0.</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-server-temporarily-disabled">
   <term><constant>Memcached::RES_SERVER_TEMPORARILY_DISABLED</constant></term>
   <listitem>
    <para>Доступно с Memcached 3.0.0.</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-server-memory-allocation-failure">
   <term><constant>Memcached::RES_SERVER_MEMORY_ALLOCATION_FAILURE</constant></term>
   <listitem>
    <para>Доступно с Memcached 3.0.0.</para>
   </listitem>
  </varlistentry>
 </variablelist>
</appendix>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
