<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 59a1bbcb6f7a1e74a640d7ec2890cc6a12f19b52 Maintainer: rjhdby Status: ready -->
<!-- Reviewed: no -->

<chapter  xml:id="event.constructing.signal.events" xmlns:phpdoc="http://php.net/ns/phpdoc" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>Создание событий для сигналов</title>
 <para>
  Event может отслеживать сигналы в стиле POSIX.
  Для создания обработчика для сигнала используйте
  конструктор <methodname>Event::__construct</methodname>
  с флагом
  <constant>Event::SIGNAL</constant>
  или фабричный метод
  <methodname>Event::signal</methodname>.
 </para>
 <example>
  <title>Обработка сигнала <literal>SIGTERM</literal></title>
  <programlisting role="php">
<![CDATA[
<?php
/*
Запускайте в окне терминала:

$ php examples/signal.php

В другом терминальном окне отыщите этот процесс и
пошлите ему сигнал SIGTERM:

$ ps aux | grep examp
ruslan    3976  0.2  0.0 139896 11256 pts/1    S+   10:25   0:00 php examples/signal.php
ruslan    3978  0.0  0.0   9572   864 pts/2    S+   10:26   0:00 grep --color=auto examp
$ kill -TERM 3976

В первом терминале вы увидите следующее:

Пойман сигнал 15
*/
class MyEventSignal {
    private $base, $ev;

    public function __construct($base) {
        $this->base = $base;
        $this->ev = Event::signal($base, SIGTERM, array($this, 'eventSighandler'));
        $this->ev->add();
    }

    public function eventSighandler($no, $c) {
        echo "Пойман сигнал $no\n";
        $this->base->exit();
    }
}

$base = new EventBase();
$c    = new MyEventSignal($base);

$base->loop();
?>
]]>
  </programlisting>
 </example>
 <para>
  Обратите внимание, что функции обратного вызова
  запускаются внутри событийного цикла после получения
  сигнала, так что для них вполне безопасно вызывать
  функции, которые не следует запускать из обычных
  обработчиков сигналов POSIX.
 </para>
 <para></para>
 <para>
  Также почитайте
  <link
  xlink:href="http://www.wangafu.net/~nickm/libevent-book/Ref4_event.html#_constructing_signal_events">Fast
   portable non-blocking network programming with Libevent, Constructing Signal
   Events</link>
  .
 </para>
</chapter><!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
