<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: af5f2f87b3b0bb9ee0f83ccb787a4e7db1eb6bd4 Maintainer: rjhdby Status: ready -->
<!-- Reviewed: yes Maintainer: sergey -->

<refentry xml:id="eventlistener.construct" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>EventListener::__construct</refname>
  <refpurpose>Создать новый слушатель соединения, связанный с событийной базой</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <modifier>public</modifier>
   <methodname>EventListener::__construct</methodname>
   <methodparam>
    <type>EventBase</type>
    <parameter>base</parameter>
   </methodparam>
   <methodparam>
    <type>callable</type>
    <parameter>cb</parameter>
   </methodparam>
   <methodparam>
    <type>mixed</type>
    <parameter>data</parameter>
   </methodparam>
   <methodparam>
    <type>int</type>
    <parameter>flags</parameter>
   </methodparam>
   <methodparam>
    <type>int</type>
    <parameter>backlog</parameter>
   </methodparam>
   <methodparam>
    <type>mixed</type>
    <parameter>target</parameter>
   </methodparam>
  </methodsynopsis>
  <para>
   Создаёт новый слушатель соединения, связанный с событийной базой.
  </para>
 </refsect1>
 <refsect1 role="parameters">
  &reftitle.parameters;
  <variablelist>
   <varlistentry>
    <term>
     <parameter>base</parameter>
    </term>
    <listitem>
     <para>
      Событийная база.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>
     <parameter>cb</parameter>
    </term>
    <listitem>
     <para>
      Callback-функция (<type>callable</type>),
      которая будет вызвана при получении соединения.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>
     <parameter>data</parameter>
    </term>
    <listitem>
     <para>
      Пользовательские данные, которые будут передаваться в
      <parameter>cb</parameter>
      .
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>
     <parameter>flags</parameter>
    </term>
    <listitem>
     <para>
      Битовая маска из констант
      <literal>EventListener::OPT_*</literal>. Смотрите
      <link linkend="eventlistener.constants">константы EventListener</link>
      .
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>
     <parameter>backlog</parameter>
    </term>
    <listitem>
     <para>
      Устанавливает максимальное количество ожидающих соединений, которым,
      сетевым стеком, позволено ожидать в состоянии ещё-не-принято. Более
      подробно смотрите в документации по системной функции <literal>listen</literal>.
      Если значение <parameter>backlog</parameter> отрицательно,
      Libevent попытается самостоятельно выбрать наилучшее значение для
      <parameter>backlog</parameter>.
      Если равно нулю, Event будет считать, что
      <literal>listen</literal>
      уже вызвана на сокете(
      <parameter>target</parameter>
      )
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>
     <parameter>target</parameter>
    </term>
    <listitem>
     <para>
      Может быть строкой, ресурсом сокета или потоком, связанным с сокетом.
      Если <parameter>target</parameter> является строкой, то она будет
      разбираться как сетевой адрес. Она будет интерпретироваться как
      путь сокета домена UNIX, если будет иметь префикс
      <literal>'unix:'</literal>
      , например,
      <literal>'unix:/tmp/my.sock'</literal>
      .
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Возвращает объект
   <classname>EventListener</classname>, представляющий
   слушатель события соединения.
  </para>
 </refsect1>
 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>PECL event 1.5.0</entry>
       <entry>
        Добавлена поддержка сокетов домена UNIX.
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>
 <refsect1 role="examples">
  &reftitle.examples;
  <example>
   <title>
    Пример использования <function>EventListener::__construct</function></title>
   <programlisting role="php">
<![CDATA[
<?php
/*
 * Простой сервер на основе прослушивателя соединений libevent.
 *
 * Использование:
 * 1) В одном окне терминала запустите:
 *
 * $ php listener.php 9881
 *
 * 2) В другом окне терминала откройте соединение, например:
 *
 * $ nc 127.0.0.1 9881
 *
 * 3) начните печатать. Сервер должен повторить ввод.
 */

class MyListenerConnection {
    private $bev, $base;

    public function __destruct() {
        $this->bev->free();
    }

    public function __construct($base, $fd) {
        $this->base = $base;

        $this->bev = new EventBufferEvent($base, $fd, EventBufferEvent::OPT_CLOSE_ON_FREE);

        $this->bev->setCallbacks(array($this, "echoReadCallback"), NULL,
            array($this, "echoEventCallback"), NULL);

        if (!$this->bev->enable(Event::READ)) {
            echo "Не удалось включить READ\n";
            return;
        }
    }

    public function echoReadCallback($bev, $ctx) {
        // Скопируйте все данные из входного буфера в выходной буфер

        // Вариант #1
        $bev->output->addBuffer($bev->input);

        /* Вариант #2 */
        /*
        $input    = $bev->getInput();
        $output = $bev->getOutput();
        $output->addBuffer($input);
        */
    }

    public function echoEventCallback($bev, $events, $ctx) {
        if ($events & EventBufferEvent::ERROR) {
            echo "Ошибка bufferevent\n";
        }

        if ($events & (EventBufferEvent::EOF | EventBufferEvent::ERROR)) {
            //$bev->free();
            $this->__destruct();
        }
    }
}

class MyListener {
    public $base,
        $listener,
        $socket;
    private $conn = array();

    public function __destruct() {
        foreach ($this->conn as &$c) $c = NULL;
    }

    public function __construct($port) {
        $this->base = new EventBase();
        if (!$this->base) {
            echo "Не удалось открыть событийную базу";
            exit(1);
        }

        // Вариант #1
        /*
        $this->socket = socket_create(AF_INET, SOCK_STREAM, SOL_TCP);
        if (!socket_bind($this->socket, '0.0.0.0', $port)) {
            echo "Невозможно связать сокет\n";
            exit(1);
        }
        $this->listener = new EventListener($this->base,
            array($this, "acceptConnCallback"), $this->base,
            EventListener::OPT_CLOSE_ON_FREE | EventListener::OPT_REUSEABLE,
            -1, $this->socket);
         */

        // Вариант #2
         $this->listener = new EventListener($this->base,
             array($this, "acceptConnCallback"), $this->base,
             EventListener::OPT_CLOSE_ON_FREE | EventListener::OPT_REUSEABLE, -1,
             "0.0.0.0:$port");

        if (!$this->listener) {
            echo "Не удалось создать слушателя";
            exit(1);
        }

        $this->listener->setErrorCallback(array($this, "accept_error_cb"));
    }

    public function dispatch() {
        $this->base->dispatch();
    }

    // Этот callback вызывается, когда есть данные для чтения на $bev
    public function acceptConnCallback($listener, $fd, $address, $ctx) {
        // Мы получили новое соединение! Создайте для этого все необходимое. */
        $base = $this->base;
        $this->conn[] = new MyListenerConnection($base, $fd);
    }

    public function accept_error_cb($listener, $ctx) {
        $base = $this->base;

        fprintf(STDERR, "Получил ошибку %d (%s) на слушателе."
            ."Выключение.\n",
            EventUtil::getLastSocketErrno(),
            EventUtil::getLastSocketError());

        $base->exit(NULL);
    }
}

$port = 9808;

if ($argc > 1) {
    $port = (int) $argv[1];
}
if ($port <= 0 || $port > 65535) {
    exit("Invalid port");
}

$l = new MyListener($port);
$l->dispatch();
?>
]]>
   </programlisting>
  </example>
 </refsect1>
</refentry><!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
