<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 23ea6be076881a34e1d454e9680968ece085f7f6 Maintainer: rjhdby Status: ready -->
<!-- Reviewed: no -->
<reference xml:id="class.event" role="class" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude">
 <title>Класс Event</title>
 <titleabbrev>Event</titleabbrev>
 <partintro>
  <!-- {{{ Event intro -->
  <section xml:id="event.intro">
   &reftitle.intro;
   <para>
    Класс <classname>Event</classname> представляет
    и срабатывает на следующие события:
    файловый дескриптор
    готов к считыванию или записи; становится готов
    к считыванию или записи (только edge-triggered I/O
    (единовременное срабатывание)); заканчивается
    ожидание; получен системный сигнал;
    произошло пользовательское событие.
   </para>
   <para>
    Каждое событие связано
    с объектом <classname>EventBase</classname>.
    Однако событие не обработается, пока событие
    не <emphasis>добавят</emphasis> методом
    <methodname>Event::add</methodname>.
    Добавленное событие пребывает в статусе ожидания
    <emphasis>pending</emphasis>, пока оно
    не произошло. После этого событие переходит в статус
    <emphasis>active</emphasis>. Для обработки
    событий пользователь регистрирует функцию
    обратного вызова, которая вызывается в момент
    перехода события в активный статус. Событие вернётся в статус ожидания,
    если событие настроили со статусом <emphasis>persistent</emphasis>.
    После запуска callback-функции событие выйдет из режима ожидания,
    если не пребывает в статусе постоянноянного.
    Метод
    <methodname>Event::del</methodname>
    <emphasis>удаляет</emphasis> событие из отслеживаемых
    и поэтому выводит событие из статуса ожидания. Событие добавляют повторно
    вызовом метода
    <methodname>Event::add</methodname>.
   </para>
  </section>
  <!-- }}} -->
  <section xml:id="event.synopsis">
   &reftitle.classsynopsis;

   <!-- {{{ Synopsis -->
   <classsynopsis>
    <ooclass>
     <classname>Event</classname>
    </ooclass>
    <!-- {{{ Class synopsis -->
    <classsynopsisinfo>
     <ooclass>
      <modifier>final</modifier>
      <classname>Event</classname>
     </ooclass>
    </classsynopsisinfo>
    <!-- }}} -->
    <classsynopsisinfo role="comment">&Constants;</classsynopsisinfo>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="event.constants.et">Event::ET</varname>
     <initializer>32</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="event.constants.persist">Event::PERSIST</varname>
     <initializer>16</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="event.constants.read">Event::READ</varname>
     <initializer>2</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="event.constants.write">Event::WRITE</varname>
     <initializer>4</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="event.constants.signal">Event::SIGNAL</varname>
     <initializer>8</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="event.constants.timeout">Event::TIMEOUT</varname>
     <initializer>1</initializer>
    </fieldsynopsis>
    <classsynopsisinfo role="comment">&Properties;</classsynopsisinfo>
    <fieldsynopsis>
     <modifier>public</modifier>
     <modifier>readonly</modifier>
     <type>bool</type>
     <varname linkend="event.props.pending">pending</varname>
    </fieldsynopsis>
    <classsynopsisinfo role="comment">&Methods;</classsynopsisinfo>
    <xi:include xpointer="xmlns(db=http://docbook.org/ns/docbook) xpointer(id('class.event')/db:refentry/db:refsect1[@role='description']/descendant::db:methodsynopsis[1])" />
   </classsynopsis>
   <!-- }}} -->
  </section>
  <!-- {{{ Event properties -->
  <section xml:id="event.props">
   &reftitle.properties;
   <variablelist>
    <varlistentry xml:id="event.props.pending">
     <term>
      <varname>pending</varname>
     </term>
     <listitem>
      <para>
       Указывает, пребывает ли событие в состоянии ожидания. Смотрите страницу
       «<link linkend="event.persistence">О постоянных событиях</link>».
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </section>
  <!-- }}} -->
  <!-- {{{ Event constants -->
  <section xml:id="event.constants">
   &reftitle.constants;
   <variablelist>
    <varlistentry xml:id="event.constants.et">
     <term>
      <constant>Event::ET</constant>
     </term>
     <listitem>
      <para>
       Указывает, что событие срабатывает по фронту (англ. edge-triggered) —
       генерируется один раз при изменении статуса,
       если базовый сервер событий поддерживает такое поведение.
       Это влияет на семантику флагов
       <constant>Event::READ</constant>
       и
       <constant>Event::WRITE</constant>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry xml:id="event.constants.persist">
     <term>
      <constant>Event::PERSIST</constant>
     </term>
     <listitem>
      <para>
       Указывает, что событие пребывает в статусе постоянного. Дополнительную информацию даёт страница
       «<link linkend="event.persistence">О постоянных событиях</link>».
      </para>
     </listitem>
    </varlistentry>
    <varlistentry xml:id="event.constants.read">
     <term>
      <constant>Event::READ</constant>
     </term>
     <listitem>
      <para>
       Флаг указывает событие, которое становится
       активным, когда предоставленный файл — часто
       потоковый ресурс или сокет — готов к чтению.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry xml:id="event.constants.write">
     <term>
      <constant>Event::WRITE</constant>
     </term>
     <listitem>
      <para>
       Флаг указывает событие, которое становится
       активным, когда предоставленный файл — часто
       потоковый ресурс или сокет — готов к записи.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry xml:id="event.constants.signal">
     <term>
      <constant>Event::SIGNAL</constant>
     </term>
     <listitem>
      <para>
       Флаг указывают, чтобы реализовать отслеживание
       системных сигналов. Дополнительную информацию даёт страница «Создание событий
       для сигналов».
      </para>
     </listitem>
    </varlistentry>
    <varlistentry xml:id="event.constants.timeout">
     <term>
      <constant>Event::TIMEOUT</constant>
     </term>
     <listitem>
      <para>
       Флаг указывает, что активировалось событие
       по истечению времени ожидания.
      </para>
      <para>
       Флаг
       <constant>Event::TIMEOUT</constant>
       игнорируется при создании события: флаг
       устанавливают при <emphasis>добавлении</emphasis>.
       Флаг указывают в аргументе
       <literal>$what</literal> функции обратного
       вызова, если произошло событие этого типа.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </section>
  <!-- }}} -->
 </partintro>

 &reference.event.entities.event;

</reference><!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
