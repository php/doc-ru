<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 93e05c681bfdbfdd60cec941173c6fe8e8c95cf6 Maintainer: malferov Status: ready -->
<!-- Reviewed: no -->
<reference xml:id="class.swoole-coroutine-lock" role="class" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude">

 <title>Класс Swoole\Coroutine\Lock</title>
 <titleabbrev>Swoole\Coroutine\Lock</titleabbrev>

 <partintro>

<!-- {{{ Swoole\Coroutine\Lock intro -->
  <section xml:id="swoole-coroutine-lock.intro">
   &reftitle.intro;
   <para>
    В Swoole 6.0.1 для корутин, или сопрограмм, появились блокировки, которые поддерживают разделение между процессами или между потоками.
    Неблокирующее поведение таких блокировок повышает эффективность синхронизации корутин
    в многопроцессных и многопоточных средах.
   </para>
   <para>
    При компиляции с параметром <literal>--enable-iouring</literal> и при поддержке ядром Linux
    функции <literal>io_uring futex</literal> сопрограммная блокировка модуля Swoole реализует синхронизацию
    через фьютекс <literal>io_uring</literal>. При такой синхронизации сопрограммы ожидают пробуждения блокировки
    через эффективный механизм организации очередей, который значительно повышает производительность.
   </para>
   <para>
    Без фьютекса <literal>io_uring</literal> корутинная блокировка переключается на механизм экспоненциально нарастающего ожидания,
    при котором время ожидания увеличивается на 2^n миллисекунд, где n — количество отказов,
    после каждой неудачной попытки захватить блокировку. Хотя такой подход исключает активное ожидание,
    он создаёт дополнительную нагрузку на планировщик процессов и увеличивает задержки.
   </para>
   <para>
    Сопрограммная блокировка реентерабельна — разрешает повторный вход в критическую секцию, или, говоря по-другому,
    рекурсивный захват блокировки, поэтому разрешает текущей удерживающей сопрограмме безопасно выполнять
    повторные операции блокировки.
   </para>
   <warning>
    <para>
     Лучше не создавать блокировки в callback-функциях наподобие <literal>onReceive</literal>,
     поскольку это приведёт к неконтролируемому росту потребления памяти или даже вызовет утечки памяти.
    </para>
   </warning>
   <warning>
    <para>
     Захват и освобождение блокировки выполняют в той же сопрограмме,
     иначе нарушается логика работы программы.
    </para>
   </warning>
  </section>
<!-- }}} -->

  <section xml:id="swoole-coroutine-lock.synopsis">
   &reftitle.classsynopsis;

<!-- {{{ Synopsis -->
   <classsynopsis>
    <ooclass><classname>Swoole\Coroutine\Lock</classname></ooclass>

<!-- {{{ Class synopsis -->
    <classsynopsisinfo>
     <ooclass>
      <classname>Swoole\Coroutine\Lock</classname>
     </ooclass>
    </classsynopsisinfo>
<!-- }}} -->

    <classsynopsisinfo role="comment">&Methods;</classsynopsisinfo>
    <xi:include xpointer="xmlns(db=http://docbook.org/ns/docbook) xpointer(id('class.swoole-coroutine-lock')/db:refentry/db:refsect1[@role='description']/descendant::db:methodsynopsis[not(@role='procedural')])" />
   </classsynopsis>
<!-- }}} -->

  </section>

  <section xml:id="swoole-coroutine-lock.examples">
   &reftitle.examples;
   <example xml:id="swoole-coroutine-lock.example.basic">
    <title>Базовый пример работы с блокировками</title>
    <programlisting role="php">
<![CDATA[
<?php

use Swoole\Coroutine\Lock;
use Swoole\Coroutine\WaitGroup;
use function Swoole\Coroutine\go;
use function Swoole\Coroutine\run;

$lock = new Lock();
$waitGroup = new WaitGroup();

run(function() use ($lock, $waitGroup) {
    go(function() use ($lock, $waitGroup) {
        $waitGroup->add();
        $lock->lock();
        sleep(1);
        $lock->unlock();
        $waitGroup->done();
    });

    go(function() use ($lock, $waitGroup) {
        $waitGroup->add();
        $lock->lock(); // Дождаться, пока другая сопрограмма освободит блокировку
        sleep(1);
        $lock->unlock();
        $waitGroup->done();
    });

    echo 'Блокировка приостанавливает только текущую корутину, но не останавливает весь процесс';
    $waitGroup->wait();
});
]]>
    </programlisting>
   </example>
  </section>

 </partintro>

 &reference.swoole.swoole.coroutine.entities.lock;
</reference>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
