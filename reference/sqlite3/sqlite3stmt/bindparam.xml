<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: d15a12639faeb8d1b4bcf7eff008de2885017d1e Maintainer: lex Status: ready -->
<!-- Reviewed: yes Maintainer: sergey -->
<refentry xml:id="sqlite3stmt.bindparam" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>SQLite3Stmt::bindParam</refname>
  <refpurpose>Связывает параметр с переменной подготовленного запроса</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <modifier>public</modifier> <type>bool</type><methodname>SQLite3Stmt::bindParam</methodname>
   <methodparam><type class="union"><type>string</type><type>int</type></type><parameter>param</parameter></methodparam>
   <methodparam><type>mixed</type><parameter role="reference">var</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>type</parameter><initializer><constant>SQLITE3_TEXT</constant></initializer></methodparam>
  </methodsynopsis>
  <para>
   Связывает параметр с переменной подготовленного запроса.
  </para>
  <caution>
   <para>
    До PHP 7.2.14 и 7.3.0,
    <methodname>SQLite3Stmt::reset</methodname> должен вызываться до первого вызова
    <methodname>SQLite3Stmt::execute</methodname>, если надо, чтобы связанное
    значение корректно обновлялось при последующих вызовах
    <methodname>SQLite3Stmt::execute</methodname>.
    Если метод <methodname>SQLite3Stmt::reset</methodname> не вызывался, то
    связанное значение не будет изменяться, даже если значение, присвоенное
    переменной, переданной <methodname>SQLite3Stmt::bindParam</methodname>,
    изменилось или снова был вызван метод
    <methodname>SQLite3Stmt::bindParam</methodname>.
   </para>
  </caution>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>param</parameter></term>
     <listitem>
      <para>
       Либо строка (<type>string</type>) (для именованных параметров),
       либо целое число (<type>int</type>) (для положительных параметров),
       идентифицирующая переменную подготовленного запроса, к которому должно быть привязано значение.
       Если именованный параметр не начинается с двоеточия ((<literal>:</literal>)) или
       знака <literal>@</literal>, автоматически добавляется двоеточие (<literal>:</literal>).
       Положительные параметры начинаются с 1.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>var</parameter></term>
     <listitem>
      <para>
       Параметр для привязки к переменной подготовленного запроса.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>type</parameter></term>
     <listitem>
      <para>
       Тип данных параметра для привязки.
       <itemizedlist>
        <listitem>
         <para>
          <constant>SQLITE3_INTEGER</constant>: Значение является целым числом со знаком,
          которое хранится в 1, 2, 3, 4, 6 или 8 байт в зависимости от величины значения.
         </para>
        </listitem>
        <listitem>
         <para>
          <constant>SQLITE3_FLOAT</constant>: Значение является числом с плавающей точкой,
          которое хранится в виде 8-байтного числа IEEE с плавающей точкой.
         </para>
        </listitem>
        <listitem>
         <para>
          <constant>SQLITE3_TEXT</constant>: Значение является текстовой строкой,
          которое хранится в кодировке базы данных (UTF-8, UTF-16BE или UTF-16-LE).
         </para>
        </listitem>
        <listitem>
         <para>
          <constant>SQLITE3_BLOB</constant>: Значение является большим двоичным объектом (blob) данных,
          который хранится точно так же, как и входные данные.
         </para>
        </listitem>
        <listitem>
         <para>
          <constant>SQLITE3_NULL</constant>: Значение является NULL-значением.
         </para>
        </listitem>
       </itemizedlist>
      </para>
      <para>
       В PHP 7.0.7, если <parameter>type</parameter> опущен, то он автоматически определяется из типа <parameter>var</parameter>:
       <type>bool</type> и <type>int</type> рассматриваются как <constant>SQLITE3_INTEGER</constant>,
       <type>float</type> как <constant>SQLITE3_FLOAT</constant>,
       <type>null</type> как <constant>SQLITE3_NULL</constant> и все остальные как <constant>SQLITE3_TEXT</constant>.
       Раньше, если тип опущен, то по умолчанию использовался <constant>SQLITE3_TEXT</constant>.
      </para>
      <note>
       <para>
        Если <parameter>var</parameter> равен &null;, он всегда обрабатывается как
        <constant>SQLITE3_NULL</constant>, независимо от заданного <parameter>type</parameter>.
       </para>
      </note>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Возвращает &true;, если параметр привязан к переменной подготовленного запроса, &false; в случае возникновения ошибки.
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <informaltable>
   <tgroup cols="2">
    <thead>
     <row>
      <entry>&Version;</entry>
      <entry>&Description;</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry>7.4.0</entry>
      <entry>
       Параметр <parameter>param</parameter> теперь поддерживает нотацию <literal>@param</literal>.
      </entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Пример использования <function>SQLite3Stmt::bindParam</function></title>
    <para>
     В примере показано, как один подготовленный запрос с привязкой одного параметра
     может использоваться для вставки нескольких строк с различными значениями.
    </para>
    <programlisting role="php">
<![CDATA[
<?php
$db = new SQLite3(':memory:');
$db->exec("CREATE TABLE foo (bar TEXT)");

$stmt = $db->prepare("INSERT INTO foo VALUES (:bar)");
$stmt->bindParam(':bar', $bar, SQLITE3_TEXT);

$bar = 'baz';
$stmt->execute();

$bar = 42;
$stmt->execute();

$res = $db->query("SELECT * FROM foo");
while (($row = $res->fetchArray(SQLITE3_ASSOC))) {
    var_dump($row);
}
?>
]]>
    </programlisting>
    &example.outputs;
    <screen role="php">
<![CDATA[
array(1) {
  ["bar"]=>
  string(3) "baz"
}
array(1) {
  ["bar"]=>
  string(2) "42"
}
]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <simplelist>
   <member><methodname>SQLite3Stmt::bindValue</methodname></member>
   <member><methodname>SQLite3::prepare</methodname></member>
  </simplelist>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
