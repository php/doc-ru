<?xml version="1.0" encoding="utf-8"?>
<!-- Generated by xml_proto.php v2.2. Found in /scripts directory of phpdoc. -->
<!-- EN-Revision: 59d2ecdcbfb345bd297502389c4a1c55784b812b Maintainer: sergey Status: ready -->
<!-- Reviewed: no -->

<refentry xml:id="function.db2-bind-param" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>db2_bind_param</refname>
  <refpurpose>
   Связывает переменную PHP с параметром SQL-выражения
  </refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>bool</type><methodname>db2_bind_param</methodname>
   <methodparam><type>resource</type><parameter>stmt</parameter></methodparam>
   <methodparam><type>int</type><parameter>parameter_number</parameter></methodparam>
   <methodparam><type>string</type><parameter>variable_name</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>parameter_type</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>data_type</parameter><initializer>0</initializer></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>precision</parameter><initializer>-1</initializer></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>scale</parameter><initializer>0</initializer></methodparam>
  </methodsynopsis>

  <para>
   Связывает переменную PHP с параметром SQL-выражения в ресурсе выражения,
   возвращаемом <function>db2_prepare</function>. Эта функция даёт больший
   контроль над типом параметра, типом данных, точностью и масштабом для
   параметра, чем простая передача переменной как части необязательного
   входного массива в <function>db2_execute</function>.
  </para>

 </refsect1>
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>stmt</parameter></term>
     <listitem>
      <para>
       Подготовленное выражение, возвращаемое <function>db2_prepare</function>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>parameter_number</parameter></term>
     <listitem>
      <para>
       Задаёт позицию параметра, которая нумеруется с 1, в подготовленном
       выражении.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
    <term><parameter>variable_name</parameter></term>
     <listitem>
      <para>
       Строка, определяющая имя переменной PHP для привязки к параметру,
       заданному <parameter>parameter_number</parameter>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>parameter_type</parameter></term>
     <listitem>
      <para>
       Константа, определяющая, должна ли переменная PHP быть привязана к
       параметру SQL как входной параметр (<literal>DB2_PARAM_IN</literal>),
       выходной параметр (<literal>DB2_PARAM_OUT</literal>) или как параметр,
       принимающий ввод и возвращающий вывод (<literal>DB2_PARAM_INOUT</literal>).
       Чтобы избежать перегрузки памяти, можно также указать
       <literal>DB2_PARAM_FILE</literal>, чтобы привязать переменную PHP к имени
       файла, содержащего данные большого объекта (BLOB, CLOB или DBCLOB).
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>data_type</parameter></term>
     <listitem>
      <para>
       Константа, указывающая тип данных SQL, с которым должна быть связана
       переменная PHP: <literal>DB2_BINARY</literal>, <literal>DB2_CHAR</literal>,
       <literal>DB2_DOUBLE</literal> или <literal>DB2_LONG</literal>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>precision</parameter></term>
     <listitem>
      <para>
       Задаёт точность, с которой переменная должна быть привязана к базе данных.
       Этот параметр также можно использовать для получения выходных значений
       XML из хранимых процедур. Неотрицательное значение указывает максимальный
       размер данных XML, которые будут извлечены из базы данных. Если этот
       параметр не используется, для получения выходного значения XML из
       хранимой процедуры предполагается значение по умолчанию 1 МБ.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>scale</parameter></term>
     <listitem>
      <para>
       Задаёт масштаб, с которым переменная должна быть привязана к базе данных.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.success;
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Привязка переменных PHP к подготовленному выражению</title>
    <para>
     SQL-выражение в данном примере использует два входных параметра в
     предложении WHERE. Вызывается <function>db2_bind_param</function>, чтобы
     связать две переменные PHP с соответствующими параметрами SQL. Обратите
     внимание, что переменные PHP не нужно объявлять или присваивать перед
     вызовом <function>db2_bind_param</function>; в этом примере
     <literal>$lower_limit</literal> присваивается значение перед вызовом
     <function>db2_bind_param</function>, а <literal>$upper_limit</literal>
     присваивается значение после вызова <function>db2_bind_param</function>.
     Перед вызовом <function>db2_execute</function> переменные должны быть
     связаны, а параметрам, принимающим ввод, должно быть присвоено любое
     значение.
     <function>db2_execute</function>.
    </para>
    <programlisting role="php">
<![CDATA[
<?php

$sql = 'SELECT name, breed, weight FROM animals
    WHERE weight > ? AND weight < ?';
$conn = db2_connect($database, $user, $password);
$stmt = db2_prepare($conn, $sql);

// Можно объявить переменную перед вызовом db2_bind_param()
$lower_limit = 1;

db2_bind_param($stmt, 1, "lower_limit", DB2_PARAM_IN);
db2_bind_param($stmt, 2, "upper_limit", DB2_PARAM_IN);

// Также можно объявить переменную после вызова db2_bind_param()
$upper_limit = 15.0;

if (db2_execute($stmt)) {
    while ($row = db2_fetch_array($stmt)) {
        print "{$row[0]}, {$row[1]}, {$row[2]}\n";
    }
}
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Pook, cat, 3.2
Rickety Ride, goat, 9.7
Peaches, dog, 12.3
]]>
    </screen>
   </example>
   <example>
    <title>Вызов хранимых процедур с параметрами IN и OUT</title>
    <para>
     Хранимая процедура match_animal в данном примере принимает три разных
     параметра:
     <orderedlist>
      <listitem>
       <para>
        входной параметр (IN), который принимает имя первого животного в
        качестве входных данных
       </para>
      </listitem>
      <listitem>
       <para>
        параметр ввода-вывода (INOUT), который принимает имя второго животного
        в качестве входных данных и возвращает строку <literal>TRUE</literal>,
        если животное в базе данных совпадает с этим именем
       </para>
      </listitem>
      <listitem>
       <para>
        выходной параметр (OUT), который возвращает сумму веса двух
        идентифицированных животных
       </para>
      </listitem>
     </orderedlist>
     Кроме того, хранимая процедура возвращает набор результатов, состоящий из
     животных, перечисленных в алфавитном порядке, начиная с животного,
     соответствующего входному значению первого параметра, и заканчивая животным,
     соответствующим входному значению второго параметра.
    </para>
    <programlisting role="php">
<![CDATA[
<?php

$sql = 'CALL match_animal(?, ?, ?)';
$conn = db2_connect($database, $user, $password);
$stmt = db2_prepare($conn, $sql);

$name = "Peaches";
$second_name = "Rickety Ride";
$weight = 0;

db2_bind_param($stmt, 1, "name", DB2_PARAM_IN);
db2_bind_param($stmt, 2, "second_name", DB2_PARAM_INOUT);
db2_bind_param($stmt, 3, "weight", DB2_PARAM_OUT);

print "Values of bound parameters _before_ CALL:\n";
print "  1: {$name} 2: {$second_name} 3: {$weight}\n\n";

if (db2_execute($stmt)) {
    print "Values of bound parameters _after_ CALL:\n";
    print "  1: {$name} 2: {$second_name} 3: {$weight}\n\n";

    print "Results:\n";
    while ($row = db2_fetch_array($stmt)) {
        print "  {$row[0]}, {$row[1]}, {$row[2]}\n";
    }
}
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Values of bound parameters _before_ CALL:
  1: Peaches 2: Rickety Ride 3: 0

Values of bound parameters _after_ CALL:
  1: Peaches 2: TRUE 3: 22

Results:
  Peaches, dog, 12.3
  Pook, cat, 3.2
  Rickety Ride, goat, 9.7
]]>
    </screen>
   </example>
   <example>
    <title>Вставка большого двоичного объекта (BLOB) напрямую из файла</title>
    <para>
     Данные для больших объектов обычно хранятся в файлах, таких как документы
     XML или аудиофайлы. Вместо того, чтобы считывать весь файл в переменную PHP
     и затем связывать эту переменную PHP с SQL-выражением, можно избежать
     некоторых накладных расходов на память, привязав файл напрямую к
     входному параметру SQL-выражения. В данном примере показано, как
     привязать файл напрямую к столбцу BLOB.
    </para>
    <programlisting role="php">
<![CDATA[
<?php
$stmt = db2_prepare($conn, "INSERT INTO animal_pictures(picture) VALUES (?)");

$picture = "/opt/albums/spook/grooming.jpg";
$rc = db2_bind_param($stmt, 1, "picture", DB2_PARAM_FILE);
$rc = db2_execute($stmt);
?>
]]>
    </programlisting>
   </example>

  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>db2_execute</function></member>
    <member><function>db2_prepare</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
