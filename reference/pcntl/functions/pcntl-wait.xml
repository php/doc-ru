<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 7d05fb0d2022805b44a39bafabca8e85e96659cf Maintainer: rjhdby Status: ready -->
<!-- Reviewed: no -->
<refentry xml:id="function.pcntl-wait" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>pcntl_wait</refname>
  <refpurpose>Ожидает или возвращает статус порождённого дочернего процесса</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>int</type><methodname>pcntl_wait</methodname>
   <methodparam><type>int</type><parameter role="reference">status</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>flags</parameter><initializer>0</initializer></methodparam>
   <methodparam choice="opt"><type>array</type><parameter role="reference">resource_usage</parameter><initializer>[]</initializer></methodparam>
  </methodsynopsis>
  <para>
   Функция ожидания приостанавливает выполнение текущего процесса до тех пор,
   пока дочерний процесс не завершится или пока не будет получен сигнал
   который завершает текущий процесс или вызывает функцию обработки сигнала.
   Если дочерний процесс уже завершился ко времени вызова
   (так называемые "зомби" процессы), функция незамедлительно вернёт управление.
   Обратитесь к вашей системному руководству (man) wait(2) для уточнения
   специфики работы wait в вашей системе.
  </para>
  <note>
   <para>
    Эта функция эквивалентна вызову <function>pcntl_waitpid</function>
    с аргументом <parameter>process_id</parameter> равным <literal>-1</literal> и
    без аргумента <parameter>flags</parameter>.
   </para>
  </note>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>status</parameter></term>
     <listitem>
      <para>
       <function>pcntl_wait</function> разместит информацию о статусе
       по ссылке в аргументе <parameter>status</parameter>, который может
       быть передан в следующие функции:
       <function>pcntl_wifexited</function>,
       <function>pcntl_wifstopped</function>,
       <function>pcntl_wifsignaled</function>,
       <function>pcntl_wexitstatus</function>,
       <function>pcntl_wtermsig</function> и
       <function>pcntl_wstopsig</function>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>flags</parameter></term>
     <listitem>
      <para>
       Если системный вызов wait3 (man 2 wait3) доступен в вашей системе (как правило в BSD-подобных системах),
       вы можете задать необязательный аргумент <parameter>flags</parameter>.
       Если этот параметр не задан, будет использован стандартный системный вызов wait.
       Если системный вызов wait3 не доступен для вашей системы, передача значения
       аргумента <parameter>flags</parameter> не будет иметь значения.
       Значение аргумента <parameter>flags</parameter> - это битовая маска,
       которая может принимать значение ноль или более путём логического объединения следующих констант:
       <table>
        <title>Возможные значения для <parameter>flags</parameter></title>
        <tgroup cols="2">
         <tbody>
          <row>
           <entry><literal>WNOHANG</literal></entry>
           <entry>
            Незамедлительно вернуть управление, если ни один из дочерних процессов не завершён
           </entry>
          </row>
          <row>
           <entry><literal>WUNTRACED</literal></entry>
           <entry>
            Вернуть управление для остановленных дочерних процессов, о статусе которых ещё не сообщено
           </entry>
          </row>
         </tbody>
        </tgroup>
       </table>
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   <function>pcntl_wait</function> возвращает ID завершённого дочернего процесса,
   -1 в случае возникновения ошибки или ноль, если <literal>WNOHANG</literal> был передан в аргумент
   <parameter>options</parameter> (на системах с доступным системным вызовом wait3)
   и не было доступных дочерних процессов.
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>pcntl_fork</function></member>
    <member><function>pcntl_signal</function></member>
    <member><function>pcntl_wifexited</function></member>
    <member><function>pcntl_wifstopped</function></member>
    <member><function>pcntl_wifsignaled</function></member>
    <member><function>pcntl_wexitstatus</function></member>
    <member><function>pcntl_wtermsig</function></member>
    <member><function>pcntl_wstopsig</function></member>
    <member><function>pcntl_waitpid</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry><!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
