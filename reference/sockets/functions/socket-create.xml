<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: a871ef72edf436c59422dedd538594db2541d5f1 Maintainer: rjhdby Status: ready -->
<!-- Reviewed: yes Maintainer: lex -->
<refentry xml:id="function.socket-create" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>socket_create</refname>
  <refpurpose>Создаёт сокет (конечную точку для обмена информацией)</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type class="union"><type>Socket</type><type>false</type></type><methodname>socket_create</methodname>
   <methodparam><type>int</type><parameter>domain</parameter></methodparam>
   <methodparam><type>int</type><parameter>type</parameter></methodparam>
   <methodparam><type>int</type><parameter>protocol</parameter></methodparam>
  </methodsynopsis>
  <para>
   Создаёт и возвращает экземпляр <classname>Socket</classname>, также называемый как конечная точка
   обмена информацией. Типичное сетевое соединение состоит из двух сокетов, один из
   которых выполняет роль клиента, а другой выполняет роль сервера.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>domain</parameter></term>
     <listitem>
      <para>
       Параметр  <parameter>domain</parameter> определяет семейство протоколов,
       используемых сокетами.
      </para>
      <table>
       <title>Доступные семейства адресов/протоколов</title>
       <tgroup cols="2">
        <thead>
         <row>
          <entry>Семейство</entry>
          <entry>Описание</entry>
         </row>
        </thead>
        <tbody>
         <row>
          <entry><constant>AF_INET</constant></entry>
          <entry>
           Internet-протоколы IPv4. TCP и UDP - это стандартные протоколы
           этого семейства протоколов.
          </entry>
         </row>
         <row>
          <entry><constant>AF_INET6</constant></entry>
          <entry>
           Internet-протоколы IPv6. TCP и UDP - это стандартные протоколы
           этого семейства протоколов.
          </entry>
         </row>
         <row>
          <entry><constant>AF_UNIX</constant></entry>
          <entry>
           Семейство протоколов для локального обмена данными. Высокая эффективность и
           низкие накладные расходы делают его отличным видом IPC (межпроцессного
           взаимодействия).
          </entry>
         </row>
        </tbody>
       </tgroup>
      </table>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>type</parameter></term>
     <listitem>
      <para>
       Параметр <parameter>type</parameter> определяет тип обмена данными, который будет
       использоваться сокетом.
      </para>
      <table>
       <title>Доступные типы сокетов</title>
       <tgroup cols="2">
        <thead>
         <row>
          <entry>Тип</entry>
          <entry>Описание</entry>
         </row>
        </thead>
        <tbody>
         <row>
          <entry><constant>SOCK_STREAM</constant></entry>
          <entry>
           Обеспечивает последовательные, надёжные, полнодуплексные, байтовые потоки с установлением соединения.
           Может поддерживаться механизм передачи внеполосных (out-of-band) данных.
           Протокол TCP основан на этом типе сокетов.
          </entry>
         </row>
         <row>
          <entry><constant>SOCK_DGRAM</constant></entry>
          <entry>
           Поддерживает датаграммы (ненадёжные сообщения без установления соединения фиксированной максимальной длины).
           Протокол UDP основан на этом типе сокетов.
          </entry>
         </row>
         <row>
          <entry><constant>SOCK_SEQPACKET</constant></entry>
            <entry>
             Предоставляет последовательную, надёжную, двунаправленную, базирующуюся на
             соединениях передачу датаграмм с фиксированной максимальной длиной.
             Потребитель должен читать весь пакет целиком при каждой итерации чтения.
            </entry>
         </row>
         <row>
          <entry><constant>SOCK_RAW</constant></entry>
          <entry>
           Предоставляет доступ по неподготовленному (raw) сетевому протоколу.
           Это специальный тип сокета может быть использован для ручного создания
           любого типа протокола. Стандартное использование
           этого типа сокетов - выполнение запросов ICMP (таких как ping).
          </entry>
         </row>
         <row>
          <entry><constant>SOCK_RDM</constant></entry>
          <entry>
           Предоставляет надёжный уровень датаграм, не гарантирующий сохранение порядка.
           Скорее всего, это семейство протоколов не реализовано в вашей операционной системе.
          </entry>
         </row>
        </tbody>
       </tgroup>
      </table>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>protocol</parameter></term>
     <listitem>
      <para>
       Параметр <parameter>protocol</parameter> указывает конкретный протокол в заданном
       семействе протоколов <parameter>domain</parameter>, который будет использоваться
       в обмене данными с созданным сокетом. Соответствующее значение может быть
       получено по имени при помощи функции <function>getprotobyname</function>. Если
       желаемый протокол TCP или UDP, то соответствующие константы
       <constant>SOL_TCP</constant> и <constant>SOL_UDP</constant>
       также могут быть использованы.
      </para>
      <table>
       <title>Стандартные протоколы</title>
       <tgroup cols="2">
        <thead>
         <row>
          <entry>Название</entry>
          <entry>Описание</entry>
         </row>
        </thead>
        <tbody>
         <row>
          <entry>icmp</entry>
          <entry>
           ICMP (Internet Control Message Protocol, протокол межсетевых управляющих сообщений)
           используется преимущественно шлюзами и хостами для сообщения об ошибках в
           передаче датаграмм. Команда "ping" (присутствующая в большинстве современных
           операционных систем) - это пример использования ICMP-протокола.
          </entry>
         </row>
         <row>
          <entry>udp</entry>
          <entry>
           UDP (User Datagram Protocol, протокол пользовательских датаграмм) - это протокол без
           установления соединения, ненадёжный, протокол с фиксированной длиной записей.
           Из-за этих аспектов, UDP требует минимального количества служебной информации.
          </entry>
         </row>
         <row>
          <entry>tcp</entry>
          <entry>
           TCP (The Transmission Control Protocol, протокол управления передачей) - это надёжный,
           базирующийся на соединениях, потокоориентированный, полнодуплексный протокол.
           TCP гарантирует, что все пакеты данных будут получены в том порядке, в котором они
           были отправлены. Если какой-нибудь пакет каким-либо образом был утерян во время
           передачи данных, TCP будет автоматически передавать пакет повторно до тех пор, пока
           хост назначения не подтвердит этот пакет. В целях надёжности и производительности,
           реализация протокола TCP сама выбирает подходящие границы октета нижележащего
           уровня обмена датаграммами. Таким образом, приложения, использующие TCP,
           должны предоставлять возможность частичной передачи записей.
          </entry>
         </row>
        </tbody>
       </tgroup>
      </table>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Функция <function>socket_create</function> возвращает экземпляр <classname>Socket</classname> в случае успешного выполнения,
   или &false; в случае возникновения ошибки. Код ошибки может быть получен при помощи вызова
   функции <function>socket_last_error</function>. Эта ошибка может быть передана
   функции <function>socket_strerror</function> для получения текстового описания
   ошибки.
  </para>
 </refsect1>

 <refsect1 role="errors">
  &reftitle.errors;
  <para>
   Если указан неверный параметр <parameter>domain</parameter> или
   <parameter>type</parameter>, функция <function>socket_create</function>
   будет использовать по умолчанию значение <constant>AF_INET</constant> и
   <constant>SOCK_STREAM</constant> соответственно, и дополнительно к этому выдаст
   сообщение <constant>E_WARNING</constant>.
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <informaltable>
   <tgroup cols="2">
    <thead>
     <row>
      <entry>&Version;</entry>
      <entry>&Description;</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry>8.0.0</entry>
      <entry>
       В случае успешного выполнения функция возвращает экземпляр <classname>Socket</classname>;
       ранее возвращался ресурс (<type>resource</type>).
      </entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>socket_accept</function></member>
    <member><function>socket_bind</function></member>
    <member><function>socket_connect</function></member>
    <member><function>socket_listen</function></member>
    <member><function>socket_last_error</function></member>
    <member><function>socket_strerror</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry><!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
