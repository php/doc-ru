<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 14dc7c47365f2b71f6c907a5ba5bccf42534d5a9 Maintainer: lex Status: ready -->
<!-- Reviewed: no -->
<refentry xml:id="function.socket-select" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>socket_select</refname>
  <refpurpose>Запускает системный вызов select() для заданных массивов сокетов с указанным тайм-аутом</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type class="union"><type>int</type><type>false</type></type><methodname>socket_select</methodname>
   <methodparam><type class="union"><type>array</type><type>null</type></type><parameter role="reference">read</parameter></methodparam>
   <methodparam><type class="union"><type>array</type><type>null</type></type><parameter role="reference">write</parameter></methodparam>
   <methodparam><type class="union"><type>array</type><type>null</type></type><parameter role="reference">except</parameter></methodparam>
   <methodparam><type class="union"><type>int</type><type>null</type></type><parameter>seconds</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>microseconds</parameter><initializer>0</initializer></methodparam>
  </methodsynopsis>
  <para>
   <function>socket_select</function> принимает массивы сокетов и ждёт
   их изменения статуса. Те, кто знаком с сокетами BSD, обнаружат, что
   массивы сокетов на самом деле являются так называемыми наборами
   дескрипторов файлов. Наблюдаются три независимых массива ресурсов сокетов.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>read</parameter></term>
     <listitem>
      <para>
       Сокеты, перечисленные в массиве <parameter>read</parameter> будут
       наблюдаться для просмотра, есть ли доступные символы для чтения (
       точнее, чтобы видеть, не будет ли чтение блокироваться, в частности,
       сокет уже достиг конца файла, и в этом случае
       <function>socket_read</function> вернёт строку с нулевой длиной).
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>write</parameter></term>
     <listitem>
      <para>
       Сокеты, перечисленные в массиве <parameter>write</parameter> будут
       наблюдаться для просмотра, не будет ли запись блокироваться.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>except</parameter></term>
     <listitem>
      <para>
       Сокеты, перечисленные в массиве <parameter>except</parameter> будут
       наблюдаться для исключений.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>seconds</parameter></term>
     <listitem>
      <para>
       <parameter>seconds</parameter> и <parameter>microseconds</parameter>
       вместе образуют параметр <literal>timeout</literal>. Параметр
       <literal>timeout</literal> - максимальный промежуток времени до возврата
       <function>socket_select</function>.
       <parameter>seconds</parameter> может быть нулём, заставляя
       <function>socket_select</function> к немедленному возврату. Это полезно для
       опроса. Если <parameter>seconds</parameter> равен &null; (нет тайм-аута),
       <function>socket_select</function> может блокироваться бесконечно.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>microseconds</parameter></term>
     <listitem>
      <para>
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
  <warning>
   <para>
    При завершении массивы изменяются для обозначения, какой сокет
    на самом деле изменил статус.
   </para>
  </warning>
  <para>
   Не требуется передавать каждый массив в
   <function>socket_select</function>. Вы можете пропустить его и использовать
   пустой массив или &null; вместо этого. Также не забывайте, что эти массивы
   передаются <emphasis>по ссылке</emphasis> и будут изменены после завершения
   <function>socket_select</function>.
  </para>
  <note>
   <para>
    Из-за ограничения текущего движка Zend невозможно передать модификатор
    константы, такой как &null;, непосредственно в качестве параметра в функцию,
    которая ожидает, что этот параметр будет передан по ссылке. Вместо этого используйте
    временную переменную или выражение, где левая сторона является временной переменной:
    <example>
     <title>Использование &null; в <function>socket_select</function></title>
     <programlisting role="php">
<![CDATA[
<?php
$e = NULL;
socket_select($r, $w, $e, 0);
?>
]]>
     </programlisting>
    </example>
   </para>
  </note>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   В случае успешного выполнения <function>socket_select</function> возвращает количество
   сокетов, содержащихся в изменённых массивах, которое может быть равно нулю,
   если время ожидания истечёт до того, как произойдёт что-то интересное. В случае возникновения ошибки возвращается &false;.
   Код ошибки может быть получен с помощью
   <function>socket_last_error</function>.
  </para>
  <note>
   <para>
    Обязательно используйте оператор <literal>===</literal> при проверке
    на ошибку. Поскольку <function>socket_select</function> может возвращать 0,
    сравнение с <literal>==</literal> будет оцениваться как &true;:
    <example>
     <title>Анализ результата <function>socket_select</function></title>
     <programlisting role="php">
<![CDATA[
<?php
$e = NULL;
if (false === socket_select($r, $w, $e, 0)) {
    echo "Неудачный вызов socket_select(), причина: " .
        socket_strerror(socket_last_error()) . "\n";
}
?>
]]>
     </programlisting>
    </example>
   </para>
  </note>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Пример использования <function>socket_select</function></title>
    <programlisting role="php">
<![CDATA[
<?php
/* Подготовить массив сокетов для чтения */
$read   = array($socket1, $socket2);
$write  = NULL;
$except = NULL;
$num_changed_sockets = socket_select($read, $write, $except, 0);

if ($num_changed_sockets === false) {
    /* Обработка ошибок */
} else if ($num_changed_sockets > 0) {
    /* По крайней мере, в одном из сокетов произошло что-то интересное */
}
?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  <note>
   <para>
    Имейте в виду, что некоторые реализации сокетов необходимо обрабатывать
    очень осторожно. Несколько основных правил:
    <itemizedlist>
     <listitem>
      <simpara>
       Вы всегда должны попытаться использовать <function>socket_select</function>
       без тайм-аута. Ваша программа ничего не должна делать, если нет доступных
       данных. Код, зависящий от тайм-аутов, обычно не очень переносим и
       труден для отладки.
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       Сокет не должен добавляться к любому из массивов, если вы не собираетесь
       проверять результат после вызова <function>socket_select</function>.
       После возврата <function>socket_select</function>
       все сокеты во всех массивах должны быть проверены. Любой
       сокет, доступный для записи или чтения, должен использоваться для записи или чтения.
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       Если вы читаете или записываете из сокета, возвращаемого в массивах, имейте в виду,
       что он необязательно сможет прочитать или записать полностью запрашиваемые вами
       данные. Будьте готовы прочитать или записать только один байт.
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       Обычно для большинства реализаций сокетов единственное исключение, пойманное
       с помощью массива <parameter>except</parameter> - это данные без привязки,
       полученные в сокете.
      </simpara>
     </listitem>
    </itemizedlist>
   </para>
  </note>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>socket_read</function></member>
    <member><function>socket_write</function></member>
    <member><function>socket_last_error</function></member>
    <member><function>socket_strerror</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry><!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
