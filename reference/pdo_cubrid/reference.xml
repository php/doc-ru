<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 68c2c871505aadf983f16113c5b077b335ce8d76 Maintainer: rjhdby Status: ready -->
<!-- Reviewed: yes Maintainer: lex -->
<reference xml:id="ref.pdo-cubrid" xmlns="http://docbook.org/ns/docbook">
 <?phpdoc extension-membership="pecl" ?>
 <title>Функции CUBRID (PDO_CUBRID)</title>
 <titleabbrev>CUBRID (PDO)</titleabbrev>
 <partintro>

  <section xml:id="pdo-cubrid.intro">
   &reftitle.intro;
    <para>
     PDO_CUBRID - драйвер, реализующий <link linkend="intro.pdo">интерфейс PHP Data Objects (PDO)</link> для доступа к базам данных CUBRID.
    </para>
    <note>
     <para>
      Текущая версия PDO_CUBRID не поддерживает постоянные соединения.
     </para>
    </note>
   </section>

   <!-- Information found in configure.xml -->
   &reference.pdo-cubrid.configure;

   <section xml:id="ref.pdo-cubrid.features">
    <title>&Features;</title>
    <table>
     <title>&Features; PDO_CUBRID</title>
     <tgroup cols="2">
      <thead>
       <row>
        <entry>&Features;</entry>
        <entry>&Description;</entry>
       </row>
      </thead>
      <tbody>
       <row>
        <entry>Перематываемые курсоры</entry>
        <entry>
         PDO_CUBRID поддерживает перематываемые курсоры. Типом курсора по умолчанию
         является "forward only" (только вперёд), для его изменения можно использовать
         параметр driver_options в <function>PDO::prepare</function>.
        </entry>
       </row>
       <row>
        <entry>Тайм-аут</entry>
        <entry>PDO_CUBRID поддерживает настройку тайм-аута выполнения SQL-запроса.;
         Для его настройки используйте метод <function>PDO::setAttribute</function>.</entry>
       </row>
       <row>
        <entry>Режим автоподтверждения и транзакции</entry>
        <entry>
         PDO_CUBRID поддерживает как режим автоподтверждения, так и работу с транзакциями.
         По умолчанию используется режим автоподтверждения. Для изменения режима
         используйте метод <function>PDO::setAttribute</function>.

         <para>
          Если вы используете <function>PDO::beginTransaction</function> для
          старта транзакции, то автоподтверждение будет автоматически запрещено и
          снова разрешено после <function>PDO::commit</function> или
          <function>PDO::rollBack</function>. Обратите внимание, что перед
          отключением автоподтверждения, все ожидающие запросы будут автоматически
          подтверждены.
         </para>
        </entry>
       </row>
       <row>
        <entry>Множественные SQL-запросы</entry>
        <entry>PDO_CUBRID поддерживает множественные SQL-запросы. Множественные
         SQL-запросы разделяются точкой с запятой (;)</entry>
       </row>
       <row>
        <entry>Информация о схеме</entry>
        <entry>PDO_CUBRID реализует функцию
         <function>PDO::cubrid_schema</function> для получения информации о схеме.
        </entry>
       </row>
       <row>
        <entry>LOBs</entry>
        <entry>PDO_CUBRID поддерживает типы данных BLOB/CLOB. LOB в PDO
         представляется как поток, следовательно вы можете вставлять LOB путём
         связывания с потоком и получать LOB путём чтения из потока, возвращённого
         CUBRID PDO. К примеру:

         <para>
          <example><title>Вставка LOB в CUBRID PDO</title>
           <programlisting role="php">
<![CDATA[
<?php
$fp = fopen('lob_test.png', 'rb');

$sql_stmt = "INSERT INTO lob_test(name, content) VALUES('lob_test.png', ?)";

$stmt = $dbh->prepare($sql_stmt);
$ret = $stmt->bindParam(1, $fp, PDO::PARAM_LOB);
$ret = $stmt->execute();
?>
]]>
           </programlisting>
          </example>
         </para>
         <para>
          <example><title>Получение LOB в CUBRID PDO</title>
           <programlisting role="php">
<![CDATA[
<?php
$sql_stmt = "SELECT content FROM lob_test WHERE name='lob_test.png'";

$stmt = $dbh->prepare($sql_stmt);
$stmt->execute();
$result = $stmt->fetch(PDO::FETCH_NUM);

header("Content-Type: image/png");
fpassthru($result[0]);
?>
]]>
           </programlisting>
          </example>
         </para>
        </entry>
       </row>
       <row>
        <entry>Метаинформация о столбцах</entry>
        <entry>
         Метод <function>PDOStatement::getColumnMeta</function> в CUBRID PDO
         вернёт ассоциативный массив, содержащий следующие значения:
         <simplelist>
          <member>type</member>
          <member>name</member>
          <member>table</member>
          <member>def</member>
          <member>precision</member>
          <member>scale</member>
          <member>not_null</member>
          <member>auto_increment</member>
          <member>unique_key</member>
          <member>multiple_key</member>
          <member>primary_key</member>
          <member>foreign_key</member>
          <member>reverse_index</member>
          <member>reverse_unique</member>
         </simplelist>
        </entry>
       </row>
       <row>
        <entry>Тип данных Коллекция</entry>
        <entry>PDO_CUBRID поддерживает типы данных SET/MULTISET/SEQUENCE.
         Если вы явно не указываете тип данных, то по умолчанию будет использоваться
         char. К примеру:
         <para>
          <example><title>Вставка коллекции в CUBRID PDO с типом данных по умолчанию.</title>
           <programlisting role="php">
<![CDATA[
<?php
$conn_str ="cubrid:dbname=demodb;host=localhost;port=33000";
$cubrid_pdo = new PDO($conn_str, 'dba', '');

$cubrid_pdo->exec("DROP TABLE if exists test_tbl");
$cubrid_pdo->exec("CREATE TABLE test_tbl (col_1 SET(VARCHAR))");

$sql_stmt_insert = "INSERT INTO test_tbl VALUES (?);";
$stmt = $cubrid_pdo->prepare($sql_stmt_insert);
$data = array("abc","def","ghi");
$ret = $stmt->bindParam(1, $data, PDO::PARAM_NULL);
$ret = $stmt->execute();
var_Dump($ret);
?>
]]>
           </programlisting>
          </example>
         </para>
         <para>
          <example><title>Указание типа данных при вставке коллекции в CUBRID PDO</title>
           <programlisting role="php">
<![CDATA[
<?php
$conn_str ="cubrid:dbname=demodb;host=localhost;port=33000";
$cubrid_pdo = new PDO($conn_str, 'dba', '');

$cubrid_pdo->exec("DROP TABLE if exists test_tbl");
$cubrid_pdo->exec("CREATE TABLE test_tbl (col_1 SET(int))");

$sql_stmt_insert = "INSERT INTO test_tbl VALUES (?);";
$stmt = $cubrid_pdo->prepare($sql_stmt_insert);
$data = array(1,2,3,4);
$ret = $stmt->bindParam(1, $data, 0,0,"int");
$ret = $stmt->execute();
var_Dump($ret);
?>
]]>
           </programlisting>
          </example>
         </para>
         Типы данных CUBRID:(пятый параметр PDOStatement::bindParam):
         <simplelist>
          <member>CHAR</member>
          <member>STRING</member>
          <member>NCHAR</member>
          <member>VARNCHAR</member>
          <member>BIT</member>
          <member>VARBIT</member>
          <member>NUMERIC</member>
          <member>NUMBER</member>
          <member>INT</member>
          <member>SHORT</member>
          <member>BIGINT</member>
          <member>MONETARY</member>
          <member>FLOAT</member>
          <member>DOUBLE</member>
          <member>DATE</member>
          <member>TIME</member>
          <member>DATETIME</member>
          <member>TIMESTAMP</member>
         </simplelist>
        </entry>
       </row>
      </tbody>
     </tgroup>
    </table>
   </section>

   <!-- Information found in constants.xml -->
   &reference.pdo-cubrid.constants;

  </partintro>

  <refentry xml:id="ref.pdo-cubrid.connection">
   <refnamediv>
    <refname>PDO_CUBRID DSN</refname>
    <refpurpose>Соединение с базой данных CUBRID</refpurpose>
   </refnamediv>

   <refsect1 role="description">
    &reftitle.description;
    <para>
     Имя источника данных (Data Source Name, DSN) PDO_CUBRID  состоит из следующих
     элементов, разделённых точкой с запятой:
     <variablelist>
      <varlistentry>
       <term>Префикс DSN</term>
       <listitem>
        <para>
         <userinput>cubrid:</userinput>.
        </para>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term><literal>host</literal></term>
       <listitem>
        <para>
         Имя хоста, на котором развёрнута база данных.
        </para>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term><literal>port</literal></term>
       <listitem>
        <para>
         Порт, на котором база данных слушает подключения.
        </para>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term><literal>dbname</literal></term>
       <listitem>
        <para>
         Имя базы данных.
        </para>
       </listitem>
      </varlistentry>
     </variablelist>
    </para>
   </refsect1>

   <refsect1 role="notes">
    &reftitle.notes;
    <note>
     <para>
      При соединении с CUBRID вы должны указать имя пользователя и пароль.
     </para>
    </note>
   </refsect1>

   <refsect1 role="examples">
    &reftitle.examples;
    <para>
     <example>
      <title>Пример PDO_CUBRID DSN</title>
      <para>
       Следующий пример демонстрирует PDO_CUBRID DSN для соединения с базой CUBRID:
<programlisting><![CDATA[
cubrid:host=localhost;port=33000;dbname=demodb
]]>
       </programlisting>
      </para>
     </example>
    </para>
   </refsect1>
  </refentry>

  &reference.pdo-cubrid.entities.PDO;

</reference>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
