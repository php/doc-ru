<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: f32912d04f3da53ad720bd782ad5a2483a1d79a0 Maintainer: tmn Status: ready -->
<!-- Reviewed: no -->
<refentry xmlns:xlink="http://www.w3.org/1999/xlink" xmlns="http://docbook.org/ns/docbook" xml:id="function.header">
 <refnamediv>
  <refname>header</refname>
  <refpurpose>
   Отправка HTTP-заголовка
  </refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>void</type><methodname>header</methodname>
   <methodparam><type>string</type><parameter>header</parameter></methodparam>
   <methodparam choice="opt"><type>bool</type><parameter>replace</parameter><initializer>&true;</initializer></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>response_code</parameter><initializer>0</initializer></methodparam>
  </methodsynopsis>
  <para>
   <function>header</function> используется для отправки <acronym>HTTP</acronym>-заголовка.
   В <link xlink:href="&url.rfc;2616">спецификации HTTP/1.1</link>
   есть подробное описание <acronym>HTTP</acronym>-заголовков.
  </para>
  <para>
   Помните, что функцию <function>header</function> можно вызывать только
   если клиенту ещё не передавались данные. То есть она должна идти первой в
   выводе, перед её вызовом не должно быть никаких HTML-тегов, пустых строк и т.п.
   Довольно часто возникает ошибка, когда при чтении кода файловыми функциями,
   вроде <function>include</function> или <function>require</function>, в этом
   коде попадаются пробелы или пустые строки, которые выводятся до вызова
   <function>header</function>. Те же проблемы могут возникать и при использовании
   PHP/HTML в одном файле.
   <informalexample>
    <programlisting role="php">
<![CDATA[
<html>
<?php
/* Этот пример приведёт к ошибке. Обратите внимание
 * на тег вверху, который будет выведен до вызова header() */
header('Location: http://www.example.com/');
exit;
?>
]]>
    </programlisting>
   </informalexample>
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>header</parameter></term>
     <listitem>
      <para>
       Строка заголовка.
      </para>
      <para>
       Существует два специальных заголовка. Один из них начинается с
       "<literal>HTTP/</literal>" (регистр не важен) и используется для
       отправки кода состояния HTTP. Например, если веб-сервер Apache
       сконфигурирован таким образом, чтобы запросы к несуществующим файлам
       обрабатывались средствами PHP-скрипта (используя директиву
       <literal>ErrorDocument</literal>), вы наверняка захотите убедиться,
       что скрипт генерирует правильный код состояния.
      </para>
      <para>
       <informalexample>
        <programlisting role="php">
<![CDATA[
<?php
// Этот пример иллюстрирует особый случай "HTTP/".
// Лучшие альтернативы в типичных случаях использования включают:
// 1. header($_SERVER["SERVER_PROTOCOL"] . " 404 Not Found");
//    (чтобы переопределить сообщения о состоянии http для клиентов, которые все еще используют HTTP/1.0)
// 2. http_response_code(404); (для использования сообщения по умолчанию)
header("HTTP/1.1 404 Not Found");
?>
]]>
        </programlisting>
       </informalexample>
      </para>
      <para>
       Другим специальным видом заголовков является "Location:". В этом случае
       функция не только отправляет этот заголовок браузеру, но также возвращает
       ему код состояния <literal>REDIRECT</literal> (302), если ранее не был
       установлен код <literal>201</literal> или <literal>3xx</literal>.
      </para>
      <para>
       <informalexample>
        <programlisting role="php">
<![CDATA[
<?php
header("Location: http://www.example.com/"); /* Перенаправление браузера */

/* Убедиться, что код ниже не выполнится после перенаправления .*/
exit;
?>
]]>
        </programlisting>
       </informalexample>
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>replace</parameter></term>
     <listitem>
      <para>
       Необязательный параметр <parameter>replace</parameter> определяет, надо
       ли заменять предыдущий аналогичный заголовок или заголовок того же типа.
       По умолчанию заголовок будет заменён, но если передать &false;, можно
       задать несколько однотипных заголовков. Например:
      </para>
      <para>
       <informalexample>
        <programlisting role="php">
<![CDATA[
<?php
header('WWW-Authenticate: Negotiate');
header('WWW-Authenticate: NTLM', false);
?>
]]>
        </programlisting>
       </informalexample>
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>response_code</parameter></term>
     <listitem>
      <para>
       Принудительно задаёт код ответа HTTP. Следует учитывать, что это будет
       работать, только если строка <parameter>header</parameter> не является
       пустой.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.void;
  </para>
 </refsect1>

 <refsect1 role="errors">
  &reftitle.errors;
  <para>
   Если не удалось запланировать отправку заголовка, <function>header</function>
   выдаёт ошибку уровня <constant>E_WARNING</constant>.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Диалог загрузки</title>
    <para>
     Если нужно предупредить пользователя о необходимости сохранить пересылаемые
     данные, такие как сгенерированный PDF-файл, можно воспользоваться заголовком
     <link xlink:href="&url.rfc;2183">Content-Disposition</link>, который
     подставляет рекомендуемое имя файла и заставляет браузер показать диалог
     загрузки.
    </para>
    <programlisting role="php">
<![CDATA[
<?php
// Будем передавать PDF
header('Content-Type: application/pdf');

// Он будет называться downloaded.pdf
header('Content-Disposition: attachment; filename="downloaded.pdf"');

// Исходный PDF-файл original.pdf
readfile('original.pdf');
?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   <example>
    <title>Директивы для работы с кешем</title>
    <para>
     PHP-скрипты часто генерируют динамический контент, который не должен
     кешироваться клиентским браузером или какими-либо промежуточными
     обработчиками, вроде прокси-серверов. Можно принудительно отключить
     кеширование на многих прокси-серверах и браузерах, передав заголовки:
    </para>
    <programlisting role="php">
<![CDATA[
<?php
header("Cache-Control: no-cache, must-revalidate"); // HTTP/1.1
header("Expires: Sat, 26 Jul 1997 05:00:00 GMT"); // Дата в прошлом
?>
]]>
    </programlisting>
    <para>
     <note>
      <para>
       В некоторых случаях ваши страницы не будут кешироваться браузером, даже
       если вы не передавали этих заголовков. В браузерах есть определённые
       настройки, с помощью которых пользователь может изменять обычный ход
       кеширования, отключать его. Вы должны переопределять любые настройки,
       которые могут повлиять на кеширование скрипта, отправляя приведённые
       выше заголовки.
      </para>
      <para>
       Кроме того, для случаев когда используются сессии, можно задать настройки
       конфигурации <function>session_cache_limiter</function> и
       <literal>session.cache_limiter</literal>. Эти настройки можно использовать
       для автоматической генерации заголовков управляющих кешированием.
      </para>
     </note>
    </para>
   </example>
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  &note.network.header.sapi;
  <note>
   <para>
    Чтобы обойти эту проблему, можно буферизовать вывод скрипта. В этом случае
    все выводимые данные будут буферизоваться на сервере, пока не будет дана
    явная команда на пересылку данных. Управлять буферизацией можно вручную
    функциями <function>ob_start</function> и <function>ob_end_flush</function>,
    либо задав директиву <literal>output_buffering</literal> в конфигурационном
    файле &php.ini;, или же настроив соответствующим образом конфигурацию сервера.
   </para>
  </note>
  <note>
   <para>
    Строка заголовка состояния HTTP всегда будет отсылаться клиенту
    первой, вне зависимости от того был соответствующий вызов функции
    <function>header</function> первым или нет. Это состояние можно перезаписать,
    вызывая <function>header</function> с новой строкой состояния в любое время,
    когда можно отправлять HTTP-заголовки.
   </para>
  </note>
  <note>
   <para>
    Спецификация HTTP/1.1 требует указывать абсолютный <acronym>URI</acronym>
    в качестве аргумента <link xlink:href="&spec.http1.1;#section-7.1.2">Location:</link>,
    включающий схему, имя хоста и абсолютный путь, хотя некоторые клиенты
    способны принимать и относительные URI. Абсолютный URI можно построить
    самостоятельно с помощью <varname>$_SERVER['HTTP_HOST']</varname>,
    <varname>$_SERVER['PHP_SELF']</varname> и <function>dirname</function>:
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
/* Перенаправление браузера на другую страницу в той же директории, что и
изначально запрошенная */
$host  = $_SERVER['HTTP_HOST'];
$uri   = rtrim(dirname($_SERVER['PHP_SELF']), '/\\');
$extra = 'mypage.php';
header("Location: http://$host$uri/$extra");
exit;
?>
]]>
     </programlisting>
    </informalexample>
   </para>
  </note>
  <note>
   <para>
    Идентификатор сессии не будет передаваться вместе с заголовком Location, даже если
    включена настройка <link linkend="ini.session.use-trans-sid">session.use_trans_sid</link>. Его нужно
    передавать вручную, используя константу <constant>SID</constant>.
   </para>
  </note>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>headers_sent</function></member>
    <member><function>setcookie</function></member>
    <member><function>http_response_code</function></member>
    <member><function>header_remove</function></member>
    <member><function>header_list</function></member>
    <member>
     Раздел документации <link linkend="features.http-auth">HTTP-аутентификации</link>
    </member>
   </simplelist>
  </para>
 </refsect1>

</refentry><!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
