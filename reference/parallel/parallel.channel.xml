<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: d9ecfba6ad07e4e0b1b13ed1f0592f09d2e2f5c9 Maintainer: sergey Status: ready -->
<!-- Reviewed: no -->
<phpdoc:classref xml:id="class.parallel-channel" xmlns:phpdoc="http://php.net/ns/phpdoc" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude">

 <title>Класс parallel\Channel</title>
 <titleabbrev>parallel\Channel</titleabbrev>

 <partintro>
  <section>
    <title>Небуферизованные каналы</title>
    <para>
     Небуферизованный канал будет блокироваться при вызовах <methodname>parallel\Channel::send</methodname> до тех пор, пока не появится получатель, и блокироваться при вызовах 
     <methodname>parallel\Channel::recv</methodname> до тех пор, пока не появится отправитель. Это означает, что небуферизованный канал - это не только способ обмена данными между задачами,
     но и простой метод синхронизации.
    </para>
    <para>
     Небуферизованный канал - это самый быстрый способ обмена данными между задачами, требующий наименьшего количества копирования.
    </para>
  </section>

  <section>
    <title>Буферизованные каналы</title>
    <para>
     Буферизованный канал не будет блокироваться при вызовах <methodname>parallel\Channel::send</methodname> до заполнения буфера, а вызовы
     <methodname>parallel\Channel::recv</methodname> будут блокироваться до тех пор, пока в буфере есть данные.
    </para>
  </section>

  <section>
    <title>Замыкания поверх каналов</title>
    <para>
     Мощная особенность параллельных каналов состоит в том, что они позволяют обмениваться замыканиями между задачами (и средами выполнения).
    </para>
    <para>
     Когда замыкание отправляется по каналу, оно буферизуется, не меняет буферизацию канала, передающего замыкание,
     но оно влияет на статическую область видимости внутри замыкания: одно и то же замыкание, отправленное в разные среды выполнения или в одну и ту же среду выполнения,
     не будет делиться своей статической областью.
    </para>
    <para>
     Это означает, что всякий раз, когда выполняется замыкание, которое было передано каналом, статическое состояние будет таким, каким оно было при буферизации замыкания.
    </para>
  </section>

  <section>
   <title>Анонимные каналы</title>
   <para>
    Конструктор анонимного канала позволяет программисту избегать присвоения имён каждому каналу: parallel генерирует уникальное имя для анонимных каналов.
   </para>
  </section>

  <section xml:id="parallel-channel.synopsis">
   &reftitle.classsynopsis;

<!-- {{{ Synopsis -->
   <classsynopsis>
    <ooclass><classname>parallel\Channel</classname></ooclass>

<!-- {{{ Class synopsis -->
    <classsynopsisinfo>
     <ooclass>
      <modifier>final</modifier>
      <classname>parallel\Channel</classname>
     </ooclass>
    </classsynopsisinfo>
<!-- }}} -->

    <classsynopsisinfo role="comment">Анонимный конструктор</classsynopsisinfo>
    <xi:include xpointer="xmlns(db=http://docbook.org/ns/docbook) xpointer(id('class.parallel-channel')/db:refentry/db:refsect1[@audience='anonymous']/descendant::db:methodsynopsis[not(@role='procedural')])">
     <xi:fallback />
    </xi:include>

    <classsynopsisinfo role="comment">Доступ</classsynopsisinfo>
    <xi:include xpointer="xmlns(db=http://docbook.org/ns/docbook) xpointer(id('class.parallel-channel')/db:refentry/db:refsect1[@audience='access']/descendant::db:methodsynopsis[not(@role='procedural')])">
     <xi:fallback />
    </xi:include>

    <classsynopsisinfo role="comment">Совместное использование</classsynopsisinfo>
    <xi:include xpointer="xmlns(db=http://docbook.org/ns/docbook) xpointer(id('class.parallel-channel')/db:refentry/db:refsect1[@audience='sharing']/descendant::db:methodsynopsis[not(@role='procedural')])">
     <xi:fallback />
    </xi:include>

    <classsynopsisinfo role="comment">Закрытие</classsynopsisinfo>
    <xi:include xpointer="xmlns(db=http://docbook.org/ns/docbook) xpointer(id('class.parallel-channel')/db:refentry/db:refsect1[@audience='close']/descendant::db:methodsynopsis[not(@role='procedural')])">
     <xi:fallback />
    </xi:include>

    <classsynopsisinfo role="comment">Константа для бесконечной буферизации</classsynopsisinfo>
    <fieldsynopsis>
     <modifier>const</modifier>
     <varname>Infinite</varname>
    </fieldsynopsis>

   </classsynopsis>
<!-- }}} -->

  </section>

 </partintro>

 &reference.parallel.parallel.channel.construct;
 &reference.parallel.parallel.channel.make;
 &reference.parallel.parallel.channel.open;
 &reference.parallel.parallel.channel.recv;
 &reference.parallel.parallel.channel.send;
 &reference.parallel.parallel.channel.close;

</phpdoc:classref>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
