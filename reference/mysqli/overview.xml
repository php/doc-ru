<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 40667918dcff1d5c9f7ecdc88b5caca24ba0686c Maintainer: tmn Status: ready -->
<!-- Reviewed: no -->
<chapter xml:id="mysqli.overview" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">

  <title>Краткий обзор</title>

  <para>
   Раздел описывает инструменты, которые помогают программистам разрабатывать PHP-приложения,
   которые взаимодействуют с базой данных MySQL.
  </para>

  <para>
   <emphasis role="bold">Об API-интерфейсе</emphasis>
  </para>

  <para>
   Программный интерфейс приложения (англ. Application Programming Interface, API)
   определяет набор классов, методов, функций и переменных, к которым приложению потребуется обращаться,
   чтобы выполнить поставленные задачи. PHP-приложения взаимодействуют с базами данных через API-интерфейсы,
   которые приложениям обычно открывают PHP-модули.
  </para>

  <para>
   Программисты взаимодействуют с модулями через процедурный или объектно-ориентированный API-интерфейс.
   При работе через процедурный API задачи выполняют путём вызова функций,
   при взаимодействии через объектно-ориентированный API-интерфейс создают экземпляры классов,
   а затем вызывают методы этих объектов. Из этих двух интерфейсов часто выбирают последний,
   поскольку код в объектно-ориентированном стиле лучше организован, что снижает сложность
   восприятия кода и упрощает тестирование и поддержку.
  </para>

  <para>
   Язык программирования PHP предлагает разработчикам несколько API-интерфейсов,
   через которые PHP-приложения взаимодействуют с базами данных MySQL.
   Документ описывает эти интерфейсы и даёт рекомендации
   по выбору конкретного способа подключения к базе данных из приложения.
  </para>

  <para>
   <emphasis role="bold">О коннекторе</emphasis>
  </para>

  <para>
   В MySQL-документации термин <emphasis>коннектор</emphasis> (англ. connector) относится
   к части программного обеспечения, которая разрешает приложению подключаться к серверу баз данных MySQL.
   БД MySQL предоставляет коннекторы для разных языков
   программирования, включая язык PHP.
  </para>

  <para>
   Разработчику потребуется написать PHP-код, чтобы PHP-приложение научилось взаимодействовать
   с сервером баз данных: подключаться, отправлять запросы
   и выполнять другие операции, которые связаны с базой данных.
   Серверу баз данных потребуется ПО, чтобы предоставить API-интерфейс,
   через который PHP-приложение будет взаимодействовать с сервером,
   и чтобы управлять обменом информацией между приложением и сервером баз данных,
   для чего иногда также требуются промежуточные библиотеки.
   Это программное обеспечение называется коннектором, поскольку разрешает приложению
   <emphasis>подключаться</emphasis> (англ. to connect) к серверу баз данных.
  </para>

  <para>
   <emphasis role="bold">О драйвере</emphasis>
  </para>

  <para>
   Драйвер — часть программного обеспечения, которую разработали
   для взаимодействия приложения с конкретным типом сервера баз данных.
   Приложение вызывает методы коннектора, тот обращается к своему драйверу конкретной СУБД,
   а драйвер со своей стороны обращается к нижележащим библиотекам —
   клиентской библиотеке MySQL Client Library или встроенному драйверу MySQL Native Driver.
   Эти библиотеки реализуют низкоуровневый протокол взаимодействия с MySQL-сервером баз данных.
  </para>

  <para>
   Например, PHP-модуль <link linkend="mysqli.overview.pdo">PDO</link>, который поддерживает доступ
   к базам данных на уровне абстракции, содержит набор драйверов для доступа к конкретным базам данных.
   В список доступных модулю драйверов входит драйвер PDO_MYSQL,
   который разрешает модулю PDO взаимодействовать с сервером MySQL.
  </para>

  <para>
   Термины «коннектор» и «драйвер» иногда употребляют как синонимы,
   это сбивает с толку. В MySQL-документации термин <quote>драйвер</quote>
   зарезервировали за программным обеспечением, которое предоставляет
   часть пакета коннектора для конкретной базы данных.
  </para>

  <para>
    <emphasis role="bold">О модуле</emphasis>
  </para>

  <para>
   В PHP-документации встречается ещё один термин — <emphasis>модуль</emphasis>.
   Код самого PHP состоит из ядра и дополнительных модулей, которые расширяют
   функциональность ядра. Для работы с СУБД MySQL ядро PHP расширили модулем
   <literal>mysqli</literal> и модулем PDO с MySQL-драйвером. Оба модуля включили
   в инфраструктуру модулей языка PHP.
  </para>

  <para>
   Обычно модули предоставляют PHP-программисту API-интерфейс,
   через который разработчик получает доступ к функциям модуля программно.
   При этом отдельные модули в инфраструктуре PHP-модулей не раскрывают для программиста никаких интерфейсов.
  </para>

  <para>
   MySQL-драйвер модуля PDO, например, не раскрывает API-интерфейс для программиста,
   но предоставляет интерфейс вышележащему абстрактному слою, который представляет модуль PDO.
  </para>

  <para>
   Термины «API-интерфейс» и «модуль» нельзя воспринимать как одно и то же,
   поскольку модуль не обязан раскрывать API-интерфейс для программиста.
  </para>

  <para>
   <emphasis role="bold">
    О главных API-интерфейсах языка PHP для работы с БД MySQL
   </emphasis>
  </para>

  <para>
   PHP предлагает два API-интерфейса для подключения к серверу баз данных MySQL:
  </para>

  <itemizedlist>

    <listitem>
      <para>
        PHP-модуль mysqli
      </para>
    </listitem>

    <listitem>
      <para>
        PHP-модуль PDO
      </para>
    </listitem>

  </itemizedlist>

  <para>
    Каждый модуль содержит достоинства, но встречаются и недостатки. Цель следующей части обзора
    состоит в кратком описании характеристик каждого API-интерфейса.
  </para>

  <para>
    <emphasis role="bold">О PHP-модуле mysqli</emphasis>
  </para>

  <para>
   Модуль <literal>mysqli</literal>, или <emphasis>улучшенный</emphasis> модуль MySQL (англ. improved MySQL),
   разработали, чтобы PHP-программисты получили выгоду, которую дают новые функции MySQL-систем версии 4.1.3 и выше.
   Модуль <literal>mysqli</literal> включается в пакет PHP версии 5 и выше.
  </para>

  <para>
   Модуль <literal>mysqli</literal> содержит преимущества,
   главные из которых по сравнению с модулем <literal>mysql</literal> состоят в следующем:

   <itemizedlist>

    <listitem>
     <para>
      Объектно-ориентированный интерфейс
     </para>
    </listitem>

    <listitem>
     <para>
       Поддержка подготовленных запросов
     </para>
    </listitem>

    <listitem>
     <para>
       Поддержка мультизапросов
     </para>
    </listitem>

    <listitem>
     <para>
       Поддержка транзакций
     </para>
    </listitem>

    <listitem>
     <para>
       Расширенные инструменты отладки
     </para>
    </listitem>

   </itemizedlist>
  </para>

  <para>
   Наравне с объектно-ориентированным интерфейсом модуль предоставляет и процедурный
   интерфейс.
  </para>

  <para>
   Модуль <literal>mysqli</literal> встраивается в инфраструктуру модулей языка PHP,
   исходный код модуля лежит в каталоге <filename>ext/mysqli</filename>.
  </para>

  <para>
   Подробнее о модуле <literal>mysqli</literal>
   рассказывает раздел <xref linkend="book.mysqli"/>.
  </para>

  <para xml:id="mysqli.overview.pdo">
   <emphasis role="bold">О модуле PDO</emphasis>
  </para>

  <para>
   Модуль PDO — абстракция коннектора, которая определяет интерфейс доступа к базам данных для PHP-приложений.
   Модуль PDO раскрывает для PHP-приложений согласованный API-интерфейс,
   при взаимодействии с которым приложение не зависит от типа конкретного сервера баз данных,
   к которому подключается. Теоретически, при работе через API-интерфейс модуля PDO
   один сервер баз данных легко заменить другим, например поменять Firebird на MySQL,
   и для этого потребуются внести в PHP-код только незначительные изменения.
  </para>

  <para>
   К другим примерам абстракций коннекторов баз данных относятся пакет JDBC для Java-приложений
   и пакет DBI для приложений на языке программирования Perl.
  </para>

  <para>
   Преимущества модуля PDO состоят в чистоте, простоте и переносимости API-интерфейса,
   а главный недостаток модуля — недоступность продвинутых функций,
   которые поддерживаются последними версиями MySQL-сервера. К таким функциям, например, относятся
   множественные запросы, которые модуль PDO не поддерживает.
  </para>

  <para>
   Модуль PDO встраивается в инфраструктуру модулей языка PHP,
   исходный код модуля лежит в директории <filename>ext/pdo</filename>.
  </para>

  <para>
   Подробнее о модуле рассказывает раздел <xref linkend="book.pdo"/>.
  </para>

  <para>
   <emphasis role="bold">О драйвере модуля PDO для работы с СУБД MySQL</emphasis>
  </para>

  <para>
   MySQL-драйвер модуля PDO не относится к API-интерфейсу, который модуль раскрывает
   для программиста. MySQL-драйвер модуля PDO лежит на уровне ниже самого модуля PDO
   и взаимодействует с MySQL-сервером. Программист вызывает функции API-интерфейса модуля PDO,
   а модуль взаимодействует с драйвером для отправки данных и команд на MySQL-сервер.
  </para>

  <para>
   MySQL-драйвер модуля PDO взаимодействует с MySQL-серверами, но модуль также включает драйверы
   для взаимодействия с серверами баз данных Firebird, PostgreSQL и другими СУБД.
  </para>

  <para>
   MySQL-драйвер модуля PDO встраивается в инфраструктуру модулей языка PHP,
   исходный код модуля лежит в каталоге <filename>ext/pdo_mysql</filename>.
   Модуль не раскрывает API-интерфейс PHP-программисту.
  </para>

  <para>
    Дополнительно о MySQL-драйвере модуля PDO рассказывает раздел
    <xref linkend="ref.pdo-mysql"/>.
  </para>

  <para xml:id="mysqli.overview.mysqlnd">
    <emphasis role="bold">О родном драйвере PHP для работы с СУБД MySQL</emphasis>
  </para>

  <para>
   Модуль <literal>mysqli</literal> и MySQL-драйвер модуля PDO взаимодействуют с MySQL-сервером
   путём обращения к низкоуровневой библиотеке, которая реализует
   протокол взаимодействия с СУБД. Раньше единственной доступной библиотекой была
   клиентская библиотека MySQL Client Library, которая распространяется как пакет
   <literal>libmysqlclient</literal>.
  </para>

  <para>
   Однако интерфейс, который предоставляла библиотека <literal>libmysqlclient</literal>,
   не был оптимизирован для взаимодействия с PHP-приложениями, поскольку библиотека
   <literal>libmysqlclient</literal> разрабатывалась для работы с приложениями на языке C.
   Поэтому как альтернативу MySQL-библиотеке <literal>libmysqlclient</literal> разработали
   родной PHP-драйвер для взаимодействия с СУБД MySQL — MySQL Native Driver,
   который распространяется как PHP-модуль и называется <literal>mysqlnd</literal>.
  </para>

  <para>
   Модуль <literal>mysqli</literal> и PDO-драйвер для СУБД MySQL
   настраиваются отдельно — либо для работы с внешней библиотекой <literal>libmysqlclient</literal>,
   либо для работы с родным PHP-драйвером <literal>mysqlnd</literal>.
   Внутренний драйвер работает быстрее и расходует меньше памяти
   по сравнению с внешней библиотекой <literal>libmysqlclient</literal>,
   поскольку драйвер <literal>mysqlnd</literal> разработали непосредственно для работы в PHP-системах.
   Поэтому лучше предпочесть родной PHP-драйвер.
  </para>

  <para>
   Родной PHP-драйвер для взаимодействия с СУБД MySQL встраивается в инфраструктуру модулей языка PHP,
   исходный код модуля лежит в каталоге <filename>ext/mysqlnd</filename>.
   Модуль не раскрывает API-интерфейс для PHP-программиста.
  </para>

<!-- TODO
  <para>
    For further information on the MySQL Native Driver, see
    <xref linkend="book.mysqlnd"/>.
  </para>
-->

  <para>
    <emphasis role="bold">Сравнение функций модулей</emphasis>
  </para>

  <para>
    Следующая таблица сравнивает функциональность основных методов
    подключения к СУБД MySQL из PHP-приложения:
  </para>

  <table xml:id="mysqli.overview.option.comparison">
   <title>Сравнение API-интерфейсов для взаимодействия PHP-приложений с СУБД MySQL</title>
    <tgroup cols="3">
      <colspec colwidth="34*"/>
      <colspec colwidth="33*"/>
      <colspec colwidth="33*"/>
      <thead>
        <row>
          <entry></entry>
          <entry>PHP-модуль mysqli</entry>
          <entry>PHP-модуль PDO через драйвер PDO_MySQL и родной PHP-драйвер для СУБД MySQL</entry>
        </row>
      </thead>
      <tbody>
        <row>
          <entry>Версия PHP, в которой представили модуль</entry>
          <entry>5.0</entry>
          <entry>5.0</entry>
        </row>
        <row>
          <entry>Статус разработки MySQL</entry>
          <entry>Разработка продолжается</entry>
          <entry>Разработка продолжается</entry>
        </row>
        <row>
          <entry>API поддерживает наборы символов</entry>
          <entry>Да</entry>
          <entry>Да</entry>
        </row>
        <row>
          <entry>API поддерживает подготовленные запросы на стороне сервера</entry>
          <entry>Да</entry>
          <entry>Да</entry>
        </row>
        <row>
          <entry>API поддерживает подготавливаемые запросы на стороне клиента</entry>
          <entry>Нет</entry>
          <entry>Да</entry>
        </row>
        <row>
          <entry>API поддерживает хранимые процедуры</entry>
          <entry>Да</entry>
          <entry>Да</entry>
        </row>
        <row>
          <entry>API поддерживает множественные запросы</entry>
          <entry>Да</entry>
          <entry>По большей части</entry>
        </row>
        <row>
          <entry>Поддержка всего функционала MySQL 4.1+</entry>
          <entry>Да</entry>
          <entry>По большей части</entry>
        </row>
      </tbody>
    </tgroup>
  </table>
<!--
  <para>
    <emphasis role="bold">Further information</emphasis>
  </para>

  <para>
    The PHP distribution and documentation are available from the
    <link xlink:href="http://www.php.net/">PHP Web site</link>.
  </para>
-->
</chapter>
