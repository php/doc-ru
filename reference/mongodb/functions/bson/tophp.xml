<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 4639881688d3faaf0073ad71fe0a4b730aea15a0 Maintainer: sergey Status: ready -->
<!-- Reviewed: no -->
<refentry xml:id="function.mongodb.bson-tophp" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>MongoDB\BSON\toPHP</refname>
  <refpurpose>Возвращает PHP-представление BSON-значения</refpurpose>
 </refnamediv>

 <refsynopsisdiv>
  <warning>
   <para>
    Метод <emphasis>УСТАРЕЛ</emphasis> с модуля версии
    1.20.0, а в версии 2.0 метод удалили. Вместо этого метода приложениям лучше вызывать метод
    <methodname>MongoDB\BSON\Document::toPHP</methodname>.
   </para>
  </warning>
 </refsynopsisdiv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type class="union"><type>array</type><type>object</type></type><methodname>MongoDB\BSON\toPHP</methodname>
   <methodparam><type>string</type><parameter>bson</parameter></methodparam>
   <methodparam choice="opt"><type>array</type><parameter>typeMap</parameter><initializer>array()</initializer></methodparam>
  </methodsynopsis>
  <para>
   Метод десериализует BSON-документ — двоичную строку — в его PHP-представление.
   Через параметр <parameter>typeMap</parameter> управляют PHP-типами,
   через которые преобразовывают BSON-массивы и BSON-документы (как корневые, так и встроенные).
  </para>
  &mongodb.warning.duplicate-keys;
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <variablelist>
   <varlistentry>
    <term><parameter>bson</parameter> (<type>string</type>)</term>
    <listitem>
     <para>
      BSON-значение для десериализации.
     </para>
    </listitem>
   </varlistentry>
   &mongodb.parameter.typeMap;
  </variablelist>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Метод возвращает PHP-значение, которое сгенерировал путём десериализации BSON-документа.
  </para>
 </refsect1>

 <refsect1 role="errors">
  &reftitle.errors;
  <simplelist>
   <member>
    Метод выбрасывает исключение
    <classname>MongoDB\Driver\Exception\InvalidArgumentException</classname>,
    если класс в карте типов невозможно создать или класс не реализует интерфейс
    <interfacename>MongoDB\BSON\Unserializable</interfacename>.
   </member>
   &mongodb.throws.bson.unexpected;
  </simplelist>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      &mongodb.changelog.function-removed;
      <row>
       <entry>PECL-модуль mongodb 1.4.0</entry>
       <entry>
        <para>
         Модуль больше не записывает предупреждение в журнал отладки,
         если входные данные содержат устаревший BSON-тип, который не поддерживается модулем.
         Вместо этого метод создаст объект, который представляет такой тип.
        </para>
       </entry>
      </row>
      <row>
       <entry>PECL-модуль mongodb 1.3.2</entry>
       <entry>
        <para>
         Метод больше не выбрасывает исключение <classname>MongoDB\Driver\Exception\UnexpectedValueException</classname>
         если входные данные содержат устаревший BSON-тип, который не поддерживается модулем.
         Метод проигнорирует такие типы (как и в версиях до 1.3.0),
         хотя модуль теперь записывает предупреждение в журнал отладки
         (смотрите описание директивы <link linkend="ini.mongodb.debug">mongodb.debug</link>).
        </para>
       </entry>
      </row>
      <row>
       <entry>PECL-модуль mongodb 1.3.0</entry>
       <entry>
        <para>
         Метод выбрасывает исключение <classname>MongoDB\Driver\Exception\UnexpectedValueException</classname>,
         если входные данные содержат устаревший BSON-тип, который не поддерживается модулем.
         Раньше модуль игнорировал такие типы.
        </para>
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <example>
   <title>Пример преобразования BSON-значения в PHP-представление методом <function>MongoDB\BSON\toPHP</function></title>
   <programlisting role="php">
<![CDATA[
<?php

$bson = hex2bin('0e00000010666f6f000100000000');
$value = MongoDB\BSON\toPHP($bson);
var_dump($value);

?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
object(stdClass)#1 (1) {
  ["foo"]=>
  int(1)
}
]]>
   </screen>
  </example>
 </refsect1>


 <refsect1 role="seealso">
  &reftitle.seealso;
  <simplelist>
   <member><methodname>MongoDB\BSON\Document::toPHP</methodname></member>
   <member><function>MongoDB\BSON\fromPHP</function></member>
   <member><link xlink:href="&url.mongodb.docs.bson;">BSON-типы БД MongoDB</link></member>
   <member><xref linkend="mongodb.persistence"/></member>
  </simplelist>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
