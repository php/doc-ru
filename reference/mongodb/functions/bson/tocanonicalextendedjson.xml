<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 4639881688d3faaf0073ad71fe0a4b730aea15a0 Maintainer: sergey Status: ready -->
<!-- Reviewed: no -->
<refentry xml:id="function.mongodb.bson-tocanonicalextendedjson" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>MongoDB\BSON\toCanonicalExtendedJSON</refname>
  <refpurpose>Возвращает Canonical Extended JSON-представление BSON-значения</refpurpose>
 </refnamediv>

 <refsynopsisdiv>
  <warning>
   <para>
    Метод <emphasis>УСТАРЕЛ</emphasis> с модуля версии
    1.20.0, а в версии 2.0 метод удалили. Вместо этого метода приложениям лучше вызывать метод
    <methodname>MongoDB\BSON\Document::toCanonicalExtendedJSON</methodname>.
   </para>
  </warning>
 </refsynopsisdiv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>string</type><methodname>MongoDB\BSON\toCanonicalExtendedJSON</methodname>
   <methodparam><type>string</type><parameter>bson</parameter></methodparam>
  </methodsynopsis>
  <para>
   Метод преобразовывает BSON-строку в представление
   <link xlink:href="&url.mongodb.specs.extendedjson;#canonical-extended-json-example">в каноническом расширенном JSON-формате</link>.
   В каноническом формате в ущерб краткости вывода отдают преимущество точности типов.
   В каноническом формате создают данные вывода, которым доступно преобразование
   обратно в BSON-формат без потери информации о типе, например, числовые типы
   останутся дифференцированными.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <variablelist>
   <varlistentry>
    <term><parameter>bson</parameter> (<type>string</type>)</term>
    <listitem>
     <para>
      Значение BSON для преобразования.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Метод возвращает JSON-значение, в которое преобразовал BSON-значение.
  </para>
 </refsect1>

 <refsect1 role="errors">
  &reftitle.errors;
  <simplelist>
   &mongodb.throws.bson.unexpected;
  </simplelist>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      &mongodb.changelog.function-removed;
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <example>
   <title>
    Пример преобразования BSON-значения в представление в формате Canonical Extended JSON
    методом <function>MongoDB\BSON\toCanonicalExtendedJSON</function>
   </title>
   <programlisting role="php">
<![CDATA[
<?php

$documents = [
    ['null' => null],
    ['boolean' => true],
    ['string' => 'foo'],
    ['int32' => 123],
    ['int64' => 4294967295],
    ['double' => 1.0],
    ['nan' => NAN],
    ['pos_inf' => INF],
    ['neg_inf' => -INF],
    ['array' => ['foo', 'bar']],
    ['document' => ['foo' => 'bar']],
    ['oid' => new MongoDB\BSON\ObjectId('56315a7c6118fd1b920270b1')],
    ['dec128' => new MongoDB\BSON\Decimal128('1234.5678')],
    ['binary' => new MongoDB\BSON\Binary('foo', MongoDB\BSON\Binary::TYPE_GENERIC)],
    ['date' => new MongoDB\BSON\UTCDateTime(1445990400000)],
    ['timestamp' => new MongoDB\BSON\Timestamp(1234, 5678)],
    ['regex' => new MongoDB\BSON\Regex('pattern', 'i')],
    ['code' => new MongoDB\BSON\Javascript(
        'function() {
            return 1;
        }'
    )],
    ['code_ws' => new MongoDB\BSON\Javascript(
        'function() {
            return a;
        }',
        ['a' => 1]
    )],
    ['minkey' => new MongoDB\BSON\MinKey],
    ['maxkey' => new MongoDB\BSON\MaxKey],
];

foreach ($documents as $document) {
    $bson = MongoDB\BSON\fromPHP($document);
    echo MongoDB\BSON\toCanonicalExtendedJSON($bson), "\n";
}

?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
{ "null" : null }
{ "boolean" : true }
{ "string" : "foo" }
{ "int32" : { "$numberInt" : "123" } }
{ "int64" : { "$numberLong" : "4294967295"} }
{ "double" : { "$numberDouble" : "1.0" } }
{ "nan" : { "$numberDouble" : "NaN" } }
{ "pos_inf" : { "$numberDouble" : "Infinity" } }
{ "neg_inf" : { "$numberDouble" : "-Infinity" } }
{ "array" : [ "foo", "bar" ] }
{ "document" : { "foo" : "bar" } }
{ "oid" : { "$oid" : "56315a7c6118fd1b920270b1" } }
{ "dec128" : { "$numberDecimal" : "1234.5678" } }
{ "binary" : { "$binary" : { "base64": "Zm9v", "subType" : "00" } } }
{ "date" : { "$date" : { "$numberLong" : "1445990400000" } } }
{ "timestamp" : { "$timestamp" : { "t" : 5678, "i" : 1234 } } }
{ "regex" : { "$regularExpression" : { "pattern" : "pattern", "options" : "i" } } }
{ "code" : { "$code" : "function() { return 1; }" } }
{ "code_ws" : { "$code" : "function() { return a; }", "$scope" : { "a" : { "$numberInt" : "1" } } } }
{ "minkey" : { "$minKey" : 1 } }
{ "maxkey" : { "$maxKey" : 1 } }
]]>
   </screen>
  </example>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <simplelist>
   <member><methodname>MongoDB\BSON\Document::fromJSON</methodname></member>
   <member><methodname>MongoDB\BSON\Document::toCanonicalExtendedJSON</methodname></member>
   <member><function>MongoDB\BSON\fromJSON</function></member>
   <member><function>MongoDB\BSON\toRelaxedExtendedJSON</function></member>
   <member><link xlink:href="&url.mongodb.specs.extendedjson;">Спецификация формата Extended JSON</link></member>
   <member><link xlink:href="&url.mongodb.docs.bson;">BSON-типы БД MongoDB</link></member>
  </simplelist>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
