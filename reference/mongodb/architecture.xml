<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 077667aa60c2eaee4fbb704824e265d3ad6120b3 Maintainer: sergey Status: ready -->
<!-- Reviewed: no -->
<book xml:id="mongodb.architecture" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <titleabbrev>Архитектура и внутреннее устройство драйвера</titleabbrev>
 <title>Обзор архитектуры драйвера и её особенностей</title>

 <article xml:id="mongodb.overview">
  <titleabbrev>Архитектура</titleabbrev>
  <title>Обзор архитектуры</title>

  <para>
   В этом разделе объясняется, как различные части PHP-драйвера сочетаются
   друг с другом, от базовых системных библиотек, через PHP-модули и до
   PHP-библиотек на самом верху.
  </para>

  <para>
   <mediaobject>
    <alt>
     Схема архитектуры PHP-драйвера.
     Самый низкий уровень драйвера — это системные модули: libmongoc, libbson и libmongocrypt.
     Средний уровень — это PHP-модуль MongoDB, написанный на языке Си.
     Верхний уровень — это пользовательское окружение PHP,
     PHP-модуль MongoDB и высокоуровневые пакеты: фреймворки и приложения.
    </alt>
    <imageobject>
     <imagedata fileref="en/reference/mongodb/images/driver_arch.svg" width="625" depth="450" format="SVG" />
    </imageobject>
   </mediaobject>
  </para>

  <para>
   Наверху стека расположена
   <link xlink:href="&url.mongodb.library;">библиотека PHP</link>, которая распространяется
   в виде <link xlink:href="https://packagist.org/packages/mongodb/mongodb">пакета Composer</link>.
   Эта библиотека предоставит API, согласованный с другими
   <link xlink:href="&url.mongodb.drivers;">драйверами</link> MongoDB,
   и реализует междрайверные
   <link xlink:href="&url.mongodb.specs;">спецификации</link>.
   Хотя модуль можно использовать напрямую, библиотека даёт минимальные накладные расходы
   и должна быть общей зависимостью для большей части приложений, построенных с MongoDB.
  </para>

  <para>
   На уровень ниже библиотеки располагается PHP-модуль, который распространяется
   через репозиторий <link xlink:href="&url.pecl.package;mongodb">PECL</link>.
   Модуль образует связующую прослойку между PHP и системными библиотеками
   (<link xlink:href="&url.mongodb.libmongoc;">libmongoc</link>,
   <link xlink:href="&url.mongodb.libbson;">libbson</link>
   и <link xlink:href="&url.mongodb.libmongocrypt;">libmongocrypt</link>).
   Этот публичный API предлагает только самую базовую функциональность:

   <simplelist>
    <member>Управление соединением</member>
    <member>BSON кодирование и декодирование</member>
    <member>Сериализация документа объекта (для поддержки библиотек ODM)</member>
    <member>Выполнение команд, запросы и запись операций</member>
    <member>Обработка курсоров для команд и результатов запроса</member>
   </simplelist>
  </para>

  <para>
   <table>
    <title>Исходный код драйвера и проекты JIRA</title>
    <tgroup cols="3">
     <thead>
      <row>
       <entry>Проект</entry>
       <entry>GitHub</entry>
       <entry>JIRA</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>PHP библиотека</entry>
       <entry><link xlink:href="&url.mongodb.github.phplib;">mongodb/mongo-php-library</link></entry>
       <entry><link xlink:href="&url.mongodb.jira.phplib;">PHPLIB</link></entry>
      </row>
      <row>
       <entry>PHP-модуль</entry>
       <entry><link xlink:href="&url.mongodb.github.phpc;">mongodb/mongo-php-driver</link></entry>
       <entry><link xlink:href="&url.mongodb.jira.phpc;">PHPC</link></entry>
      </row>
     </tbody>
    </tgroup>
   </table>
  </para>
 </article>

 <article xml:id="mongodb.connection-handling">
  <titleabbrev>Соединения</titleabbrev>
  <title>Обработка соединения и постоянство</title>

  &mongodb.note.forking;

  <section>
   <title>Постоянство подключения и топологии (версия PHP начиная с 1.2.0)</title>

   <para>
    Все версии драйвера начиная с 1.2.0 сохраняют клиентский объект
    <link xlink:href="&url.mongodb.libmongoc;">libmongoc</link>
    в рабочем процессе PHP, что позволяет ему повторно использовать соединения с базой данных,
    состояния аутентификации <emphasis>и</emphasis> информацию о топологии в
    нескольких запросах.
   </para>

   <para>
    Когда вызывается <methodname>MongoDB\Driver\Manager::__construct</methodname>,
    из его аргументов создаётся хеш (т. е. строка URI и параметры
    массива). Драйвер попытается найти ранее сохранённый клиентский объект
    <link xlink:href="&url.mongodb.libmongoc;">libmongoc</link> для
    этого хеша. Если существующий клиент не может быть найден для хеша, будет создан
    новый клиент и сохранён для будущего использования. Это поведение можно выключить
    через параметр драйвера <literal>"disableClientPersistence"</literal>.
   </para>

   <para>
    Каждый клиент содержит свои собственные подключения к базе данных и представление
    топологии сервера (например, автономный, набор реплик, кластер сегментов). Сохраняя
    клиент между запросами PHP, драйвер может повторно использовать установленные
    подключения к базе данных и устранять необходимость
    <link xlink:href="&url.mongodb.sdam;">обнаружения топологии сервера</link>
    при каждом запросе.
   </para>

   <para>
    Рассмотрим следующий пример:
   </para>

   <programlisting role="php">
<![CDATA[
<?php

$managers = [
    new MongoDB\Driver\Manager('mongodb://127.0.0.1'),
    new MongoDB\Driver\Manager('mongodb://127.0.0.1'),
    new MongoDB\Driver\Manager('mongodb://127.0.0.1:27017'),
    new MongoDB\Driver\Manager('mongodb://rs1.example.com,rs2.example.com/', ['replicaSet' => 'myReplicaSet']),
];

foreach ($managers as $manager) {
    $manager->executeCommand('test', new MongoDB\Driver\Command(['ping' => 1]));
}

?>
]]>
   </programlisting>

   <para>
    Первые два объекта Manager будут использовать один и тот же
    клиент <link xlink:href="&url.mongodb.libmongoc;">libmongoc</link>, поскольку
    их аргументы конструктора идентичны. Третий и четвёртый объекты будут
    использовать каждый свой клиент. Всего будет создано три клиента, и
    процесс PHP, выполняющий этот скрипт, откроет два соединения с
    адресом <literal>127.0.0.1</literal> и одно соединение с каждым из
    адресов: <literal>rs1.example.com</literal> и <literal>rs2.example.com</literal>.
    Если драйвер обнаруживает дополнительных членов набора реплик после выполнения команд
    <literal>hello</literal>, он также открывает дополнительные подключения
    к этим серверам.
   </para>

   <para>
    Если этот же процесс снова выполнит сценарий во втором запросе, эти три
    клиента будут использованы повторно, а новых подключений установлено не будет. В зависимости
    от того, как давно был обработан предыдущий запрос, драйверу может потребоваться выполнить
    дополнительные команды <literal>hello</literal> для обновления своего представления
    топологий.
   </para>
  </section>

  <section>
   <title>Постоянство сокетов (версии PHP до 1.2.0)</title>

   <para>
    Версии драйвера PHP до 1.2.0 используют PHP&apos;s Streams API для
    соединений с базой данных, используя API модуля
    <link xlink:href="&url.mongodb.libmongoc;">libmongoc</link> для определения
    пользовательских обработчиков для связи с сокетами; однако новый клиент libmongoc
    создаётся для каждого экземпляра класса <classname>MongoDB\Driver\Manager</classname>. В результате
    драйвер сохраняет отдельные соединения с базой данных, но не информацию о состоянии аутентификации
    или топологии. Это означает, что драйвер должен выдавать
    команды в начале каждого запроса для проверки подлинности и
    <link xlink:href="&url.mongodb.sdam;">обнаружения топологии сервера</link>.
   </para>

   <para>
    Соединения с базой данных сохраняются с помощью хеша, полученного из
    хоста, порта и строки URI сервера, используемой для построения
    <classname>MongoDB\Driver\Manager</classname>. Параметры массива конструктора
    не включены в этот хеш.
   </para>

   <note>
    <simpara>
     Версии драйвер &gt;= 1.1.8 and &lt; 1.2.0 не сохраняют сокеты
     для соединений SSL. Смотрите
     <link xlink:href="&url.mongodb.jira.phpc;-720">PHPC-720</link> для получения
     дополнительной информации.
    </simpara>
   </note>

   <para>
    Несмотря на недостатки, связанные с сохранением соединений SSL и информацией о топологии,
    эта версия драйвера поддерживает все
    <link linkend="context.ssl">параметры контекста SSL</link>, поскольку использует
    PHP&apos;s Streams API.
   </para>
  </section>
 </article>

 <article xml:id="mongodb.persistence">
  <titleabbrev>Постоянные данные</titleabbrev>
  <title>Сериализация и десериализация переменных PHP в MongoDB</title>

  <para>
   Этот документ обсуждает методы, как составные структуры (документы,
   массивы, объекты) сохраняются через драйверы. И как они возвращаются
   назад в PHP.
  </para>

  <section xml:id="mongodb.persistence.serialization">
   <title>Сериализация в BSON</title>

   <section>
    <title>Массивы</title>

    <para>
     Если массив является <emphasis>упакованным массивом</emphasis> — то есть пустой массив или, если ключи начинаются
     с 0 и являются последовательными без пробелов: <emphasis>массив BSON</emphasis>.
    </para>

    <para>
     Если массив не упакован — то есть имеет ассоциативные (строковые) ключи,
     ключи не начинаются с 0 или при наличии пробелов:: <emphasis>объект
     BSON</emphasis>
    </para>

    <para>
     Документ верхнего уровня (корневой), <emphasis>всегда</emphasis> сериализуется,
     как документ BSON.
    </para>

    <section>
     <title>Примеры</title>

     <para>
      Сериализация, как массив BSON:
     </para>

     <programlisting role="text">
<![CDATA[
[ 8, 5, 2, 3 ] => [ 8, 5, 2, 3 ]
[ 0 => 4, 1 => 9 ] => [ 4, 9 ]
]]>
     </programlisting>

     <para>
      Сериализация, как документ BSON:
     </para>

     <programlisting role="text">
<![CDATA[
[ 0 => 1, 2 => 8, 3 => 12 ] => { "0" : 1, "2" : 8, "3" : 12 }
[ "foo" => 42 ] => { "foo" : 42 }
[ 1 => 9, 0 => 10 ] => { "1" : 9, "0" : 10 }
]]>
     </programlisting>

     <para>
      Обратите внимание, что пять примеров являются <emphasis>выдержками</emphasis> из полного
      документа и представляют только <emphasis>одно</emphasis> значение внутри
      документа.
     </para>

    </section>
   </section>

   <section>
    <title>Объекты</title>

     <para>
      Если объект принадлежит к классу <classname>stdClass</classname>, сериализуйте,
      как <emphasis>документ BSON</emphasis>.
     </para>

     <para>
      Если объект является поддерживаемым классом, который реализует
      <interfacename>MongoDB\BSON\Type</interfacename>, то используйте
      логику сериализации BSON для этого конкретного типа.
      Экземпляры <interfacename>MongoDB\BSON\Type</interfacename> (исключая
      <interfacename>MongoDB\BSON\Serializable</interfacename> можно
      сериализовать только, как значение поля документа. Попытка сериализации такого объекта
      в качестве корневого документа приведёт к выбросу
      <classname>MongoDB\Driver\Exception\UnexpectedValueException</classname>
     </para>

     <para>
      Если объект неизвестного класса реализует интерфейс
      <interfacename>MongoDB\BSON\Type</interfacename>, выдаётся исключение
      <classname>MongoDB\Driver\Exception\UnexpectedValueException</classname>
     </para>

     <para>
      Если объект относится к какому-либо другому классу, без реализации какого-либо специального
      интерфейса, сериализуйте, как <emphasis>документ BSON</emphasis>. Оставляйте только
      <emphasis>public</emphasis> свойства и игнорируйте
      <emphasis>protected</emphasis> и <emphasis>private</emphasis>
      свойства.
     </para>

     <para>
      Если объект принадлежит к классу, который реализует интерфейс
      <interfacename>MongoDB\BSON\Serializable</interfacename>, вызовите
      <methodname>MongoDB\BSON\Serializable::bsonSerialize</methodname> и используйте
      возвращённый массив или <classname>stdClass</classname> для сериализации в качестве
      документа BSON или массива. Тип BSON будет определяться следующим:
     </para>

     <para>
      <orderedlist>
       <listitem>
        <para>Корневые документы должны быть сериализованы,
         как документ BSON.
        </para>
       </listitem>
       <listitem>
        <para>
         <interfacename>MongoDB\BSON\Persistable</interfacename> объекты должны быть
         сериализованы, как документ BSON.
        </para>
       </listitem>
       <listitem>
        <para>
         Если <methodname>MongoDB\BSON\Serializable::bsonSerialize</methodname>
         возвращает упакованный массив, сериализуйте его, как массив BSON.
        </para>
       </listitem>
       <listitem>
        <para>
         Если <methodname>MongoDB\BSON\Serializable::bsonSerialize</methodname>
         возвращает неупакованный массив или <classname>stdClass</classname>,
         сериализуйте, как документ BSON.
        </para>
       </listitem>
       <listitem>
        <para>
         Если <methodname>MongoDB\BSON\Serializable::bsonSerialize</methodname>
         не вернул массив или <classname>stdClass</classname>, выдаст исключение
         <classname>MongoDB\Driver\Exception\UnexpectedValueException</classname>.
        </para>
       </listitem>
      </orderedlist>
     </para>

     <para>
      Если объект принадлежит к классу, который реализует интерфейс
      <interfacename>MongoDB\BSON\Persistable</interfacename> (что
      подразумевает <interfacename>MongoDB\BSON\Serializable</interfacename>), получите
      свойства аналогично предыдущим абзацам, но
      <emphasis>также</emphasis> добавьте дополнительное свойство
      <property>__pclass</property> в качестве Binary значения с подтипом
      <literal>0x80</literal> и данными, содержащими полное имя класса
      сериализуемого объекта.
     </para>

     <para>
      Свойство <property>__pclass</property> добавляется в массив или
      объект, возвращаемый
      <methodname>MongoDB\BSON\Serializable::bsonSerialize</methodname>, что
      означает, что оно будет перезаписывать любой ключ/свойство <property>__pclass</property> в
      возвращаемом значении <methodname>MongoDB\BSON\Serializable::bsonSerialize</methodname>.
      Если вы хотите избежать такого поведения и установить собственное значение
      <property>__pclass</property>, вы <emphasis>не</emphasis> должны
      реализовывать <interfacename>MongoDB\BSON\Persistable</interfacename> и
      вместо этого должны реализовывать
      <interfacename>MongoDB\BSON\Serializable</interfacename> напрямую.
     </para>

     <section>
      <title>Примеры</title>

      <programlisting role="php">
<![CDATA[
<?php

class stdClass {
  public $foo = 42;
} // => { "foo" : 42 }

class MyClass {
  public $foo = 42;
  protected $prot = "wine";
  private $fpr = "cheese";
} // => { "foo" : 42 }

class AnotherClass1 implements MongoDB\BSON\Serializable {
  public $foo = 42;
  protected $prot = "wine";
  private $fpr = "cheese";
  function bsonSerialize(): array {
      return [ 'foo' => $this->foo, 'prot' => $this->prot ];
  }
} // => { "foo" : 42, "prot" : "wine" }

class AnotherClass2 implements MongoDB\BSON\Serializable {
  public $foo = 42;
  function bsonSerialize(): array {
      return $this;
  }
} // => MongoDB\Driver\Exception\UnexpectedValueException("bsonSerialize() did not return an array or stdClass")

class AnotherClass3 implements MongoDB\BSON\Serializable {
  private $elements = [ 'foo', 'bar' ];
  function bsonSerialize(): array {
      return $this->elements;
  }
} // => { "0" : "foo", "1" : "bar" }

class ContainerClass implements MongoDB\BSON\Serializable {
  public $things = AnotherClass4 implements MongoDB\BSON\Serializable {
    private $elements = [ 0 => 'foo', 2 => 'bar' ];
    function bsonSerialize(): array {
      return $this->elements;
    }
  }
  function bsonSerialize(): array {
      return [ 'things' => $this->things ];
  }
} // => { "things" : { "0" : "foo", "2" : "bar" } }

class ContainerClass implements MongoDB\BSON\Serializable {
  public $things = AnotherClass5 implements MongoDB\BSON\Serializable {
    private $elements = [ 0 => 'foo', 2 => 'bar' ];
    function bsonSerialize(): array {
      return array_values($this->elements);
    }
  }
  function bsonSerialize(): array {
      return [ 'things' => $this->things ];
  }
} // => { "things" : [ "foo", "bar" ] }

class ContainerClass implements MongoDB\BSON\Serializable {
  public $things = AnotherClass6 implements MongoDB\BSON\Serializable {
    private $elements = [ 'foo', 'bar' ];
    function bsonSerialize(): array {
      return (object) $this->elements;
    }
  }
  function bsonSerialize(): array {
      return [ 'things' => $this->things ];
  }
} // => { "things" : { "0" : "foo", "1" : "bar" } }

class UpperClass implements MongoDB\BSON\Persistable {
  public $foo = 42;
  protected $prot = "wine";
  private $fpr = "cheese";
  function bsonSerialize(): array {
      return [ 'foo' => $this->foo, 'prot' => $this->prot ];
  }
} // => { "foo" : 42, "prot" : "wine", "__pclass" : { "$type" : "80", "$binary" : "VXBwZXJDbGFzcw==" } }
]]>
     </programlisting>
    </section>
   </section>
  </section>

  <section xml:id="mongodb.persistence.deserialization">
   <title>Десериализация из BSON</title>

   &mongodb.warning.duplicate-keys;

   <para>
    Устаревший модуль <code>mongo</code> десериализовал
    как документы, так и массивы BSON в качестве массивов PHP. Хотя с PHP массивами
    удобно работать, такое поведение было проблематичным, поскольку различные
    типы BSON могут десериализоваться до одного и того же значения PHP (например,
    <literal>{"0": "foo"}</literal> и <literal>["foo"]</literal>) и будет
    невозможно вывести оригинальный тип BSON. По умолчанию текущий драйвер
    решает эту проблему, обеспечивая преобразование массивов и документов BSON
    в массивы и объекты PHP соответственно.
   </para>

   <para>
    Для составных типов существует три типа данных:
   </para>

   <para>
    <variablelist>
     <varlistentry>
      <term>root</term>
      <listitem>
       <para>
        относится <emphasis>только</emphasis> к документу верхнего уровня BSON
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>document</term>
      <listitem>
       <para>
        относится <emphasis>только</emphasis> к встроенным документам BSON
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>array</term>
      <listitem>
       <para>
        относится к массивам BSON
       </para>
      </listitem>
     </varlistentry>
    </variablelist>
   </para>

   <para>
    Помимо трёх групповых типов, также можно настроить
    определённые поля в документе для сопоставления с типами данных, указанными ниже.
    В качестве примера, следующая карта типов позволяет
    сопоставить каждый встроенный документ в массиве <literal>"addresses"</literal> с
    классом <classname>Address</classname>, <emphasis>а</emphasis> каждое
    поле <literal>"city"</literal> в этих документах с встроенным адресом
    с классом <classname>City</classname>:

    <programlisting role="text">
<![CDATA[
[
    'fieldPaths' => [
        'addresses.$' => 'MyProject\Address',
        'addresses.$.city' => 'MyProject\City',
    ],
]
]]>
    </programlisting>
   </para>

   <para>
    Каждый из этих трёх типов данных, а также сопоставления для конкретных полей
    могут быть сопоставлены с различными типами PHP. Возможные значения сопоставления:
   </para>

   <para>
    <variablelist>
     <varlistentry>
      <term><emphasis>не указано</emphasis> или <type>NULL</type> (по умолчанию)</term>
      <listitem>
       <para>
        <itemizedlist>
         <listitem>
          <para>
           Массив BSON будет десериализован, как PHP <type>array</type>.
          </para>
         </listitem>
         <listitem>
          <para>
           Документ BSON (корневой или внедрённый) без свойства
           <property>__pclass</property>
           <footnote xml:id="mongodb.pclass">
            <para>
             Свойство __pclass считается существующим, только
             если существует свойство с таким именем, и оно является Binary значением,
             а подтип Binary значения равен 0x80. Если какое-либо из этих трёх
             условий не выполняется, свойство __pclass не существует и
             должно рассматриваться, как любое другое обычное свойство.
            </para>
           </footnote>
           становится объектом PHP <classname>stdClass</classname>, причём каждый
           ключ документа BSON устанавливается в качестве открытого
           свойства <classname>stdClass</classname>.
          </para>
         </listitem>
         <listitem>
          <para>
           Документ BSON (корневой или встроенный) со свойством
           <property>__pclass</property> <footnoteref linkend="mongodb.pclass"/> становится объектом PHP
           имени класса, как это определено свойством <property>__pclass</property>.
          </para>
          <para>
           Если указанный класс реализует интерфейс
           M<interfacename>MongoDB\BSON\Persistable</interfacename>,
           то свойства документа BSON, включая свойство
           <property>__pclass</property>, отправляются в виде ассоциативного
           массива в функцию
           <methodname>MongoDB\BSON\Unserializable::bsonUnserialize</methodname>
           для инициализации свойств объекта.
          </para>
          <para>
           Если названный класс не существует или не реализует интерфейс
           <interfacename>MongoDB\BSON\Persistable</interfacename>,
           будет использоваться <classname>stdClass</classname>, и каждый ключ документа BSON
           (включая <property>__pclass</property>) будет установлен,
           как открытое свойство <classname>stdClass</classname>.
          </para>
          <para>
           Функциональность <property>__pclass</property> зависит от того, является ли
           свойство частью извлечённого документа MongoDB. Если вы используете
           <link linkend="mongodb-driver-query.construct-queryOptions">проекцию</link>
           при запросе документов, вам нужно включить поле
           <property>__pclass</property> в проекцию, чтобы эта
           функция работала.
          </para>
         </listitem>
        </itemizedlist>
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>"array"</literal></term>
      <listitem>
       <para>
        Превращает массив BSON или документ BSON в массив PHP. Не будет
        специальной обработки свойства <property>__pclass</property> <footnoteref linkend="mongodb.pclass"/>,
        но его можно установить, как элемент в возвращаемом массиве, если он
        присутствовал в документе BSON.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>"object"</literal> или <literal>"stdClass"</literal></term>
      <listitem>
       <para>
        Превращает массив BSON или документ BSON в объект
        <classname>stdClass</classname>. Не будет специальной
        обработки свойства <property>__pclass</property> <footnoteref linkend="mongodb.pclass"/>, но оно может
        быть установлено, как открытое свойство в возвращаемом объекте, если оно присутствовало
        в документе BSON.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>"bson"</literal></term>
      <listitem>
       <para>
        Превращает BSON массив в <classname>MongoDB\BSON\PackedArray</classname>
        и BSON документ в <classname>MongoDB\BSON\Document</classname>,
        независимо от того, есть ли у BSON документа свойство <property>__pclass</property>
        <footnoteref linkend="mongodb.pclass"/>.
       </para>
       <note>
        <simpara>
         Значение <literal>bson</literal> доступно только для трёх корневых типов,
         но не в отображениях для конкретных полей.
        </simpara>
       </note>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term>любая другая строка</term>
      <listitem>
       <para>
        Определяет имя класса, который должен десериализовать массив
        BSON или объект BSON. Для объектов BSON, которые содержат свойства
        <property>__pclass</property>, этот класс будет иметь
        приоритет.
       </para>

       <para>
        Если названный класс не существует, не является конкретным (то есть является
        абстрактным или интерфейсом) или не реализует
        <interfacename>MongoDB\BSON\Unserializable</interfacename>, то выдаётся исключение
        <classname>MongoDB\Driver\Exception\InvalidArgumentException</classname>.
       </para>

       <para>
        Если объект BSON имеет свойство <property>__pclass</property>, и
        этот класс существует и реализует
        <interfacename>MongoDB\BSON\Persistable</interfacename>, он
        заменит класс, представленный в карте типов.
       </para>

       <para>
        Свойства документа BSON, <emphasis>включая</emphasis>
        свойство <property>__pclass</property>, если оно существует, будут отправлены
        в виде ассоциативного массива в функцию
        <methodname>MongoDB\BSON\Unserializable::bsonUnserialize</methodname>
        для инициализации свойств объекта.
       </para>
      </listitem>
     </varlistentry>
    </variablelist>
   </para>

   <section xml:id="mongodb.persistence.typemaps">
    <title>TypeMaps</title>

     <para>
      TypeMaps можно установить с помощью метода
      <methodname>MongoDB\Driver\Cursor::setTypeMap</methodname> для объекта
      <classname>MongoDB\Driver\Cursor</classname> или аргумента
      <literal>$typeMap</literal> в
      <function>MongoDB\BSON\toPHP</function>,
      <methodname>MongoDB\BSON\Document::toPHP</methodname> и
      <methodname>MongoDB\BSON\PackedArray::toPHP</methodname>. Каждый из трёх
      классов (<emphasis>root</emphasis>, <emphasis>document</emphasis>, и
      <emphasis>array</emphasis>) может быть задан индивидуально, в дополнение
      к типам полей.
     </para>

     <para>
      Если значение на карте равно <type>NULL</type>, это означает то же самое,
      что и значение <emphasis>по умолчанию</emphasis> для этого элемента.
     </para>
    </section>

    <section>
     <title>Примеры</title>

     <para>
      В этих примерах используются следующие классы:
     </para>

     <para>
      <variablelist>
       <varlistentry>
        <term>MyClass</term>
        <listitem>
         <para>
          который <emphasis>не</emphasis> реализует интерфейс
         </para>
        </listitem>
       </varlistentry>
       <varlistentry>
        <term>YourClass</term>
        <listitem>
         <para>
          который реализует
          <interfacename>MongoDB\BSON\Unserializable</interfacename>
         </para>
        </listitem>
       </varlistentry>
       <varlistentry>
        <term>OurClass</term>
        <listitem>
         <para>
          который реализует
          <interfacename>MongoDB\BSON\Persistable</interfacename>
         </para>
        </listitem>
       </varlistentry>
       <varlistentry>
        <term>TheirClass</term>
        <listitem>
         <para>
          который расширяет OurClass
         </para>
        </listitem>
       </varlistentry>
      </variablelist>
     </para>

     <para>
      Метод <methodname>MongoDB\BSON\Unserializable::bsonUnserialize</methodname>
      класса YourClass, OurClass, OurClass выполняет итерацию по массиву и устанавливает
      свойства без изменений. Он <emphasis>также</emphasis> устанавливает для свойства
      <literal>$unserialized</literal> значение &true;:

      <programlisting role="php">
<![CDATA[
<?php

function bsonUnserialize( array $map )
{
    foreach ( $map as $k => $value )
    {
        $this->$k = $value;
    }
    $this->unserialized = true;
}
]]>
      </programlisting>
     </para>

     <para>
      <programlisting role="text">
<![CDATA[
/* typemap: [] (все значения по умолчанию) */
{ "foo": "yes", "bar" : false }
  -> stdClass { $foo => 'yes', $bar => false }

{ "foo": "no", "array" : [ 5, 6 ] }
  -> stdClass { $foo => 'no', $array => [ 5, 6 ] }

{ "foo": "no", "obj" : { "embedded" : 3.14 } }
  -> stdClass { $foo => 'no', $obj => stdClass { $embedded => 3.14 } }

{ "foo": "yes", "__pclass": "MyClass" }
  -> stdClass { $foo => 'yes', $__pclass => 'MyClass' }

{ "foo": "yes", "__pclass": { "$type" : "80", "$binary" : "MyClass" } }
  -> stdClass { $foo => 'yes', $__pclass => Binary(0x80, 'MyClass') }

{ "foo": "yes", "__pclass": { "$type" : "80", "$binary" : "YourClass") }
  -> stdClass { $foo => 'yes', $__pclass => Binary(0x80, 'YourClass') }

{ "foo": "yes", "__pclass": { "$type" : "80", "$binary" : "OurClass") }
  -> OurClass { $foo => 'yes', $__pclass => Binary(0x80, 'OurClass'), $unserialized => true }

{ "foo": "yes", "__pclass": { "$type" : "44", "$binary" : "YourClass") }
  -> stdClass { $foo => 'yes', $__pclass => Binary(0x44, 'YourClass') }
]]>
      </programlisting>
     </para>

     <para>
      <programlisting role="text">
<![CDATA[
/* typemap: [ "root" => "MissingClass" ] */
{ "foo": "yes" }
  -> MongoDB\Driver\Exception\InvalidArgumentException("MissingClass does not exist")

/* typemap: [ "root" => "MyClass" ] */
{ "foo": "yes", "__pclass" : { "$type": "80", "$binary": "MyClass" } }
  -> MongoDB\Driver\Exception\InvalidArgumentException("MyClass does not implement Unserializable interface")

/* typemap: [ "root" => "MongoDB\BSON\Unserializable" ] */
{ "foo": "yes" }
  -> MongoDB\Driver\Exception\InvalidArgumentException("Unserializable is not a concrete class")

/* typemap: [ "root" => "YourClass" ] */
{ "foo": "yes", "__pclass" : { "$type": "80", "$binary": "MongoDB\BSON\Unserializable" } }
  -> YourClass { $foo => "yes", $__pclass => Binary(0x80, "MongoDB\BSON\Unserializable"), $unserialized => true }

/* typemap: [ "root" => "YourClass" ] */
{ "foo": "yes", "__pclass" : { "$type": "80", "$binary": "MyClass" } }
  -> YourClass { $foo => "yes", $__pclass => Binary(0x80, "MyClass"), $unserialized => true }

/* typemap: [ "root" => "YourClass" ] */
{ "foo": "yes", "__pclass" : { "$type": "80", "$binary": "OurClass" } }
  -> OurClass { $foo => "yes", $__pclass => Binary(0x80, "OurClass"), $unserialized => true }

/* typemap: [ "root" => "YourClass" ] */
{ "foo": "yes", "__pclass" : { "$type": "80", "$binary": "TheirClass" } }
  -> TheirClass { $foo => "yes", $__pclass => Binary(0x80, "TheirClass"), $unserialized => true }

/* typemap: [ "root" => "OurClass" ] */
{ foo: "yes", "__pclass" : { "$type": "80", "$binary": "TheirClass" } }
  -> TheirClass { $foo => "yes", $__pclass => Binary(0x80, "TheirClass"), $unserialized => true }
]]>
      </programlisting>
     </para>

     <para>
      <programlisting role="text">
<![CDATA[
/* typemap: [ 'root' => 'YourClass' ] */
{ foo: "yes", "__pclass" : { "$type": "80", "$binary": "YourClass" } }
  -> YourClass { $foo => 'yes', $__pclass => Binary(0x80, 'YourClass'), $unserialized => true }
]]>
      </programlisting>
     </para>

     <para>
      <programlisting role="text">
<![CDATA[
/* typemap: [ 'root' => 'array', 'document' => 'array' ] */
{ "foo": "yes", "bar" : false }
  -> [ "foo" => "yes", "bar" => false ]

{ "foo": "no", "array" : [ 5, 6 ] }
  -> [ "foo" => "no", "array" => [ 5, 6 ] ]

{ "foo": "no", "obj" : { "embedded" : 3.14 } }
  -> [ "foo" => "no", "obj" => [ "embedded => 3.14 ] ]

{ "foo": "yes", "__pclass": "MyClass" }
  -> [ "foo" => "yes", "__pclass" => "MyClass" ]

{ "foo": "yes", "__pclass" : { "$type": "80", "$binary": "MyClass" } }
  -> [ "foo" => "yes", "__pclass" => Binary(0x80, "MyClass") ]

{ "foo": "yes", "__pclass" : { "$type": "80", "$binary": "OurClass" } }
  -> [ "foo" => "yes", "__pclass" => Binary(0x80, "OurClass") ]
]]>
      </programlisting>
     </para>

     <para>
      <programlisting role="text">
<![CDATA[
/* typemap: [ 'root' => 'object', 'document' => 'object' ] */
{ "foo": "yes", "__pclass": { "$type": "80", "$binary": "MyClass" } }
  -> stdClass { $foo => "yes", "__pclass" => Binary(0x80, "MyClass") }
]]>
      </programlisting>
     </para>

   </section>
  </section>

 </article>
</book>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
