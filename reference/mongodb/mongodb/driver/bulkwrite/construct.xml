<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 86e6094e86b84a51d00ab217ac50ce8dde33d82a Maintainer: lex Status: ready -->
<!-- Reviewed: yes Maintainer: sergey -->

<refentry xml:id="mongodb-driver-bulkwrite.construct" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>MongoDB\Driver\BulkWrite::__construct</refname>
  <refpurpose>Создаёт новый объект BulkWrite</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <modifier>public</modifier> <methodname>MongoDB\Driver\BulkWrite::__construct</methodname>
   <methodparam choice="opt"><type>array</type><parameter>options</parameter></methodparam>
  </methodsynopsis>
  <para>
   Создаёт новый <classname>MongoDB\Driver\BulkWrite</classname>, который является
   изменяемым объектом, к которому могут быть добавлены одна и несколько операций записи.
   Операции записи могут быть выполнены с помощью
   <methodname>MongoDB\Driver\Manager::executeBulkWrite</methodname>.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <variablelist>
   <varlistentry>
    <term><parameter>options</parameter> (<type>array</type>)</term>
    <listitem>
     <para>
      <table>
       <title>options</title>
       <tgroup cols="4">
        <thead>
         <row>
          <entry>Опция</entry>
          <entry>Тип</entry>
          <entry>Описание</entry>
          <entry>Значение по умолчанию</entry>
         </row>
        </thead>
        <tbody>
         <row>
          <entry>bypassDocumentValidation</entry>
          <entry><type>bool</type></entry>
          <entry>
           <para>
            Если &true;, позволяет выполнять операции вставки или обновления, чтобы обойти
            проверку уровня документа.
           </para>
           <para>
            Этот параметр доступен в MongoDB 3.2+ и игнорируется в более старых
            версиях сервера, которые не поддерживают проверку уровня сервера.
           </para>
          </entry>
          <entry>&false;</entry>
         </row>
         <row>
          <entry>ordered</entry>
          <entry><type>bool</type></entry>
          <entry>
           Отсортированные операции (&true;) выполняется последовательно на сервере MongoDB,
           тогда как неотсортированные операции (&false;) отправляются на сервере
           в произвольном порядке и могут выполняться параллельно.
          </entry>
          <entry>&true;</entry>
         </row>
        </tbody>
       </tgroup>
      </table>
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>

 <refsect1 role="errors">
  &reftitle.errors;
  <simplelist>
   &mongodb.throws.argumentparsing;
  </simplelist>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>PECL mongodb 1.1.0</entry>
       <entry>
        Добавлена опция <literal>"bypassDocumentValidation"</literal>.
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <example>
   <title>Пример использования  <function>MongoDB\Driver\BulkWrite::__construct</function></title>
   <programlisting role="php">
<![CDATA[
<?php

$bulk = new MongoDB\Driver\BulkWrite(['ordered' => true]);
$bulk->delete([]);
$bulk->insert(['_id' => 1, 'x' => 1]);
$bulk->insert(['_id' => 2, 'x' => 2]);
$bulk->update(
    ['x' => 2],
    ['$set' => ['x' => 1]],
    ['limit' => 1, 'upsert' => false]
);
$bulk->delete(['x' => 1], ['limit' => 1]);
$bulk->update(
    ['_id' => 3],
    ['$set' => ['x' => 3]],
    ['limit' => 1, 'upsert' => true]
);

$manager = new MongoDB\Driver\Manager('mongodb://localhost:27017');
$writeConcern = new MongoDB\Driver\WriteConcern(1);

try {
    $result = $manager->executeBulkWrite('db.collection', $bulk, $writeConcern);
} catch (MongoDB\Driver\Exception\BulkWriteException $e) {
    $result = $e->getWriteResult();

    // Проверяем обеспечение гарантии записи
    if ($writeConcernError = $result->getWriteConcernError()) {
        printf("%s (%d): %s\n",
            $writeConcernError->getMessage(),
            $writeConcernError->getCode(),
            var_export($writeConcernError->getInfo(), true)
        );
    }

    // Проверяем, если какие-либо операции записи не были выполнены
    foreach ($result->getWriteErrors() as $writeError) {
        printf("Operation#%d: %s (%d)\n",
            $writeError->getIndex(),
            $writeError->getMessage(),
            $writeError->getCode()
        );
    }
} catch (MongoDB\Driver\Exception\Exception $e) {
    printf("Другая ошибка: %s\n", $e->getMessage());
    exit;
}

printf("Добавлено %d документ(ов)\n", $result->getInsertedCount());
printf("Обновлено  %d документ(ов)\n", $result->getModifiedCount());
printf("Слито %d документ(ов)\n", $result->getUpsertedCount());
printf("Удалено  %d документ(ов)\n", $result->getDeletedCount());

?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
Добавлено 2 документ(ов)
Обновлено 1 документ(ов)
Слито 1 документ(ов)
Удалено  1 документ(ов)
]]>
   </screen>
  </example>
 </refsect1>


 <refsect1 role="seealso">
  &reftitle.seealso;
  <simplelist>
   <member><methodname>MongoDB\Driver\Manager::executeBulkWrite</methodname></member>
   <member><classname>MongoDB\Driver\WriteResult</classname></member>
  </simplelist>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
