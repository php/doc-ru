<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 0f19fd56d91bf2324083913698dfeb01312fb15c Maintainer: lex Status: ready -->
<!-- Reviewed: no -->

<refentry xml:id="mongodb-bson-unserializable.bsonunserialize" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>MongoDB\BSON\Unserializable::bsonUnserialize</refname>
  <refpurpose>Создаёт объект из массива BSON или документа</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <modifier>abstract</modifier> <modifier>public</modifier> <type>void</type><methodname>MongoDB\BSON\Unserializable::bsonUnserialize</methodname>
   <methodparam><type>array</type><parameter>data</parameter></methodparam>
  </methodsynopsis>
  <para>
   Вызывается во время десериализации объекта из BSON.
   Свойства массива BSON или документа будут переданы в метод в виде массива (<type>array</type>).
  </para>
  <para>
   Не забудьте проверить свойство <property>_id</property> при обработке данных из документа BSON.
  </para>
  <note>
   <simpara>
    Данный метод служит в качестве
    <link linkend="language.oop5.decon.constructor">конструктора</link> объекта
    Метод <link linkend="object.construct">__construct()</link>
    <emphasis>не</emphasis> будет вызываться после этого метода.
   </simpara>
  </note>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <variablelist>
   <varlistentry>
    <term><parameter>data</parameter> (<type>array</type>)</term>
    <listitem>
     <para>
      Свойства в массиве BSON или в документе.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Возвращаемое значение этого метода игнорируется.
  </para>
 </refsect1>


 <refsect1 role="examples">
  &reftitle.examples;
  <example>
   <title>Пример использования <function>MongoDB\BSON\Unserializable::bsonUnserialize</function></title>
   <programlisting role="php">
<![CDATA[
<?php

class MyDocument implements MongoDB\BSON\Unserializable
{
    private $data = [];

    function bsonUnserialize(array $data)
    {
        $this->data = $data;
    }
}

$bson = MongoDB\BSON\fromJSON('{ "foo": "bar" }');
$value = MongoDB\BSON\toPHP($bson, ['root' => 'MyDocument']);
var_dump($value);

?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
object(MyDocument)#1 (1) {
  ["data":"MyDocument":private]=>
  array(1) {
    ["foo"]=>
    string(3) "bar"
  }
}
]]>
   </screen>
  </example>
 </refsect1>


 <refsect1 role="seealso">
  &reftitle.seealso;
  <simplelist>
   <member><function>MongoDB\BSON\Serializable::bsonSerialize</function></member>
   <member><interfacename>MongoDB\BSON\Persistable</interfacename></member>
   <member><xref linkend="mongodb.persistence"/></member>
  </simplelist>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
