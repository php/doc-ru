<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 9e0399258946fecebcb98d13daa1ed911ee52c8d Maintainer: rjhdby Status: ready -->
<!-- Reviewed: no -->

<chapter xml:id="mongodb.tutorial.library" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>Использование библиотеки PHP для MongoDB (PHPLIB)</title>

 <para>
  После первоначальной настройки драйвера, мы продолжим объяснять, как начать
  работу с драйвером MongoDB и соответствующей пользовательской библиотекой,
  для создания нашего первого проекта.
 </para>

 <section>
  <title>Установка библиотеки PHP с помощью Composer</title>

  <para>
   Последнее, что нам необходимо установить перед тем, как начать писать
   наше приложение - установить библиотеку PHP.
  </para>

  <para>
   Библиотеку будем устанавливать с помощью пакетного менеджера
   <link xlink:href="&url.mongodb.composer;">Composer</link>.
   Инструкции по установке Composer ищите на его сайте.
  </para>

  <para>
   Устанавливаем библиотеку следующим образом:
   <programlisting role="shell">
<![CDATA[
$ composer require mongodb/mongodb
]]>
    </programlisting>
  </para>

  <para>
   Будет выведено что-то вроде:

   <programlisting role="text">
<![CDATA[
./composer.json has been created
Loading composer repositories with package information
Updating dependencies (including require-dev)
  - Installing mongodb/mongodb (1.0.0)
    Downloading: 100%

Writing lock file
Generating autoload files
]]>
    </programlisting>
  </para>

  <para>
   Composer создаст несколько файлов: <code>composer.json</code>,
   <code>composer.lock</code> и директорию <code>vendor</code>,
   содержащую саму библиотеку и прочие зависимости, которые потребуются
   в вашем проекте.
  </para>
 </section>

 <section>
  <title>Использование библиотеки PHP</title>

  <para>
   Кроме управления зависимостями, Composer также предоставляет
   автоподгрузчик классов для этих зависимостей. Убедитесь, что вы
   включили этот автозагрузчик в начало своего скрипта или в
   код bootstrap() вашего приложения:
   <programlisting role="php">
<![CDATA[
<?php
// Этот путь должен указывать на автозагрузчик Composer
require 'vendor/autoload.php';
]]>
    </programlisting>
   </para>

   <para>
    После этого можно использовать любой функционал, описанный в
    <link xlink:href="&url.mongodb.library.docs;">документации по библиотеке</link>.
   </para>

   <para>
    Если вы ранее использовали более старый драйвер (т.е. модуль
    <code>mongo</code>), то API библиотеки должно быть вам знакомо. Оно содержит
    класс <link xlink:href="&url.mongodb.library.apidocs;/class/MongoDBClient/">Client</link>
    для соединения с MongoDB, класс
    <link xlink:href="&url.mongodb.library.apidocs;/class/MongoDBDatabase/">Database</link>
    для операций уровня базы данных (т.е. команды, управление коллекциями) и класс
    <link xlink:href="&url.mongodb.library.apidocs;/class/MongoDBCollection">Collection</link>
    для операций уровня коллекции (т.е. методы
    <link xlink:href="&url.mongodb.wiki.crud;">CRUD</link>, управление индексами).
    Различные методы Collection были переименованы для большей понятности и соответствия
    языково-независимой <link xlink:href="&url.mongodb.crud;">спецификации</link>.
   </para>

   <para>
    Пример, как вставить документ в коллекцию
    <emphasis>beers</emphasis> базы данных <emphasis>demo</emphasis>:
    <programlisting role="php">
<![CDATA[
<?php
require 'vendor/autoload.php'; // подключаем автоподгрузчик классов Composer

$client = new MongoDB\Client("mongodb://localhost:27017");
$collection = $client->demo->beers;

$result = $collection->insertOne( [ 'name' => 'Hinterland', 'brewery' => 'BrewDog' ] );

echo "Идентификатор вставленного документа '{$result->getInsertedId()}'";
?>
]]>
    </programlisting>
   </para>

   <para>
    Вместо инъекции сгенерированного поля <code>_id</code> во входящий документ
    (как это делалось в старых версиях драйвера), теперь можно это делать с помощью
    метода <code>insertOne</code> возвращённого объекта.
   </para>

   <para>
    После вставки вы, конечно же, можете запросить только что вставленные данные.
    Для этого используйте метод <code>find</code>, который возвращает итерируемый
    курсор:
    <programlisting role="php">
<![CDATA[
<?php
require 'vendor/autoload.php'; // подключаем автоподгрузчик классов Composer

$client = new MongoDB\Client("mongodb://localhost:27017");
$collection = $client->demo->beers;

$result = $collection->find( [ 'name' => 'Hinterland', 'brewery' => 'BrewDog' ] );

foreach ($result as $entry) {
    echo $entry['_id'], ': ', $entry['name'], "\n";
}
?>
]]>
    </programlisting>
   </para>

   <para>
    Хоть из примера это и не очевидно, но документы BSON и массивы по умолчанию
    десериализованы как типы классов в библиотеке. Эти классы гарантируют, что
    значения сохранят свои типы когда будут сериализовываться обратно в BSON, что
    позволяет избежать проблемы старых драйверов, когда массивы могли преобразоваться
    в документы и наоборот. Кроме того, классы наследуют
    <classname>ArrayObject</classname> для большего удобства использования.
    Более подробно о сериализации и десериализации между переменными PHP и
    BSON можно прочитать в спецификации <xref linkend="mongodb.persistence"/>.
   </para>
 </section>
</chapter>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
