<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: dd07341fae2c414adc1f700be0890ff32e8daab4 Maintainer: rjhdby Status: ready -->
<!-- Reviewed: no -->
<refentry xml:id="ds-hashable.hash" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>Ds\Hashable::hash</refname>
  <refpurpose>Возвращает скалярное значение для использования в качестве значения хеша</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <modifier>abstract</modifier> <modifier>public</modifier> <type>mixed</type><methodname>Ds\Hashable::hash</methodname>
   <void />
  </methodsynopsis>
  <para>
   Возвращает скалярное значение, которое будет использоваться в качестве значение хеша объектов.
  </para>
  <para>
   В то время как значение хеша само по себе не гарантирует идентичность объектов, но
   всё же все объекты, равные при проверке с помощью функции
   <function>Ds\Hashable::equals</function>, должны иметь одно и то же значение хеша.
   Значение хешей для одинаковых объектов
   не обязаны быть уникальными, к примеру вы можете просто возвращать &true; для
   всех объектов и ничего не сломается. Единственным последствием будет то, что
   ваша хеш-таблица превратится в связанный список, потому что хеши всех объектов
   будут содержаться в одном блоке. Из этого следует, что важно выбирать хорошее
   значение хеша, например уникальный идентификатор или адрес электронной почты.
  </para>

  <para>
   Этот метод позволяет использовать объекты в качестве ключей в таких структурах как
   <classname>Ds\Map</classname> и <classname>Ds\Set</classname> или
   любых других структурах, распознающих этот интерфейс.
  </para>

  <caution>
   <para>
    Не выбираете значение, которое может измениться, например, из общедоступных свойств.
    Поиск в хеш-таблице завершится неудачей, если это значение изменится.
   </para>
  </caution>

  <caution>
   <para>
    Все одинаковые объекты должны иметь одно и то же значение хеша.
   </para>
  </caution>

 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  &no.function.parameters;
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Скалярное значение для использования как значение хеша.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <example>
   <title>Пример использования<function>Ds\Hashable::hash</function></title>
   <programlisting role="php">
<![CDATA[
<?php
class HashableObject implements \Ds\Hashable
{
    private $name;
    private $email;

    public function __construct($name, $email)
    {
        $this->name  = $name;
        $this->email = $email;
    }

    /**
     * Должно возвращать одинаковое значение для всех объектов, которые
     * должны считаться идентичными. Это значение не должно использоваться
     * в простом сравнении для определения идентичности объектов.
     */
    public function hash()
    {
        return $this->email;
    }

    /**
     * Функция определения идентичности объектов. Обычно проверяют, что
     * значения хешей обоих объектов совпадают. Но можно добавить
     * дополнительные проверки.
     */
    public function equals($obj): bool
    {
        return $this->name  === $obj->name
            && $this->hash() === $obj->hash();
    }
}
?>
]]>
   </programlisting>
  </example>
 </refsect1>


</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
