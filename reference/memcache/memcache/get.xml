<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 1c3a0a021e0d97acce54fda55f6e941557056afe Maintainer: rjhdby Status: ready -->
<!-- Reviewed: no -->
<refentry xml:id="memcache.get" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>Memcache::get</refname>
  <refname>memcache_get</refname>
  <refpurpose>Извлекает элемент с сервера</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>string</type><methodname>Memcache::get</methodname>
   <methodparam><type>string</type><parameter>key</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter role="reference">flags</parameter></methodparam>
  </methodsynopsis>
  <methodsynopsis>
   <type>array</type><methodname>Memcache::get</methodname>
   <methodparam><type>array</type><parameter>keys</parameter></methodparam>
   <methodparam choice="opt"><type>array</type><parameter role="reference">flags</parameter></methodparam>
  </methodsynopsis>
  <methodsynopsis>
   <type>string</type><methodname>memcache_get</methodname>
   <methodparam><type>Memcache</type><parameter>memcache</parameter></methodparam>
   <methodparam><type>string</type><parameter>key</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter role="reference">flags</parameter></methodparam>
  </methodsynopsis>
  <methodsynopsis>
   <type>array</type><methodname>memcache_get</methodname>
   <methodparam><type>Memcache</type><parameter>memcache</parameter></methodparam>
   <methodparam><type>array</type><parameter>keys</parameter></methodparam>
   <methodparam choice="opt"><type>array</type><parameter role="reference">flags</parameter></methodparam>
  </methodsynopsis>

  <para>
   Метод <function>Memcache::get</function> возвращает данные элемента с ключом <parameter>key</parameter>,
   если сервер содержит такой ключ.
  </para>

  <para>
   При передаче в метод <function>Memcache::get</function> массива ключей
   возвращается массив значений.
   В массив с результатами добавляются только те пары «ключ — значение», которые содержит кеш сервера, остальные игнорируются.
  </para>

 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>key</parameter></term>
     <listitem>
      <para>
       Ключ или массив ключей для извлечения элементов.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>flags</parameter></term>
     <listitem>
      <para>
       При вызове метода с этим аргументом параметр заполняется флагами, которые метод извлёк вместе со значениями.
       Это в точности те флаги, которые указывают, например, при вызове метода <function>Memcache::set</function>.
       Младший байт каждого целочисленного значения резервируется для внутренних целей модуля
       pecl/memcache,
       например, чтобы указать статус сжатия или сериализации.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Метод возвращает значение, которое связали с ключом <parameter>key</parameter>,
   или массив найденных пар «ключ — значение», если в параметр <parameter>key</parameter> передали
   массив.
   Метод возвращает значение &false;, если возникла ошибка, сервер не нашёл
   ключ <parameter>key</parameter>
   или с ключом <parameter>key</parameter> связали пустой массив.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Пример извлечения записи кеша методом <function>Memcache::get</function></title>
    <programlisting role="php">
<![CDATA[
<?php

/* Процедурный API */
$memcache_obj = memcache_connect('memcache_host', 11211);
$var = memcache_get($memcache_obj, 'some_key');

/* Объектно-ориентированный API */
$memcache_obj = new Memcache;
$memcache_obj->connect('memcache_host', 11211);
$var = $memcache_obj->get('some_key');

/*
Параметр также принимает массив ключей.
В массив с результатами добавляются только те элементы,
которые содержит кеш сервера, остальные игнорируются
*/

/* Процедурный API */
$memcache_obj = memcache_connect('memcache_host', 11211);
$var = memcache_get($memcache_obj, Array('some_key', 'another_key'));

/* Объектно-ориентированный API */
$memcache_obj = new Memcache();
$memcache_obj->connect('memcache_host', 11211);
$var = $memcache_obj->get(array('some_key', 'second_key'));

?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
