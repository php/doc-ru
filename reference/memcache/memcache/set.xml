<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 81cff4de7472c88fd3fe7204ed04d0a4d7860aec Maintainer: rjhdby Status: ready -->
<!-- Reviewed: yes Maintainer: lex -->
<refentry xml:id="memcache.set" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>Memcache::set</refname>
  <refpurpose>Сохранить данные на сервере</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>bool</type><methodname>Memcache::set</methodname>
   <methodparam><type>string</type><parameter>key</parameter></methodparam>
   <methodparam><type>mixed</type><parameter>var</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>flag</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>expire</parameter></methodparam>
  </methodsynopsis>

  <para>
   <function>Memcache::set</function> записывает элемент со значением
   <parameter>var</parameter> на сервере memcache с указанным ключом <parameter>key</parameter>.
   Параметр <parameter>expire</parameter> задаёт время жизни элемента. Если он равен 0,
   то элемент никогда не устареет (но сервер memcached не гарантирует что элемент будет
   постоянно храниться в кеше и он может быть удалён для освобождения места для новых
   элементов).
   Вы можете использовать константу <constant>MEMCACHE_COMPRESSED</constant> в качестве
   значения для параметра <parameter>flag</parameter>, если вам требуется сжатие "на лету"
   (используется zlib).
   <note>
    <para>
     Помните, что ресурсы (например дескрипторы файлов или подключений)
     не могут быть сохранены в кеше, потому что они не могут быть сериализованы.
    </para>
   </note>
   Также вы можете использовать функцию <function>memcache_set</function>.
  </para>

 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>key</parameter></term>
     <listitem>
      <para>
       Ключ, с которым будет связано значение элемента.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>var</parameter></term>
     <listitem>
      <para>
       Переменная для сохранения. Строковые и числовые значения сохраняются как есть,
       а остальные типы сериализируются.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>flag</parameter></term>
     <listitem>
      <para>
       Используйте <constant>MEMCACHE_COMPRESSED</constant> для сохранения элементов
       с использованием сжатия (используется zlib).
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>expire</parameter></term>
     <listitem>
      <para>
       Время жизни элемента. Если равно нулю, элемент никогда не устаревает. Также вы можете
       использовать метку времени Unix или число секунд, начиная с текущего момента, однако, в этом случае число секунд
       не может быть больше 2592000 (30 дней).
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.success;
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Пример использования <function>Memcache::set</function></title>
    <programlisting role="php">
<![CDATA[
<?php
/* процедурное API */

/* подключение к серверу memcached */
$memcache_obj = memcache_connect('memcache_host', 11211);

/*
установить значение элемента с ключом 'var_key',
используя 0 в flag, без использования сжатия со
временем жизни 30 секунд
*/
memcache_set($memcache_obj, 'var_key', 'some variable', 0, 30);

echo memcache_get($memcache_obj, 'var_key');

?>
]]>
    </programlisting>
   </example>
   <example>
    <title>Пример использования <function>Memcache::set</function></title>
    <programlisting role="php">
<![CDATA[
<?php
/* объектно-ориентированное API */

$memcache_obj = new Memcache;

/* подключение к серверу memcached */
$memcache_obj->connect('memcache_host', 11211);

/*
установить значение элемента с ключом 'var_key',
используя сжатие "на лету" и временем жизни 50 секунд.
*/
$memcache_obj->set('var_key', 'some really big variable', MEMCACHE_COMPRESSED, 50);

echo $memcache_obj->get('var_key');

?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>Memcache::add</function></member>
    <member><function>Memcache::replace</function></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
