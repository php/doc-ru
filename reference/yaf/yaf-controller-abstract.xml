<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 35d4da3258c94bbde2effe50a18b9fc54056694d Maintainer: sergey Status: ready -->
<!-- Reviewed: no -->

<phpdoc:classref xml:id="class.yaf-controller-abstract" xmlns:phpdoc="http://php.net/ns/phpdoc" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude">

 <title>Класс Yaf_Controller_Abstract</title>
 <titleabbrev>Yaf_Controller_Abstract</titleabbrev>

 <partintro>

  <!-- {{{ Yaf_Controller_Abstract intro -->
  <section xml:id="yaf-controller-abstract.intro">
   &reftitle.intro;
   <para>
    <classname>Yaf_Controller_Abstract</classname> это сердце системы Yaf.
    MVC расшифровывается как Model-View-Controller и представляет собой шаблон проектирования,
    предназначенный для отделения логики приложения от логики отображения
   </para>
   <para>
    Каждый пользовательский контроллер должен наследовать
    <classname>Yaf_Controller_Abstract</classname>.
   </para>
   <para>
    Вы обнаружите, что не можете определить функцию __construct для своего пользовательского
    контроллера, поэтому <classname>Yaf_Controller_Abstract</classname> предоставляет
   </para>
   <para>
    Если вы определили метод init() в своём пользовательском контроллере, он будет
    вызываться до тех пор, пока будет создан экземпляр контроллера.
   </para>
   <para>
    У действия при поступлении запроса могут быть аргументы. Если в параметрах запроса есть
    одна и та же переменная имени
    (<methodname>Yaf_Request_Abstract::getParam</methodname>) после перенаправления,
    Yaf передаст их методу действия (<methodname>Yaf_Action_Abstract::execute</methodname>).
    <note>
     <para>
      Аргументы извлекаются напрямую без фильтрации, перед использованием
      их следует тщательно обработать.
     </para>
    </note>
   </para>
  </section>
  <!-- }}} -->

  <section xml:id="yaf-controller-abstract.synopsis">
   &reftitle.classsynopsis;

   <!-- {{{ Synopsis -->
   <classsynopsis>
    <ooclass><classname>Yaf_Controller_Abstract</classname></ooclass>

    <!-- {{{ Class synopsis -->
    <classsynopsisinfo>
     <ooclass>
      <modifier>abstract</modifier>
      <classname>Yaf_Controller_Abstract</classname>
     </ooclass>
    </classsynopsisinfo>
    <!-- }}} -->
    <classsynopsisinfo role="comment">&Properties;</classsynopsisinfo>
    <fieldsynopsis>
     <modifier>public</modifier>
     <varname linkend="yaf-controller-abstract.props.actions">actions</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>protected</modifier>
     <varname linkend="yaf-controller-abstract.props.module">_module</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>protected</modifier>
     <varname linkend="yaf-controller-abstract.props.name">_name</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>protected</modifier>
     <varname linkend="yaf-controller-abstract.props.request">_request</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>protected</modifier>
     <varname linkend="yaf-controller-abstract.props.response">_response</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>protected</modifier>
     <varname linkend="yaf-controller-abstract.props.invoke-args">_invoke_args</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>protected</modifier>
     <varname linkend="yaf-controller-abstract.props.view">_view</varname>
    </fieldsynopsis>


    <classsynopsisinfo role="comment">&Methods;</classsynopsisinfo>
    <xi:include xpointer="xmlns(db=http://docbook.org/ns/docbook) xpointer(id('class.yaf-controller-abstract')/db:refentry/db:refsect1[@role='description']/descendant::db:methodsynopsis[1])" />
   </classsynopsis>
   <!-- }}} -->

  </section>


  <!-- {{{ Yaf_Controller_Abstract properties -->
  <section xml:id="yaf-controller-abstract.props">
   &reftitle.properties;
   <variablelist>
    <varlistentry xml:id="yaf-controller-abstract.props.actions">
     <term><varname>actions</varname></term>
     <listitem>
      <para>
       Вы также можете определить метод действия в отдельном скрипте PHP, используя
       это свойство и <classname>Yaf_Action_Abstract</classname>.
       <example>
        <title>Определение действия в отдельном файле</title>
        <programlisting role="php">
<![CDATA[
<?php
class IndexController extends Yaf_Controller_Abstract {
    protected $actions = array(
        /** теперь dummyAction определяется в отдельном файле */
        "dummy" => "actions/Dummy_action.php",
    );

    /* у метода действия могут быть аргументы */
    public indexAction($name, $id) {
       /* $name и $id небезопасные необработанные данные */
       assert($name == $this->getRequest()->getParam("name"));
       assert($id   == $this->_request->getParam("id"));
    }
}
?>
]]>
       </programlisting>
       </example>
       <example>
        <title>Dummy_action.php</title>
        <programlisting role="php">
<![CDATA[
<?php
class DummyAction extends Yaf_Action_Abstract {
    /* класс действия должен определить этот метод как точку входа */
    public execute() {
    }
}
?>
]]>
       </programlisting>
       </example>
      </para>
     </listitem>
    </varlistentry>
    <varlistentry xml:id="yaf-controller-abstract.props.module">
     <term><varname>_module</varname></term>
     <listitem>
      <para>
       имя модуля
      </para>
     </listitem>
    </varlistentry>
    <varlistentry xml:id="yaf-controller-abstract.props.name">
     <term><varname>_name</varname></term>
     <listitem>
      <para>
       имя контроллера
      </para>
     </listitem>
    </varlistentry>
    <varlistentry xml:id="yaf-controller-abstract.props.request">
     <term><varname>_request</varname></term>
     <listitem>
      <para>
       текущий объект запроса
      </para>
     </listitem>
    </varlistentry>
    <varlistentry xml:id="yaf-controller-abstract.props.response">
     <term><varname>_response</varname></term>
     <listitem>
      <para>
       текущий объект ответа
      </para>
     </listitem>
    </varlistentry>
    <varlistentry xml:id="yaf-controller-abstract.props.invoke-args">
     <term><varname>_invoke_args</varname></term>
     <listitem>
      <para></para>
     </listitem>
    </varlistentry>
    <varlistentry xml:id="yaf-controller-abstract.props.view">
     <term><varname>_view</varname></term>
     <listitem>
      <para>
       объект движка отображения
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </section>
  <!-- }}} -->


 </partintro>

 &reference.yaf.entities.yaf-controller-abstract;

</phpdoc:classref>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
