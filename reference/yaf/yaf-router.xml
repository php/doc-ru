<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 40ec84c3b39ae43075e2f98238907ae72cbd4bf8 Maintainer: sergey Status: ready -->
<!-- Reviewed: no -->

<phpdoc:classref xml:id="class.yaf-router" xmlns:phpdoc="http://php.net/ns/phpdoc" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude">

 <title>Класс Yaf_Router</title>
 <titleabbrev>Yaf_Router</titleabbrev>

 <partintro>

<!-- {{{ Yaf_Router intro -->
  <section xml:id="yaf-router.intro">
   &reftitle.intro;
   <para>
    <classname>Yaf_Router</classname> - это стандартный каркасный маршрутизатор. Маршрутизация - это
    процесс получения конечной точки URI (той части URI, которая идёт
    после базового URI: смотрите <methodname>Yaf_Request_Abstract::setBaseUri</methodname>)
    и разложение её на параметры, чтобы определить, какой модуль, контроллер
    и действие должны получить запрос. Эти значения модуля,
    контроллера, действия и других параметров упакованы в объект
    <classname>Yaf_Request_Abstract</classname>, который затем обрабатывается
    <classname>Yaf_Dispatcher</classname>. Маршрутизация происходит только один раз: при первоначальном
    получении запроса и до отправки первого контроллера.

    <classname>Yaf_Router</classname> предназначен для обеспечения функциональности, подобной mod_rewrite,
    с использованием чистых структур PHP. Он основан на маршрутизации Ruby
    on Rails и не требует каких-либо предварительных знаний о перезаписи URL
    веб-сервера. Он предназначен для работы с одним правилом Apache mod_rewrite
    (одним из):
   <example>
    <title>Правило перезаписи для Apache</title>
   <programlisting role="conf">
<![CDATA[
RewriteEngine on
RewriteRule !\.(js|ico|gif|jpg|png|css|html)$ index.php
]]>
   </programlisting>
   </example>
   или (предпочтительнее):
   <example>
   <title>Правило перезаписи для Apache</title>
   <programlisting role="conf">
<![CDATA[
RewriteEngine On
RewriteCond %{REQUEST_FILENAME} -s [OR]
RewriteCond %{REQUEST_FILENAME} -l [OR]
RewriteCond %{REQUEST_FILENAME} -d
RewriteRule ^.*$ - [NC,L]
RewriteRule ^.*$ index.php [NC,L]
]]>
   </programlisting>
  </example>
   При использовании Lighttpd используйте следующее правило перезаписи:
   <example>
    <title>Правило перезаписи для Lighttpd</title>
   <programlisting role="conf">
<![CDATA[
url.rewrite-once = (
  ".*\?(.*)$" => "/index.php?$1",
  ".*\.(js|ico|gif|jpg|png|css|html)$" => "$0",
  "" => "/index.php"
)
]]>
   </programlisting>
  </example>
   При использовании Nginx используйте следующее правило перезаписи:
   <example>
    <title>Правило перезаписи для Nginx</title>
   <programlisting role="conf">
<![CDATA[
server {
  listen ****;
  server_name  yourdomain.com;
  root   document_root;
  index  index.php index.html;

  if (!-e $request_filename) {
    rewrite ^/(.*)  /index.php/$1 last;
  }
}
]]>
   </programlisting>
  </example>
   </para>
  </section>
<!-- }}} -->

  <section xml:id="yaf-router.default">
   <title>Маршрут по умолчанию</title>
   <para>
    <classname>Yaf_Router</classname> поставляется с предварительно настроенным маршрутом по умолчанию
    <classname>Yaf_Route_Static</classname>, который будет соответствовать URI в форме
    контроллера/действия. Кроме того, имя модуля может быть указано в качестве первого
    элемента пути, что позволяет использовать URI формы модуля/контроллера/действия. Наконец,
    он также будет соответствовать любым дополнительным параметрам, добавляемым к URI по умолчанию
    - controller /action/var1/value1/var2/value2.
    <note>
     <para>
      Имя модуля должно быть определено в конфигурации с учётом application.module="Index,Foo,Bar",
      в этом случае только index, foo и bar могут рассматриваться как имя модуля.
      Если не настроено, есть только один модуль с именем "Index".
     </para>
    </note>
   </para>

   <para>
   Некоторые примеры соответствия таких маршрутов:
   <example>
    <title>Пример использования <classname>Yaf_Route_Static</classname>(маршрут по умолчанию)</title>
   <programlisting role="conf">
<![CDATA[
// Предполагая следующую настройку:
$conf = array(
   "application" => array(
      "modules" => "Index,Blog",
   ),
);

Только контроллер:
http://example/news
    controller == news
Только действие (если определено yaf.action_prefer=1 в php.ini)
    action  == news

Неверный модуль отображается на имя контроллера:
http://example/foo
    controller == foo

Модуль + контроллер:
http://example/blog/archive
    module     == blog
    controller == archive

Модуль + контроллер + действие:
http://example/blog/archive/list
    module     == blog
    controller == archive
    action     == list

Модуль + контроллер + действие + параметры:
http://example/blog/archive/list/sort/alpha/date/desc
    module     == blog
    controller == archive
    action     == list
    sort       == alpha
    date       == desc
]]>
   </programlisting>
  </example>

  </para>
  </section>

  <section xml:id="yaf-router.synopsis">
   &reftitle.classsynopsis;

<!-- {{{ Synopsis -->
   <classsynopsis>
    <ooclass><classname>Yaf_Router</classname></ooclass>

<!-- {{{ Class synopsis -->
    <classsynopsisinfo>
     <ooclass>
      <classname>Yaf_Router</classname>
     </ooclass>
    </classsynopsisinfo>
<!-- }}} -->
    <classsynopsisinfo role="comment">&Properties;</classsynopsisinfo>
    <fieldsynopsis>
     <modifier>protected</modifier>
     <varname linkend="yaf-router.props.routes">_routes</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>protected</modifier>
     <varname linkend="yaf-router.props.current">_current</varname>
    </fieldsynopsis>


    <classsynopsisinfo role="comment">&Methods;</classsynopsisinfo>
    <xi:include xpointer="xmlns(db=http://docbook.org/ns/docbook) xpointer(id('class.yaf-router')/db:refentry/db:refsect1[@role='description']/descendant::db:methodsynopsis[1])" />
   </classsynopsis>
<!-- }}} -->

  </section>


<!-- {{{ Yaf_Router properties -->
  <section xml:id="yaf-router.props">
   &reftitle.properties;
   <variablelist>
    <varlistentry xml:id="yaf-router.props.routes">
     <term><varname>_routes</varname></term>
     <listitem>
      <para>
      стек зарегистрированных маршрутов
      </para>
     </listitem>
    </varlistentry>
    <varlistentry xml:id="yaf-router.props.current">
     <term><varname>_current</varname></term>
     <listitem>
      <para>
       после фазы маршрутизации указывается название того, какой маршрут
       используется для маршрутизации текущего запроса.

       Вы можете получить его имя с помощью
       <methodname>Yaf_Router::getCurrentRoute</methodname>.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </section>
<!-- }}} -->


 </partintro>

 &reference.yaf.entities.yaf-router;

</phpdoc:classref>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
