<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: f53ab502a11a52e82baca372c37d64e3f298b17c Maintainer: shein Status: ready -->
<!-- Reviewed: no -->
<refentry xml:id="function.extract" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>extract</refname>
  <refpurpose>Импортирует переменные массива в текущую таблицу символов</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>int</type><methodname>extract</methodname>
   <methodparam><type>array</type><parameter role="reference">array</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>flags</parameter><initializer><constant>EXTR_OVERWRITE</constant></initializer></methodparam>
   <methodparam choice="opt"><type>string</type><parameter>prefix</parameter><initializer>""</initializer></methodparam>
  </methodsynopsis>
  <para>
   Функция импортирует переменные массива в текущую <link linkend="features.gc.refcounting-basics">таблицу символов</link>.
  </para>
  <para>
   Функция проверяет каждый ключ массива и определяет, соответствует ли ключ допустимому названию переменной.
   Функция также проверит, возникают ли коллизии с переменными
   в текущей таблице символов.
  </para>
  <warning>
   <para>
    Функцию <function>extract</function> нельзя вызывать с ненадёжными данными
    наподобие пользовательского ввода, который
    сохраняется в суперглобальных переменных <varname>$_GET</varname>, <varname>$_FILES</varname> или других.
   </para>
  </warning>
 </refsect1>
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>array</parameter></term>
     <listitem>
      <para>
       Ассоциативный массив. Функция трактует ключи массива
       как названия переменных, а значения — как значения
       переменных. Для каждой пары «ключ — значение» создаётся
       переменная в текущей таблице символов с учётом
       флагов параметра <parameter>flags</parameter>
       и значения префикса в параметре <parameter>prefix</parameter>.
      </para>
      <para>
       Без флагов <constant>EXTR_PREFIX_ALL</constant>
       или <constant>EXTR_PREFIX_INVALID</constant> функция работает
       только с ассоциативными массивами;
       индексный массив не даст результатов.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>flags</parameter></term>
     <listitem>
      <para>
       Параметр <parameter>flags</parameter> определяет способ
       трактовки недопустимых или числовых ключей и коллизий. Параметр
       принимает следующие значения:
       <variablelist>
        <varlistentry>
         <term><constant>EXTR_OVERWRITE</constant></term>
         <listitem>
          <simpara>
           При коллизии перезаписывать переменную в текущей таблице символов.
          </simpara>
         </listitem>
        </varlistentry>
        <varlistentry>
         <term><constant>EXTR_SKIP</constant></term>
         <listitem>
          <simpara>
           При коллизии не перезаписывать переменную в текущей таблице символов.
          </simpara>
         </listitem>
        </varlistentry>
        <varlistentry>
         <term><constant>EXTR_PREFIX_SAME</constant></term>
         <listitem>
          <simpara>
           При коллизии добавлять к названию
           переменной префикс
           <parameter>prefix</parameter>.
          </simpara>
         </listitem>
        </varlistentry>
        <varlistentry>
         <term><constant>EXTR_PREFIX_ALL</constant></term>
         <listitem>
          <simpara>
           Добавлять префикс <parameter>prefix</parameter> к названию каждой переменной.
          </simpara>
         </listitem>
        </varlistentry>
        <varlistentry>
         <term><constant>EXTR_PREFIX_INVALID</constant></term>
         <listitem>
          <simpara>
           Добавлять префикс <parameter>prefix</parameter>
           только к недопустимым или числовым названиям переменных.
          </simpara>
         </listitem>
        </varlistentry>
        <varlistentry>
         <term><constant>EXTR_IF_EXISTS</constant></term>
         <listitem>
          <simpara>
           Перезаписывает переменную, только если название уже содержится
           в текущей таблице символов, иначе ничего не делает.
           Флаг полезен для определения «белого списка»
           переменных, чтобы затем извлечь только предопределённые переменные, например,
           из суперглобального массива <varname>$_REQUEST</varname>.
          </simpara>
         </listitem>
        </varlistentry>
        <varlistentry>
         <term><constant>EXTR_PREFIX_IF_EXISTS</constant></term>
         <listitem>
          <simpara>
           Создать только префикс-версии переменных, если версия
           переменной без префикса уже содержится в текущей таблице символов.
          </simpara>
         </listitem>
        </varlistentry>
        <varlistentry>
         <term><constant>EXTR_REFS</constant></term>
         <listitem>
          <simpara>
           Извлечь переменные как ссылки. Это фактически означает,
           что значения импортированных переменных по-прежнему ссылаются
           на значения параметра <parameter>array</parameter>.
           Флаг работает отдельно
           или в комбинации с другими флагами
           параметра <parameter>flags</parameter> при объединении через побитовое «ИЛИ».
          </simpara>
         </listitem>
        </varlistentry>
       </variablelist>
      </para>
      <para>
       Для параметра <parameter>flags</parameter>
       значение по умолчанию равно <constant>EXTR_OVERWRITE</constant>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>prefix</parameter></term>
     <listitem>
      <para>
       Обратите внимание, параметр <parameter>prefix</parameter>
       становится обязательным при установке для параметра <parameter>flags</parameter>
       флагов <constant>EXTR_PREFIX_SAME</constant>,
       <constant>EXTR_PREFIX_ALL</constant>,
       <constant>EXTR_PREFIX_INVALID</constant>
       или <constant>EXTR_PREFIX_IF_EXISTS</constant>.
       Переменная не импортируется в текущую таблицу символов,
       если после добавления префикса формируется
       недопустимое название переменной. Префикс объединяется
       с ключом массива через символ подчеркивания: prefix_key.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Функция возвращает количество переменных, которые успешно импортировала в таблицу символов.
  </para>
 </refsect1>
 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Пример импорта переменных функцией <function>extract</function></title>
    <programlisting role="php">
<![CDATA[
<?php

$size = "large";
$var_array = array(
     "color" => "blue",
     "size"  => "medium",
     "shape" => "sphere"
);
extract($var_array, EXTR_PREFIX_SAME, "wddx");

echo "$color, $size, $shape, $wddx_size\n";

?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
blue, large, sphere, medium
]]>
    </screen>
    <para>
     Переменная <varname>$size</varname> не перезаписалась
     из-за установки флага <constant>EXTR_PREFIX_SAME</constant>,
     поэтому функция создала переменную <varname>$wddx_size</varname>.
     При установке флага <constant>EXTR_SKIP</constant>
     функция не создала бы переменную <varname>$wddx_size</varname>.
     С флагом <constant>EXTR_OVERWRITE</constant>
     переменная <varname>$size</varname> получила бы
     значение "medium", а при установке флага <constant>EXTR_PREFIX_ALL</constant>
     функция создала бы
     переменные <varname>$wddx_color</varname>,
     <varname>$wddx_size</varname> и <varname>$wddx_shape</varname>.
    </para>
   </example>
  </para>
 </refsect1>
 <refsect1 role="notes">
  &reftitle.notes;
  <warning>
   <para>
    Функцию <function>extract</function> нельзя вызывать с ненадёжными данными
    наподобие пользовательского ввода, который
    сохраняется в суперглобальных переменных <varname>$_GET</varname>, <varname>$_FILES</varname> или других.
    Для параметра <parameter>flags</parameter>,
    если всё же потребовалось извлечь пользовательские данные,
    устанавливают флаг наподобие <constant>EXTR_SKIP</constant>, который не перезаписывает текущие переменные,
    и извлекают переменные в том же порядке, который определили
    в директиве <link linkend="ini.variables-order">variables_order</link>
    файла <link linkend="ini">&php.ini;</link>.
   </para>
  </warning>
 </refsect1>
 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>compact</function></member>
    <member><function>list</function></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
