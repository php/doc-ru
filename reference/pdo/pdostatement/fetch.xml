<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 28529d3539b850e870e3aa97570f4db0e53daa03 Maintainer: tmn Status: ready -->
<!-- Reviewed: no -->
<refentry xml:id="pdostatement.fetch" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>PDOStatement::fetch</refname>
  <refpurpose>
   Извлечение следующей строки из результирующего набора
  </refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis role="PDOStatement">
   <modifier>public</modifier> <type>mixed</type><methodname>PDOStatement::fetch</methodname>
   <methodparam choice="opt"><type>int</type><parameter>mode</parameter><initializer>PDO::FETCH_DEFAULT</initializer></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>cursorOrientation</parameter><initializer>PDO::FETCH_ORI_NEXT</initializer></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>cursorOffset</parameter><initializer>0</initializer></methodparam>
  </methodsynopsis>

  <para>
   Извлекает следующую строку из результирующего набора объекта PDOStatement.
   Параметр <parameter>mode</parameter> определяет, в каком виде PDO вернёт
   эту строку.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>mode</parameter></term>
     <listitem>
      <para>
       Определяет, в каком виде следующая строка будет возвращена в вызывающий
       метод. Это может быть одна из констант <literal>PDO::FETCH_*</literal>.
       По умолчанию <literal>PDO::ATTR_DEFAULT_FETCH_MODE</literal>
       (что равносильно <literal>PDO::FETCH_BOTH</literal>).
       <itemizedlist>
        <listitem><para>
         <literal>PDO::FETCH_ASSOC</literal>: возвращает массив, индексированный
         именами столбцов результирующего набора
        </para></listitem>
        <listitem><para>
         <literal>PDO::FETCH_BOTH</literal> (по умолчанию): возвращает массив,
         индексированный именами столбцов результирующего набора, а также
         их номерами (начиная с 0)
        </para></listitem>
        <listitem><para>
         <literal>PDO::FETCH_BOUND</literal>: возвращает &true; и присваивает
         значения столбцов результирующего набора переменным PHP, которые были
         привязаны к этим столбцам методом
         <methodname>PDOStatement::bindColumn</methodname>
        </para></listitem>
        <listitem><para>
         <literal>PDO::FETCH_CLASS</literal>: создаёт и возвращает объект
         запрошенного класса, присваивая значения столбцов результирующего набора
         именованным свойствам класса, и следом вызывает конструктор, если не задан
         <literal>PDO::FETCH_PROPS_LATE</literal>.
         Если <parameter>mode</parameter>
         включает в себя атрибут PDO::FETCH_CLASSTYPE (например,
         <literal>PDO::FETCH_CLASS | PDO::FETCH_CLASSTYPE</literal>), то имя
         класса, от которого нужно создать объект, будет взято из первого столбца.
        </para></listitem>
        <listitem><para>
         <literal>PDO::FETCH_INTO</literal>: обновляет существующий объект
         запрошенного класса, присваивая значения столбцов результирующего набора
         именованным свойствам объекта
        </para></listitem>
        <listitem><para>
         <literal>PDO::FETCH_LAZY</literal>: комбинирует
         <literal>PDO::FETCH_BOTH</literal> и <literal>PDO::FETCH_OBJ</literal>,
         создавая новый объект со свойствами, соответствующими именам столбцов
         результирующего набора
        </para></listitem>
        <listitem><para>
         <literal>PDO::FETCH_NAMED</literal>: возвращает массив такого же
         вида, как и <literal>PDO::FETCH_ASSOC</literal>, но, если есть
         несколько полей с одинаковым именем, то значением с этим ключом будет массив
         со всеми значениями из рядов, в которых это поле указано.
        </para></listitem>
        <listitem><para>
         <literal>PDO::FETCH_NUM</literal>: возвращает массив, индексированный
         номерами столбцов (начиная с 0)
        </para></listitem>
        <listitem><para>
         <literal>PDO::FETCH_OBJ</literal>: создаёт анонимный объект со свойствами,
         соответствующими именам столбцов результирующего набора
        </para></listitem>
        <listitem><para>
         <literal>PDO::FETCH_PROPS_LATE</literal>: если используется с
         <literal>PDO::FETCH_CLASS</literal>, конструктор класса будет вызван
         перед назначением свойств из значений столбцов.
        </para></listitem>
       </itemizedlist>
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>cursorOrientation</parameter></term>
     <listitem>
      <para>
       Для объектов PDOStatement представляющих прокручиваемый курсор, этот
       параметр определяет, какая строка будет возвращаться в вызывающий метод.
       Значением параметра должна быть одна из констант
       <literal>PDO::FETCH_ORI_*</literal>, по умолчанию
       <literal>PDO::FETCH_ORI_NEXT</literal>. Чтобы запросить прокручиваемый
       курсор для запроса PDOStatement, необходимо задать атрибут
       <literal>PDO::ATTR_CURSOR</literal> со значением
       <literal>PDO::CURSOR_SCROLL</literal> во время подготовки запроса методом
       <methodname>PDO::prepare</methodname>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>cursorOffset</parameter></term>
     <listitem>
      <para>
       Для объектов PDOStatement, представляющих прокручиваемый курсор, параметр
       <parameter>cursorOrientation</parameter> которых принимает значение
       <literal>PDO::FETCH_ORI_ABS</literal>, эта величина означает абсолютный
       номер строки, которую необходимо извлечь из результирующего набора.
      </para>
      <para>
       Для объектов PDOStatement, представляющих прокручиваемый курсор, параметр
       <parameter>cursorOrientation</parameter> которых принимает значение
       <literal>PDO::FETCH_ORI_REL</literal>, эта величина указывает, какая
       строка относительно текущего положения курсора будет извлечена
       функцией <methodname>PDOStatement::fetch</methodname>.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   В случае успешного выполнения функции возвращаемое значение зависит от режима
   выборки. В случае возникновения ошибки или если больше нет строк, функция возвращает &false;.
  </para>
 </refsect1>

 <refsect1 role="errors">
  &reftitle.errors;
  &pdo.errors;
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example><title>Извлечение строк в разных режимах выборки</title>
    <programlisting role="php">
<![CDATA[
<?php
$sth = $dbh->prepare("SELECT name, colour FROM fruit");
$sth->execute();

/* Примеры различных режимов работы PDOStatement::fetch */
print "PDO::FETCH_ASSOC: ";
print "Возвращаем следующую строку в виде массива, индексированного именами столбцов\n";
$result = $sth->fetch(PDO::FETCH_ASSOC);
print_r($result);
print "\n";

print "PDO::FETCH_BOTH: ";
print "Возвращаем следующую строку в виде массива, индексированного как именами столбцов, так и их номерами\n";
$result = $sth->fetch(PDO::FETCH_BOTH);
print_r($result);
print "\n";

print "PDO::FETCH_LAZY: ";
print "Возвращаем следующую строку в виде анонимного объекта со свойствами, соответствующими столбцам\n";
$result = $sth->fetch(PDO::FETCH_LAZY);
print_r($result);
print "\n";

print "PDO::FETCH_OBJ: ";
print "Возвращаем следующую строку в виде анонимного объекта со свойствами, соответствующими столбцам\n";
$result = $sth->fetch(PDO::FETCH_OBJ);
print $result->name;
print "\n";
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
PDO::FETCH_ASSOC: Возвращаем следующую строку в виде массива, индексированного именами столбцов
Array
(
    [name] => apple
    [colour] => red
)

PDO::FETCH_BOTH: Возвращаем следующую строку в виде массива, индексированного как именами столбцов, так и их номерами
Array
(
    [name] => banana
    [0] => banana
    [colour] => yellow
    [1] => yellow
)

PDO::FETCH_LAZY: Возвращаем следующую строку в виде анонимного объекта со свойствами, соответствующими столбцам
PDORow Object
(
    [name] => orange
    [colour] => orange
)

PDO::FETCH_OBJ: Возвращаем следующую строку в виде анонимного объекта со свойствами, соответствующими столбцам
kiwi
]]>
    </screen>
   </example>
   <example><title>Выборка строк средствами прокручиваемого курсора</title>
    <programlisting role="php">
<![CDATA[
<?php
function readDataForwards($dbh) {
    $sql = 'SELECT hand, won, bet FROM mynumbers ORDER BY BET';
    $stmt = $dbh->prepare($sql, array(PDO::ATTR_CURSOR => PDO::CURSOR_SCROLL));
    $stmt->execute();
    while ($row = $stmt->fetch(PDO::FETCH_NUM, PDO::FETCH_ORI_NEXT)) {
        $data = $row[0] . "\t" . $row[1] . "\t" . $row[2] . "\n";
        print $data;
    }
}
function readDataBackwards($dbh) {
    $sql = 'SELECT hand, won, bet FROM mynumbers ORDER BY bet';
    $stmt = $dbh->prepare($sql, array(PDO::ATTR_CURSOR => PDO::CURSOR_SCROLL));
    $stmt->execute();
    $row = $stmt->fetch(PDO::FETCH_NUM, PDO::FETCH_ORI_LAST);
    do {
        $data = $row[0] . "\t" . $row[1] . "\t" . $row[2] . "\n";
        print $data;
    } while ($row = $stmt->fetch(PDO::FETCH_NUM, PDO::FETCH_ORI_PRIOR));
}

print "Читаем в прямой последовательности:\n";
readDataForwards($conn);

print "Читаем в обратной последовательности:\n";
readDataBackwards($conn);
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Читаем в прямой последовательности:
21    10    5
16    0     5
19    20    10

Читаем в обратной последовательности:
19    20    10
16    0     5
21    10    5
]]>
    </screen>
   </example>
<example><title>Порядок конструкторов</title>
    <simpara>
     Если объекты забираются с помощью <literal>PDO::FETCH_CLASS</literal>,
     сначала присваиваются свойства объекта, а следом вызывается конструктор объекта.
     Если также задано <literal>PDO::FETCH_PROPS_LATE</literal>, этот порядок
     меняется на обратный.
    </simpara>
    <programlisting role="php">
<![CDATA[
<?php
class Person
{
    private $name;

    public function __construct()
    {
        $this->tell();
    }

    public function tell()
    {
        if (isset($this->name)) {
            echo "Я {$this->name}.\n";
        } else {
            echo "У меня ещё нет имени.\n";
        }
    }
}

$sth = $dbh->query("SELECT * FROM people");
$sth->setFetchMode(PDO::FETCH_CLASS, 'Person');
$person = $sth->fetch();
$person->tell();
$sth->setFetchMode(PDO::FETCH_CLASS|PDO::FETCH_PROPS_LATE, 'Person');
$person = $sth->fetch();
$person->tell();
?>
]]>
    </programlisting>
    &example.outputs.similar;
    <screen>
<![CDATA[
Я - Alice.
Я Alice.
У меня ещё нет имени.
Я Bob.
]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><methodname>PDO::prepare</methodname></member>
    <member><methodname>PDOStatement::execute</methodname></member>
    <member><methodname>PDOStatement::fetchAll</methodname></member>
    <member><methodname>PDOStatement::fetchColumn</methodname></member>
    <member><methodname>PDOStatement::fetchObject</methodname></member>
    <member><methodname>PDOStatement::setFetchMode</methodname></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
