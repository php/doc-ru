<?xml version="1.0" encoding="UTF-8"?>
<!-- EN-Revision: 126161cc61f420766c5be5613d5cff0afc0b60e4 Maintainer: rjhdby Status: ready -->
<!-- Reviewed: no -->
<refentry xml:id="pdostatement.fetchall" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>PDOStatement::fetchAll</refname>
  <refpurpose>
   Возвращает массив, содержащий все строки результирующего набора
  </refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <modifier>public</modifier> <type>array</type><methodname>PDOStatement::fetchAll</methodname>
   <methodparam choice="opt"><type>int</type><parameter>mode</parameter><initializer>PDO::FETCH_DEFAULT</initializer></methodparam>
  </methodsynopsis>

  <methodsynopsis>
   <modifier>public</modifier> <type>array</type><methodname>PDOStatement::fetchAll</methodname>
   <methodparam><type>int</type><parameter>mode</parameter><initializer>PDO::FETCH_COLUMN</initializer></methodparam>
   <methodparam><type>int</type><parameter>column</parameter></methodparam>
  </methodsynopsis>

  <methodsynopsis>
   <modifier>public</modifier> <type>array</type><methodname>PDOStatement::fetchAll</methodname>
   <methodparam><type>int</type><parameter>mode</parameter><initializer>PDO::FETCH_CLASS</initializer></methodparam>
   <methodparam><type>string</type><parameter>class</parameter></methodparam>
   <methodparam><type class="union"><type>array</type><type>null</type></type><parameter>constructorArgs</parameter></methodparam>
  </methodsynopsis>

  <methodsynopsis>
   <modifier>public</modifier> <type>array</type><methodname>PDOStatement::fetchAll</methodname>
   <methodparam><type>int</type><parameter>mode</parameter><initializer>PDO::FETCH_FUNC</initializer></methodparam>
   <methodparam><type>callable</type><parameter>callback</parameter></methodparam>
  </methodsynopsis>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>mode</parameter></term>
     <listitem>
      <para>
       Определяет содержимое возвращаемого массива. Подробней можно узнать из
       документации к методу <function>PDOStatement::fetch</function>. По умолчанию
       параметр принимает значение <constant>PDO::ATTR_DEFAULT_FETCH_MODE</constant>
       (которое в свою очередь имеет умолчание <constant>PDO::FETCH_BOTH</constant>)
      </para>
      <para>
       Чтобы извлечь значения только одного столбца, передайте в качестве значения
       этого параметра константу <constant>PDO::FETCH_COLUMN</constant>. С помощью
       параметра <parameter>column</parameter> можно задать столбец, из
       которого требуется извлечь данные.
      </para>
      <para>
       Если требуется извлечь только уникальные строки одного столбца, нужно
       передать побитовое ИЛИ констант <constant>PDO::FETCH_COLUMN</constant> и
       <constant>PDO::FETCH_UNIQUE</constant>.
      </para>
      <para>
       Чтобы получить ассоциативный массив строк сгруппированный по значениям
       определённого столбца, нужно передать побитовое ИЛИ констант
       <constant>PDO::FETCH_COLUMN</constant> и <constant>PDO::FETCH_GROUP</constant>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>args</parameter></term>
     <listitem>
      <para>
       Смысл этого аргумента зависит от значения параметра
       <parameter>mode</parameter>:
       <itemizedlist>
        <listitem>
         <para>
          <constant>PDO::FETCH_COLUMN</constant>: Будет возвращён указанный столбец.
          Индексация столбцов начинается с 0.
         </para>
        </listitem>
        <listitem>
         <para>
          <constant>PDO::FETCH_CLASS</constant>: Будет создан и возвращён новый
          объект указанного класса. Свойствам объекта будут присвоены значения
          столбцов, имена которых совпадут с именами свойств.
         </para>
        </listitem>
        <listitem>
         <para>
          <constant>PDO::FETCH_FUNC</constant>: Будут возвращены результаты вызовов
          указанной функции. Данные каждой строки результирующего набора будут
          передаваться в эту функцию.
         </para>
        </listitem>
       </itemizedlist>
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>constructorArgs</parameter></term>
     <listitem>
      <para>
       Аргументы конструктора класса. Для случаев, когда параметру
       <parameter>mode</parameter> присвоено значение
       <constant>PDO::FETCH_CLASS</constant>.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   <function>PDOStatement::fetchAll</function> возвращает массив, содержащий все
   оставшиеся строки результирующего набора. Массив представляет каждую строку
   либо в виде массива значений одного столбца, либо в виде объекта, имена свойств
   которого совпадают с именами столбцов.
  </para>
  <para>
   Использование этого метода для извлечения строк больших результирующих
   наборов может пагубно сказаться на производительности системы и сетевых
   ресурсов. Вместо извлечения всех данных и их обработки в PHP рекомендуется
   использовать встроенные средства СУБД. Например, использование выражений
   WHERE и ORDER BY языка SQL может уменьшить размеры результирующего набора.
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <informaltable>
   <tgroup cols="2">
    <thead>
     <row>
      <entry>&Version;</entry>
      <entry>&Description;</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry>8.0.0</entry>
      <entry>
       Метод теперь всегда возвращает массив (&array;), раньше в случае возникновения ошибки могло возвращаться &false;.
      </entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example><title>Извлечение всех оставшихся строк результирующего набора</title>
    <programlisting role="php">
<![CDATA[
<?php
$sth = $dbh->prepare("SELECT name, colour FROM fruit");
$sth->execute();

/* Извлечение всех оставшихся строк результирующего набора */
print("Извлечение всех оставшихся строк результирующего набора:\n");
$result = $sth->fetchAll();
print_r($result);
?>
]]>
    </programlisting>
    &example.outputs.similar;
    <screen>
<![CDATA[
Извлечение всех оставшихся строк результирующего набора:
Array
(
    [0] => Array
        (
            [name] => apple
            [0] => apple
            [colour] => red
            [1] => red
        )

    [1] => Array
        (
            [name] => pear
            [0] => pear
            [colour] => green
            [1] => green
        )

    [2] => Array
        (
            [name] => watermelon
            [0] => watermelon
            [colour] => pink
            [1] => pink
        )
)
]]>
    </screen>
   </example>
   <example>
    <title>
     Извлечение всех значений одного столбца результирующего набора
    </title>
    <para>
     В следующем примере показано, как извлечь из результирующего набора значения
     только одного столбца, даже если строки содержат значения нескольких столбцов.
    </para>
    <programlisting role="php">
<![CDATA[
<?php
$sth = $dbh->prepare("SELECT name, colour FROM fruit");
$sth->execute();

/* Извлечение всех значений первого столбца */
$result = $sth->fetchAll(PDO::FETCH_COLUMN, 0);
var_dump($result);
?>
]]>
    </programlisting>
    &example.outputs.similar;
    <screen>
<![CDATA[
Array(3)
(
    [0] =>
    string(5) => apple
    [1] =>
    string(4) => pear
    [2] =>
    string(10) => watermelon
)
]]>
    </screen>
   </example>
   <example>
    <title>
     Группировка строк по значениям одного столбца
    </title>
    <para>
     В следующем примере показано, как получить ассоциативный массив строк
     результирующего набора, сгруппированных по значениям указанного столбца. Массив
     содержит три ключа: значения <literal>apple</literal> и <literal>pear</literal> являются
     массивами, содержащими два разных цвета; в тоже время <literal>watermelon</literal>
     будет массивом, содержащим только один цвет.
    </para>
    <programlisting role="php">
<![CDATA[
<?php
$insert = $dbh->prepare("INSERT INTO fruit(name, colour) VALUES (?, ?)");
$insert->execute(array('apple', 'green'));
$insert->execute(array('pear', 'yellow'));

$sth = $dbh->prepare("SELECT name, colour FROM fruit");
$sth->execute();

/* Группируем записи по значениям первого столбца */
var_dump($sth->fetchAll(PDO::FETCH_COLUMN|PDO::FETCH_GROUP));
?>
]]>
    </programlisting>
    &example.outputs.similar;
    <screen>
<![CDATA[
array(3) {
  ["apple"]=>
  array(2) {
    [0]=>
    string(5) "green"
    [1]=>
    string(3) "red"
  }
  ["pear"]=>
  array(2) {
    [0]=>
    string(5) "green"
    [1]=>
    string(6) "yellow"
  }
  ["watermelon"]=>
  array(1) {
    [0]=>
    string(5) "pink"
  }
}

]]>
    </screen>
   </example>
   <example>
    <title>
     Создание объекта для каждой строки
    </title>
    <para>
     В следующем примере показано поведение метода в режиме выборки
     <constant>PDO::FETCH_CLASS</constant>.
    </para>
    <programlisting role="php">
<![CDATA[
<?php
class fruit {
    public $name;
    public $colour;
}

$sth = $dbh->prepare("SELECT name, colour FROM fruit");
$sth->execute();

$result = $sth->fetchAll(PDO::FETCH_CLASS, "fruit");
var_dump($result);
?>
]]>
    </programlisting>
    &example.outputs.similar;
    <screen>
<![CDATA[
array(3) {
  [0]=>
  object(fruit)#1 (2) {
    ["name"]=>
    string(5) "apple"
    ["colour"]=>
    string(5) "green"
  }
  [1]=>
  object(fruit)#2 (2) {
    ["name"]=>
    string(4) "pear"
    ["colour"]=>
    string(6) "yellow"
  }
  [2]=>
  object(fruit)#3 (2) {
    ["name"]=>
    string(10) "watermelon"
    ["colour"]=>
    string(4) "pink"
  }
  [3]=>
  object(fruit)#4 (2) {
    ["name"]=>
    string(5) "apple"
    ["colour"]=>
    string(3) "red"
  }
  [4]=>
  object(fruit)#5 (2) {
    ["name"]=>
    string(4) "pear"
    ["colour"]=>
    string(5) "green"
  }
}
]]>
    </screen>
   </example>
   <example>
    <title>
     Вызов функции для каждой строки
    </title>
    <para>
     В следующем примере показано поведение метода в режиме выборки
     <constant>PDO::FETCH_FUNC</constant>.
    </para>
    <programlisting role="php">
<![CDATA[
<?php
function fruit($name, $colour) {
    return "{$name}: {$colour}";
}

$sth = $dbh->prepare("SELECT name, colour FROM fruit");
$sth->execute();

$result = $sth->fetchAll(PDO::FETCH_FUNC, "fruit");
var_dump($result);
?>
]]>
    </programlisting>
    &example.outputs.similar;
    <screen>
<![CDATA[
array(3) {
  [0]=>
  string(12) "apple: green"
  [1]=>
  string(12) "pear: yellow"
  [2]=>
  string(16) "watermelon: pink"
  [3]=>
  string(10) "apple: red"
  [4]=>
  string(11) "pear: green"
}
]]>
    </screen>
   </example>

  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>PDO::query</function></member>
    <member><function>PDOStatement::fetch</function></member>
    <member><function>PDOStatement::fetchColumn</function></member>
    <member><function>PDO::prepare</function></member>
    <member><function>PDOStatement::setFetchMode</function></member>
   </simplelist>
  </para>
 </refsect1>
</refentry><!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
