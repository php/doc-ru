<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: a1772e86ca91b72001b0875c73c314574cb7526d Maintainer: tmn Status: ready -->
<!-- Reviewed: no -->

<chapter xml:id="pdo.lobs" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>Большие объекты (LOB)</title>
 <para>
   Иногда для работы приложения необходимо хранить "большие" порции данных в базе.
   Обычно, под большим понимают объем данных "около 4 килобайт или больше", хотя
   некоторые базы данных могут спокойно обрабатывать до 32 килобайт, прежде чем
   размер данных становится "большим". Большие объекты могут быть текстовыми или
   двоичными. PDO позволяет работать с такими объектами путём установки типа данных
   <constant>PDO::PARAM_LOB</constant> в методах
   <function>PDOStatement::bindParam</function> или
   <function>PDOStatement::bindColumn</function>.
   <constant>PDO::PARAM_LOB</constant> сообщает PDO, что нужно пометить эти данные,
   как поток. И соответственно работать с такими объектами можно, используя
   <link linkend="ref.stream">API потоков PHP</link>.
 </para>
 <para>
  <example>
   <title>Вывод изображения, хранящегося в базе данных</title>
   <para>
    В этом примере переменной $lob задают в соответствие большой объект LOB, а
    затем отсылают её в браузер с помощью функции
    <function>fpassthru</function>. Так как LOB представляется в виде потока,
    с ним могут работать такие функции, как
    <function>fgets</function>, <function>fread</function> и
    <function>stream_get_contents</function>.
   </para>
   <programlisting role="php">
<![CDATA[
<?php
$db = new PDO('odbc:SAMPLE', 'db2inst1', 'ibmdb2');
$stmt = $db->prepare("select contenttype, imagedata from images where id=?");
$stmt->execute(array($_GET['id']));
$stmt->bindColumn(1, $type, PDO::PARAM_STR, 256);
$stmt->bindColumn(2, $lob, PDO::PARAM_LOB);
$stmt->fetch(PDO::FETCH_BOUND);

header("Content-Type: $type");
fpassthru($lob);
?>
]]>
   </programlisting>
  </example>
 </para>
 <para>
  <example>
   <title>Вставка изображения в базу данных</title>
   <para>
    В этом примере будет открывается файл с изображением, его файловый указатель
    передаётся PDO, который в свою очередь вставляет изображение в базу в виде LOB.
    PDO извлечёт содержимое файла и поместит его в базу наиболее эффективным
    способом.
   </para>
   <programlisting role="php">
<![CDATA[
<?php
$db = new PDO('odbc:SAMPLE', 'db2inst1', 'ibmdb2');
$stmt = $db->prepare("insert into images (id, contenttype, imagedata) values (?, ?, ?)");
$id = get_new_id(); // какая-то функция для выделения нового ID

// предположим, что мы находимся на странице загрузки файлов на удалённый сервер

$fp = fopen($_FILES['file']['tmp_name'], 'rb');

$stmt->bindParam(1, $id);
$stmt->bindParam(2, $_FILES['file']['type']);
$stmt->bindParam(3, $fp, PDO::PARAM_LOB);

$db->beginTransaction();
$stmt->execute();
$db->commit();
?>
]]>
   </programlisting>
  </example>
 </para>
 <para>
  <example>
   <title>Вставка изображения в базу данных: Oracle</title>
   <para>
    В случае с базами Oracle требуется несколько иной синтаксис для извлечения
    содержимого файла и помещения в базу. Также необходимо выполнять вставку
    в рамках транзакции, иначе вставленный LOB будет зафиксирован в базе с нулевой
    длиной, так как если не обозначить границы транзакции, изменения будут
    фиксироваться после каждого выполненного запроса.
   </para>
   <programlisting role="php">
<![CDATA[
<?php
$db = new PDO('oci:', 'scott', 'tiger');
$stmt = $db->prepare("insert into images (id, contenttype, imagedata) " .
"VALUES (?, ?, EMPTY_BLOB()) RETURNING imagedata INTO ?");
$id = get_new_id(); // какая-то функция для выделения ID

// предположим, что мы находимся на странице загрузки файлов на удалённый сервер

$fp = fopen($_FILES['file']['tmp_name'], 'rb');

$stmt->bindParam(1, $id);
$stmt->bindParam(2, $_FILES['file']['type']);
$stmt->bindParam(3, $fp, PDO::PARAM_LOB);

$db->beginTransaction();
$stmt->execute();
$db->commit();
?>
]]>
   </programlisting>
  </example>
 </para>
</chapter>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
