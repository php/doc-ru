<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: f6e0117681a1d76916d1337c19245442a4fd2554 Maintainer: tmn Status: ready -->
<!-- Reviewed: no -->
<refentry xml:id="pdo.query" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>PDO::query</refname>
  <refpurpose>
   Подготавливает и выполняет выражение SQL без заполнителей
  </refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <modifier>public</modifier> <type class="union"><type>PDOStatement</type><type>false</type></type><methodname>PDO::query</methodname>
   <methodparam><type>string</type><parameter>query</parameter></methodparam>
   <methodparam choice="opt"><type class="union"><type>int</type><type>null</type></type><parameter>fetchMode</parameter><initializer>&null;</initializer></methodparam>
  </methodsynopsis>

  <methodsynopsis>
   <modifier>public</modifier> <type class="union"><type>PDOStatement</type><type>false</type></type><methodname>PDO::query</methodname>
   <methodparam><type>string</type><parameter>query</parameter></methodparam>
   <methodparam choice="opt"><type class="union"><type>int</type><type>null</type></type><parameter>fetchMode</parameter><initializer>PDO::FETCH_COLUMN</initializer></methodparam>
   <methodparam><type>int</type><parameter>colno</parameter></methodparam>
  </methodsynopsis>

  <methodsynopsis>
   <modifier>public</modifier> <type class="union"><type>PDOStatement</type><type>false</type></type><methodname>PDO::query</methodname>
   <methodparam><type>string</type><parameter>query</parameter></methodparam>
   <methodparam choice="opt"><type class="union"><type>int</type><type>null</type></type><parameter>fetchMode</parameter><initializer>PDO::FETCH_CLASS</initializer></methodparam>
   <methodparam><type>string</type><parameter>classname</parameter></methodparam>
   <methodparam><type>array</type><parameter>constructorArgs</parameter></methodparam>
  </methodsynopsis>

  <methodsynopsis>
   <modifier>public</modifier> <type class="union"><type>PDOStatement</type><type>false</type></type><methodname>PDO::query</methodname>
   <methodparam><type>string</type><parameter>query</parameter></methodparam>
   <methodparam choice="opt"><type class="union"><type>int</type><type>null</type></type><parameter>fetchMode</parameter><initializer>PDO::FETCH_INTO</initializer></methodparam>
   <methodparam><type>object</type><parameter>object</parameter></methodparam>
  </methodsynopsis>

  <para>
   <function>PDO::query</function> подготавливает и выполняет выражение SQL за один вызов функции,
   возвращая выражение как объект <classname>PDOStatement</classname>.
  </para>
  <para>
   Если запрос будет запускаться многократно, для улучшения производительности
   приложения имеет смысл этот запрос один раз подготовить <classname>PDOStatement</classname> методом
   <function>PDO::prepare</function>, а затем запускать на выполнение методом
   <function>PDOStatement::execute</function> столько раз, сколько потребуется.
  </para>
  <para>
   Если после выполнения предыдущего запроса вы не выбрали все данные из
   результирующего набора, следующий вызов <function>PDO::query</function>
   может потерпеть неудачу. В таких случаях следует вызывать метод
   <function>PDOStatement::closeCursor</function>, который освободит ресурсы
   базы данных, занятые предыдущим объектом <classname>PDOStatement</classname>. После этого можно
   безопасно вызывать <function>PDO::query</function>.
  </para>

  <note>
   <para>
    Если <parameter>query</parameter> содержит заполнители, выражение должно быть подготовлено и выполнено отдельно
    с использованием методов <function>PDO::prepare</function> и
    <function>PDOStatement::execute</function>.
   </para>
  </note>

 </refsect1>
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>query</parameter></term>
     <listitem>
      <para>
       SQL-запрос для подготовки и выполнения.
      </para>
      <para>
       Если SQL содержит заполнители, вместо этого метода следует использовать <function>PDO::prepare</function> и
        <function>PDOStatement::execute</function>.
       В качестве альтернативы, SQL можно подготовить вручную перед вызовом <function>PDO::query</function>,
       при этом данные должны быть правильно отформатированы с использованием <function>PDO::quote</function>,
       если драйвер поддерживает это.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>fetchMode</parameter></term>
      <listitem>
       <para>
        Режим выборки по умолчанию для возвращённого <classname>PDOStatement</classname>.
        Должен быть одной из констант <link linkend="pdo.constants"><literal>PDO::FETCH_*</literal></link>.
       </para>
       <para>
        Если этот аргумент передаётся функции, остальные аргументы будут обрабатываться так,
        как если бы <methodname>PDOStatement::setFetchMode</methodname> был вызван для полученного объекта выражения.
        Последующие аргументы зависят от выбранного режима выборки.
       </para>
      </listitem>
     </varlistentry>
   </variablelist>
  </para>
 </refsect1>
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Возвращает объект <classname>PDOStatement</classname>&return.falseforfailure;.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>SQL без заполнителей может быть выполнен с использованием <function>PDO::query</function></title>
    <programlisting role="php">
<![CDATA[
<?php
$sql = 'SELECT name, color, calories FROM fruit ORDER BY name';
foreach ($conn->query($sql) as $row) {
    print $row['name'] . "\t";
    print $row['color'] . "\t";
    print $row['calories'] . "\n";
}
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
apple   red     150
banana  yellow  250
kiwi    brown   75
lemon   yellow  25
orange  orange  300
pear    green   150
watermelon      pink    90
]]>
    </screen>
   </example>
  </para>
 </refsect1>


 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>PDO::exec</function></member>
    <member><function>PDO::prepare</function></member>
    <member><function>PDOStatement::execute</function></member>
   </simplelist>
  </para>
 </refsect1>


</refentry><!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
