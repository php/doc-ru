<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: c9c158137b0f4658c29faef4043472dc74896d0c Maintainer: tmn Status: ready -->
<!-- Reviewed: yes Maintainer: lex -->
<!-- $Revision$ -->
<refentry xml:id="pdo.quote" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>PDO::quote</refname>
  <refpurpose>
   Заключает строку в кавычки для использования в запросе
  </refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <modifier>public</modifier> <type class="union"><type>string</type><type>false</type></type><methodname>PDO::quote</methodname>
   <methodparam><type>string</type><parameter>string</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>type</parameter><initializer>PDO::PARAM_STR</initializer></methodparam>
  </methodsynopsis>

  <para>
   <function>PDO::quote</function> заключает строку в кавычки (если требуется) и
   экранирует специальные символы внутри строки подходящим для драйвера способом.
  </para>
  <para>
   Если вы используете эту функцию для построения SQL запросов,
   <emphasis>настоятельно</emphasis> рекомендуется пользоваться методом
   <function>PDO::prepare</function> для подготовки запроса с псевдопеременными
   вместо использования <function>PDO::quote</function> для вставки данных введённых
   пользователем в SQL запрос. Подготавливаемые запросы с параметрами не только
   компактней, удобней, устойчивей к SQL-инъекции, но и работают быстрее, нежели
   вручную построенные запросы, так как клиент и сервер могут кешировать
   такие запросы в уже скомпилированном виде.
  </para>
  <para>
   Не все драйверы PDO реализуют этот метод (особенно PDO_ODBC). Предполагается,
   что вместо него будут использоваться подготавливаемые запросы.
  </para>
  <caution>
   <title>Безопасность: набор символов по умолчанию</title>
   <para>
    Для корректной работы <methodname>PDO::quote</methodname> набор
    символов должен быть задан либо на сервере, либо задаваться
    самим соединением с базой данных (это зависит от драйвера).
    Подробнее смотрите
    <link linkend="pdo.drivers">документацию к драйверу базы данных</link>.
   </para>
  </caution>
 </refsect1>
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>string</parameter></term>
      <listitem>
       <para>
        Экранируемая строка.
       </para>
      </listitem>
     </varlistentry>
    <varlistentry>
     <term><parameter>type</parameter></term>
      <listitem>
       <para>
        Представляет подсказку о типе данных первого параметра для драйверов,
        которые имеют альтернативные способы экранирования.
       </para>
      </listitem>
     </varlistentry>
   </variablelist>
  </para>
 </refsect1>
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Возвращает экранированную строку, которую теоретически безопасно использовать
   в теле SQL запроса. Возвращает &false;, если драйвер не поддерживает
   экранирование.
  </para>
 </refsect1>

 <!-- Use when ERRORS exist
 <refsect1 role="errors">
  &reftitle.errors;
  <para>
   When does this function throw E_* level errors, or exceptions?
  </para>
 </refsect1>
 -->

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Экранирование обычной строки</title>
    <programlisting role="php">
<![CDATA[
<?php
$conn = new PDO('sqlite:/home/lynn/music.sql3');

/* простая строка */
$string = 'Nice';
print "Неэкранированная строка: $string\n";
print "Экранированная строка: " . $conn->quote($string) . "\n";
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Неэкранированная строка: Nice
Экранированная строка: 'Nice'
]]>
    </screen>
   </example>
   <example>
    <title>Экранирование небезопасной строки</title>
    <programlisting role="php">
<![CDATA[
<?php
$conn = new PDO('sqlite:/home/lynn/music.sql3');

/* небезопасная строка */
$string = 'Naughty \' string';
print "Неэкранированная строка: $string\n";
print "Экранированная строка:" . $conn->quote($string) . "\n";
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Неэкранированная строка: Naughty ' string
Экранированная строка: 'Naughty '' string'
]]>
    </screen>
   </example>
   <example>
    <title>Экранирование сложной строки</title>
    <programlisting role="php">
<![CDATA[
<?php
$conn = new PDO('sqlite:/home/lynn/music.sql3');

/* сложная строка */
$string = "Co'mpl''ex \"st'\"ring";
print "Неэкранированная строка: $string\n";
print "Экранированная строка: " . $conn->quote($string) . "\n";
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Неэкранированная строка: Co'mpl''ex "st'"ring
Экранированная строка: 'Co''mpl''''ex "st''"ring'
]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>PDO::prepare</function></member>
    <member><function>PDOStatement::execute</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
