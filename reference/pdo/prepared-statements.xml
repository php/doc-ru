<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 84e8f0960b841a5ebca9d81cd2c2311b6504a371 Maintainer: rjhdby Status: ready -->
<!-- Reviewed: yes -->

<chapter xml:id="pdo.prepared-statements" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>Подготовленные запросы и хранимые процедуры</title>
 <para>
  Большинство баз данных поддерживают концепцию подготовленных запросов. Что это
  такое? Это можно описать, как некий вид скомпилированного шаблона SQL запроса,
  который будет запускаться приложением и настраиваться с помощью входных
  параметров. У подготовленных запросов есть два главных преимущества:
 </para>
 <itemizedlist>
  <listitem>
   <simpara>
    Запрос необходимо однажды подготовить и затем его можно запускать столько
    раз, сколько нужно, причём как с теми же, так и с отличающимися параметрами.
    Когда запрос подготовлен, СУБД анализирует его, компилирует и оптимизирует
    план его выполнения. В случае сложных запросов этот процесс может занимать
    ощутимое время и заметно замедлить работу приложения, если потребуется много
    раз выполнять запрос с разными параметрами. При использовании подготовленного
    запроса СУБД анализирует/компилирует/оптимизирует запрос любой сложности только
    один раз, а приложение запускает на выполнение уже подготовленный шаблон. Таким
    образом подготовленные запросы потребляют меньше ресурсов и работают быстрее.
   </simpara>
  </listitem>
  <listitem>
   <simpara>
    Параметры подготовленного запроса не требуется экранировать кавычками; драйвер
    это делает автоматически. Если в приложении используются исключительно
    подготовленные запросы, разработчик может быть уверен, что никаких
    SQL-инъекций случиться не может (однако, если другие части текста запроса создаются
    с неэкранированным вводом, то SQL инъекция по-прежнему возможна).
   </simpara>
  </listitem>
 </itemizedlist>
 <para>
  Подготовленные запросы также полезны тем, что PDO может эмулировать их, если
  драйвер базы данных не имеет подобной функциональности. Это значит, что приложение
  может пользоваться одной и той же методикой доступа к данным независимо от
  возможностей СУБД.
 </para>
 <para>
  <example>
   <title>Повторяющиеся вставки в базу с использованием подготовленных запросов</title>
   <simpara>
    В этом примере 2 раза выполняется INSERT запрос с разными значениями
    <literal>name</literal> и <literal>value</literal>, которые подставляются
    вместо соответствующих псевдопеременных:
   </simpara>
   <programlisting role="php">
<![CDATA[
<?php
$stmt = $dbh->prepare("INSERT INTO REGISTRY (name, value) VALUES (:name, :value)");
$stmt->bindParam(':name', $name);
$stmt->bindParam(':value', $value);

// вставим одну строку
$name = 'one';
$value = 1;
$stmt->execute();

// теперь другую строку с другими значениями
$name = 'two';
$value = 2;
$stmt->execute();
?>
]]>
   </programlisting>
  </example>
 </para>
 <para>
  <example>
   <title>Повторяющиеся вставки в базу с использованием подготовленных запросов</title>
   <simpara>
    В этом примере 2 раза выполняется INSERT запрос с разными значениями
    <literal>name</literal> и <literal>value</literal>, которые подставляются вместо
    псевдопеременных <literal>?</literal>.
   </simpara>
   <programlisting role="php">
<![CDATA[
<?php
$stmt = $dbh->prepare("INSERT INTO REGISTRY (name, value) VALUES (?, ?)");
$stmt->bindParam(1, $name);
$stmt->bindParam(2, $value);

// вставим одну строку
$name = 'one';
$value = 1;
$stmt->execute();

// теперь другую строку с другими значениями
$name = 'two';
$value = 2;
$stmt->execute();
?>
]]>
   </programlisting>
  </example>
 </para>
 <para>
  <example>
   <title>Выборка данных с использованием подготовленных запросов</title>
   <simpara>
    В этом примере производится выборка из базы по ключу, который вводит
    пользователь через форму. Пользовательский ввод автоматически заключается
    в кавычки, поэтому нет риска SQL инъекции.
   </simpara>
   <programlisting role="php">
<![CDATA[
<?php
$stmt = $dbh->prepare("SELECT * FROM REGISTRY where name = ?");
$stmt->execute([$_GET['name']]);
foreach ($stmt as $row) {
  print_r($row);
}
?>
]]>
   </programlisting>
  </example>
 </para>

 <para>
  <example>
   <title>Вызов хранимой процедуры с выходными параметрами</title>
   <simpara>
    Если СУБД поддерживает выходные параметры, приложение может пользоваться ими
    также как и входными. Выходные параметры обычно используют для получения данных
    из хранимых процедур. Пользоваться выходными параметрами несколько сложнее, так
    как разработчику необходимо знать максимальный размер извлекаемых значений ещё
    на этапе задания этих параметров. Если извлекаемое значение окажется больше,
    чем предполагалось, будет вызвана ошибка.
   </simpara>
   <programlisting role="php">
<![CDATA[
<?php
$stmt = $dbh->prepare("CALL sp_returns_string(?)");
$stmt->bindParam(1, $return_value, PDO::PARAM_STR, 4000);

// вызов хранимой процедуры
$stmt->execute();

print "процедура вернула $return_value\n";
?>
]]>
   </programlisting>
  </example>
 </para>

 <para>
  <example>
   <title>Вызов хранимой процедуры с входным/выходным параметром</title>
   <simpara>
    Можно задать параметр одновременно входным и выходным; синтаксис при этом тот же,
    что и для выходных параметров. В следующем примере строка 'привет' передаётся в
    хранимую процедуру, а затем эта строка будет заменена возвращаемым значением.
   </simpara>
   <programlisting role="php">
<![CDATA[
<?php
$stmt = $dbh->prepare("CALL sp_takes_string_returns_string(?)");
$value = 'привет';
$stmt->bindParam(1, $value, PDO::PARAM_STR|PDO::PARAM_INPUT_OUTPUT, 4000);

// вызов хранимой процедуры
$stmt->execute();

print "процедура вернула $value\n";
?>
]]>
   </programlisting>
  </example>
 </para>
 <para>
  <example>
   <title>Неправильное использование псевдопеременной</title>
   <programlisting role="php">
<![CDATA[
<?php
$stmt = $dbh->prepare("SELECT * FROM REGISTRY where name LIKE '%?%'");
$stmt->execute([$_GET['name']]);

// псевдопеременная может использоваться только в виде отдельного значения
$stmt = $dbh->prepare("SELECT * FROM REGISTRY where name LIKE ?");
$stmt->execute(["%$_GET[name]%"]);
?>
]]>
   </programlisting>
  </example>
 </para>
</chapter>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
