<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 1fe877df2ef8c09670a4ff12cf42ef39d35ab9ec Maintainer: tmn Status: ready -->
<!-- Reviewed: no -->
<chapter xml:id="pdo.error-handling" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>Ошибки и их обработка</title>
 <para>
  PDO предлагает на выбор 3 стратегии обработки ошибок в зависимости от вашего
  стиля разработки приложений.
 </para>
 <itemizedlist>
  <listitem>
   <para>
    <constant>PDO::ERRMODE_SILENT</constant>
   </para>
   <para>
     До PHP 8.0.0, это был режим по умолчанию. PDO просто предоставит вам код ошибки, который
     можно получить методами <function>PDO::errorCode</function> и
     <function>PDO::errorInfo</function>. Эти методы реализованы как в объектах
     запросов, так и в объектах баз данных. Если ошибка вызвана во время выполнения
     кода объекта запроса, нужно вызвать метод
     <function>PDOStatement::errorCode</function> или
     <function>PDOStatement::errorInfo</function> этого объекта. Если ошибка
     вызова объекта базы данных, нужно вызвать аналогичные методы у этого объекта.
    </para>
  </listitem>
  <listitem>
   <para>
    <constant>PDO::ERRMODE_WARNING</constant>
   </para>
   <para>
     Помимо установки кода ошибки PDO выдаст обычное E_WARNING сообщение. Это может
     быть полезно при отладке или тестировании, когда нужно видеть, что произошло,
     но не нужно прерывать работу приложения.
    </para>
   </listitem>
   <listitem>
    <para>
     <constant>PDO::ERRMODE_EXCEPTION</constant>
    </para>
    <para>
     Начиная с PHP 8.0.0 является режимом по умолчанию. Помимо задания кода ошибки PDO будет выбрасывать исключение
     <classname>PDOException</classname>, свойства которого будут отражать
     код ошибки и её описание. Этот режим также полезен при отладке, так как
     сразу известно, где в программе произошла ошибка. Это позволяет быстро
     локализовать и решить проблему. (Не забывайте, что если исключение
     является причиной завершения работы скрипта, все активные транзакции
     будут откачены.)
    </para>
    <para>
     Режим исключений также полезен, так как даёт возможность структурировать
     обработку ошибок более тщательно, нежели с обычными предупреждениями PHP, а
     также с меньшей вложенностью кода, чем в случае работы в тихом режиме с
     явной проверкой возвращаемых значений при каждом обращении к базе данных.
    </para>
    <para>
     Подробнее об исключениях в PHP смотрите в разделе <link linkend="language.exceptions">Исключения</link>.
    </para>
   </listitem>
 </itemizedlist>
 <para>
  PDO стандартизирован для работы со строковыми кодами ошибок SQL-92 SQLSTATE.
  Отдельные драйверы PDO могут задавать соответствия своих собственных кодов
  кодам SQLSTATE. Метод <function>PDO::errorCode</function> возвращает одиночный
  код SQLSTATE. Если необходима специфичная информация об ошибке, PDO предлагает
  метод <function>PDO::errorInfo</function>, который возвращает массив, содержащий
  код SQLSTATE, код ошибки драйвера, а также строку ошибки драйвера.
 </para>

 <para>
  <example>
   <title>Создание PDO объекта и установка режима обработки ошибок</title>
   <programlisting role="php">
<![CDATA[
<?php
$dsn = 'mysql:dbname=testdb;host=127.0.0.1';
$user = 'dbuser';
$password = 'dbpass';

try {
    $dbh = new PDO($dsn, $user, $password);
    $dbh->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
} catch (PDOException $e) {
    echo 'Подключение не удалось: ' . $e->getMessage();
}

?>
]]>
   </programlisting>
  </example>
 </para>
 <note>
  <para>
   Метод <function>PDO::__construct</function> будет всегда бросать исключение <classname>PDOException</classname>,
   если соединение оборвалось, независимо от установленного значения <constant>PDO::ATTR_ERRMODE</constant>.
   Непойманные исключения фатальны.
  </para>
 </note>
 <para>
  <example>
   <title>Создание экземпляра класса PDO и установка режима обработки ошибок в конструкторе</title>
   <programlisting role="php">
<![CDATA[
<?php
$dsn = 'mysql:dbname=test;host=127.0.0.1';
$user = 'googleguy';
$password = 'googleguy';

/*
    По-прежнему оберните конструктор в блок try/catch, так как, даже при установке ERRMODE в WARNING,
    PDO::__construct всегда будет бросать исключение PDOException, если соединение оборвалось.
*/
try {
    $dbh = new PDO($dsn, $user, $password, array(PDO::ATTR_ERRMODE => PDO::ERRMODE_WARNING));
} catch (PDOException $e) {
    echo 'Соединение оборвалось: ' . $e->getMessage();
    exit;
}

// Следующий запрос приводит к ошибке уровня E_WARNING вместо исключения (когда таблица не существует)
$dbh->query("SELECT wrongcolumn FROM wrongtable");
?>
]]>
   </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Warning: PDO::query(): SQLSTATE[42S02]: Base table or view not found: 1146 Table 'test.wrongtable' doesn't exist in
/tmp/pdo_test.php on line 18
]]>
    </screen>
  </example>
 </para>
</chapter>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
