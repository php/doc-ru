<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: a8863b0123dc5348c91e67198b995222878a7e65 Maintainer: tmn Status: ready -->
<!-- Reviewed: no -->
<!-- Generated by xml_proto.php v2.1. Found in /scripts directory of phpdoc. -->
<appendix xml:id="pdo.constants" xmlns="http://docbook.org/ns/docbook">
 &reftitle.constants;
 &extension.constants;
 <variablelist>
  <varlistentry xml:id="pdo.constants.param-bool">
   <term>
    <constant>PDO::PARAM_BOOL</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Представляет логический тип данных.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.param-null">
   <term>
    <constant>PDO::PARAM_NULL</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Представляет тип данных SQL NULL.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.param-int">
   <term>
    <constant>PDO::PARAM_INT</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Представляет тип данных SQL INTEGER.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.param-str">
   <term>
    <constant>PDO::PARAM_STR</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Представляет типы данных SQL CHAR, VARCHAR и другие строковые типы.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.param-str-natl">
   <term>
    <constant>PDO::PARAM_STR_NATL</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Флаг для обозначения, что строки используют национальный набор символов.
    </simpara>
    <simpara>
     Константа доступна с версии PHP 7.2.0
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.param-str-char">
   <term>
    <constant>PDO::PARAM_STR_CHAR</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Флаг для обозначения, что строки используют обычный набор символов.
    </simpara>
    <simpara>
     Константа доступна с версии PHP 7.2.0
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.param-lob">
   <term>
    <constant>PDO::PARAM_LOB</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Представляет в БД SQL тип данных для больших объектов (англ. Large Objects, LOB).
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.param-stmt">
   <term>
    <constant>PDO::PARAM_STMT</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Представляет тип recordset. На данный момент не поддерживается драйверами.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.param-input-output">
   <term>
    <constant>PDO::PARAM_INPUT_OUTPUT</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Указывает, что параметр является параметром INOUT для хранимой процедуры.
     Для задания типа данных необходимо применить побитовое ИЛИ этой константы с
     константой типа PDO::PARAM_*.
    </simpara>
   </listitem>
  </varlistentry>
<varlistentry xml:id="pdo.constants.fetch-default">
   <term>
    <constant>PDO::FETCH_DEFAULT</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Указывает, что должен использоваться режим выборки по умолчанию. Доступно с PHP 8.0.7.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.fetch-lazy">
   <term>
    <constant>PDO::FETCH_LAZY</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Указывает, что метод выборки данных должен возвращать каждую строку в виде объекта
     с именами свойств, которые соответствуют именам столбцов, которые были возвращены в результирующем наборе.
     Константа <constant>PDO::FETCH_LAZY</constant> возвращает
     объект класса <classname>PDORow</classname>,
     который создаёт имена свойств объекта по мере доступа к ним.
     Константа недействительна внутри метода
     <methodname>PDOStatement::fetchAll</methodname>.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.fetch-assoc">
   <term>
    <constant>PDO::FETCH_ASSOC</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Указывает, что метод, осуществляющий выборку данных, должен возвращать
     каждую строку результирующего набора в виде ассоциативного массива, индексы
     которого соответствуют именам столбцов результата выборки. Если в
     результирующем наборе несколько столбцов с одинаковыми именами,
     <constant>PDO::FETCH_ASSOC</constant> будет возвращать по одному значению
     для каждого столбца. Значения дублирующихся столбцов будут утеряны.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.fetch-named">
   <term>
    <constant>PDO::FETCH_NAMED</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Указывает, что метод, осуществляющий выборку данных, должен возвращать
     каждую строку результирующего набора в виде ассоциативного массива, индексы
     которого соответствуют именам столбцов результата выборки. Если в
     результирующем наборе несколько столбцов с одинаковыми именами,
     <constant>PDO::FETCH_NAMED</constant> возвращает массив значений для каждого
     имени столбца.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.fetch-num">
   <term>
    <constant>PDO::FETCH_NUM</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Указывает, что метод, осуществляющий выборку данных, должен возвращать
     каждую строку результирующего набора в виде массива, индексы которого
     соответствуют порядковым номерам столбцов результата выборки. Нумерация
     начинается с 0.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.fetch-both">
   <term>
    <constant>PDO::FETCH_BOTH</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Указывает, что метод, осуществляющий выборку данных, должен возвращать
     каждую строку результирующего набора в виде массива. Индексация массива
     производится и по именам столбцов и по их порядковым номерам в результирующей
     таблице. Нумерация начинается с 0.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.fetch-obj">
   <term>
    <constant>PDO::FETCH_OBJ</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Указывает, что метод, осуществляющий выборку данных, должен возвращать
     каждую строку результирующего набора в виде объекта, имена свойств которого
     соответствуют именам столбцов результирующей таблицы.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.fetch-bound">
   <term>
    <constant>PDO::FETCH_BOUND</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Указывает, что метод, осуществляющий выборку данных, должен возвращать
     TRUE и присваивать значения столбцов таблицы переменным PHP, которые были
     привязаны методами <methodname>PDOStatement::bindParam</methodname> или
     <methodname>PDOStatement::bindColumn</methodname>.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.fetch-column">
   <term>
    <constant>PDO::FETCH_COLUMN</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Указывает, что метод, осуществляющий выборку данных, должен возвращать
     значение только одного столбца из следующей строки результирующего набора.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.fetch-class">
   <term>
    <constant>PDO::FETCH_CLASS</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Указывает, что метод извлечения данных вернёт
     новый экземпляр запрошенного класса.
    </simpara>
    <note>
     <simpara>
      Объект инициализируется путём сопоставления столбцов из набора с результатами запроса
      со свойствами класса. Столбцы сопоставляются до вызова конструктора,
      что разрешает заполнять свойства независимо
      от видимости или установки модификатора <literal>readonly</literal>.
      PHP вызовет магический метод
      <link linkend="object.set">__set()</link>,
      если класс не содержит свойства с таким названием и если метод определили в классе; иначе в объекте создаётся
      динамическое открытое свойство. Однако при установке флага <constant>PDO::FETCH_PROPS_LATE</constant>
      конструктор вызывается <emphasis>до</emphasis> заполнения
      свойств.
     </simpara>
    </note>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.fetch-into">
   <term>
    <constant>PDO::FETCH_INTO</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Указывает, что метод извлечения данных обновит
     существующий объект запрошенного класса, заполняя именованные свойства
     класса значениями столбцов результирующей таблицы.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.fetch-func">
   <term>
    <constant>PDO::FETCH_FUNC</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Настраивает обработку данных «на лету» во время выборки. Константа
     действительна только для функции <methodname>PDOStatement::fetchAll</methodname>.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.fetch-group">
   <term>
    <constant>PDO::FETCH_GROUP</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Группирует значения возврата. Обычно комбинируется с константой
     <constant>PDO::FETCH_COLUMN</constant>
     или <constant>PDO::FETCH_KEY_PAIR</constant>.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.fetch-unique">
   <term>
    <constant>PDO::FETCH_UNIQUE</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Включает режим выборки только уникальных значений с исключением дублей из результата.
    </simpara>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="pdo.constants.fetch-key-pair">
   <term>
    <constant>PDO::FETCH_KEY_PAIR</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Выборка из двух столбцов помещается в массив, в котором значения первого
     столбца принимаются за ключи, а значения второго — за значения.
    </simpara>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="pdo.constants.fetch-classtype">
   <term>
    <constant>PDO::FETCH_CLASSTYPE</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Определяет название класса по значению первого столбца.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.fetch-serialize">
   <term>
    <constant>PDO::FETCH_SERIALIZE</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Константа аналогична константе <constant>PDO::FETCH_INTO</constant>, но объект представляется
     как сериализованная строка.
     При установке флага конструктор класса не вызывается.
     Константа устарела с PHP 8.1.0.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.fetch-props-late">
   <term>
    <constant>PDO::FETCH_PROPS_LATE</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Вызывать конструктор до установки свойств.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.attr-autocommit">
   <term>
    <constant>PDO::ATTR_AUTOCOMMIT</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Со значением &false; модуль PDO попытается отключить автоматическую фиксацию
     изменений в базе данных, поэтому началом транзакции становится момент установки
     соединения.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.attr-prefetch">
   <term>
    <constant>PDO::ATTR_PREFETCH</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Изменением размера буфера предвыборки регулируют баланс между
     расходом памяти и скоростью работы с базой данных. Не все связки
     база/драйвер поддерживают изменение размера этого буфера. Чем больше этот
     размер, тем выше быстродействие, но и выше расход памяти.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.attr-timeout">
   <term>
    <constant>PDO::ATTR_TIMEOUT</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Задаёт время в секундах, в течение которого должен быть завершён обмен
     с базой данных.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.attr-errmode">
   <term>
    <constant>PDO::ATTR_ERRMODE</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Подробно об этом атрибуте рассказывает раздел
     «<link linkend="pdo.error-handling">Ошибки и их обработка</link>».
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.attr-server-version">
   <term>
    <constant>PDO::ATTR_SERVER_VERSION</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Этот атрибут предназначен только для чтения; он хранит сведения о версии
     сервера баз данных, к которому подключён модуль PDO.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.attr-client-version">
   <term>
    <constant>PDO::ATTR_CLIENT_VERSION</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Этот атрибут предназначен только для чтения; он хранит сведения о версии
     клиентских библиотек, которые использует драйвер PDO.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.attr-server-info">
   <term>
    <constant>PDO::ATTR_SERVER_INFO</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Этот атрибут предназначен только для чтения; он хранит сведения
     о сервере баз данных, к которому подключён модуль PDO.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.attr-connection-status">
   <term>
    <constant>PDO::ATTR_CONNECTION_STATUS</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>

    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.attr-case">
   <term>
    <constant>PDO::ATTR_CASE</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Приводит названия столбцов к регистру, который определяют константами семейства
     <literal>PDO::CASE_*</literal>.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.attr-cursor-name">
   <term>
    <constant>PDO::ATTR_CURSOR_NAME</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Получает или устанавливает название курсора. Константа приносит пользу при работе
     с прокручиваемыми курсорами или обновлении данных в конкретных позициях.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.attr-cursor">
   <term>
    <constant>PDO::ATTR_CURSOR</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Выбирает типа курсора. Драйвер PDO поддерживает два типа курсоров:
     <constant>PDO::CURSOR_FWDONLY</constant>
     и <constant>PDO::CURSOR_SCROLL</constant>. Курсор с прокруткой выбирают,
     только когда на 100 % уверены, что требуется прокручиваемый курсор,
     иначе указывают курсор <constant>PDO::CURSOR_FWDONLY</constant>.
    </simpara>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="pdo.constants.attr-driver-name">
   <term>
    <constant>PDO::ATTR_DRIVER_NAME</constant>
    (<type>string</type>)
   </term>
   <listitem>
    <simpara>
     Возвращает название драйвера.
    </simpara>
    <para>
     <example><title>Пример проверки названия драйвера через флаг <constant>PDO::ATTR_DRIVER_NAME</constant></title>
      <programlisting role="php">
<![CDATA[
<?php

if ($db->getAttribute(PDO::ATTR_DRIVER_NAME) == 'mysql') {
    echo "Работаем с драйвером mysql; делаем что-то характерной для драйвера mysql\n";
}

?>
]]>
      </programlisting>
     </example>
    </para>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.attr-oracle-nulls">
   <term>
    <constant>PDO::ATTR_ORACLE_NULLS</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Преобразует пустые строки в значения с SQL-типом NULL в выборках.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.attr-persistent">
   <term>
    <constant>PDO::ATTR_PERSISTENT</constant>
    (<type>mixed</type>)
   </term>
   <listitem>
    <simpara>
     Запрашивать постоянное соединение вместо установки нового подключения.
     Подробнее об этом атрибуте рассказывает раздел «<link linkend="pdo.connections">Подключения и управление подключениями</link>».
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.attr-statement-class">
   <term>
    <constant>PDO::ATTR_STATEMENT_CLASS</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Устанавливает название класса, в виде экземпляров которого возвращаются запросы.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.attr-fetch-catalog-names">
   <term>
    <constant>PDO::ATTR_FETCH_CATALOG_NAMES</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Предписывает предварять названия столбцов названиями каталогов в результирующем наборе.
     Название столбца отделяется от названия каталога символом десятичной точки (.).
     Поддержку атрибута заложили на уровне драйвера; этот функционал
     поддерживается не каждым драйвером.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.attr-fetch-table-names">
   <term>
    <constant>PDO::ATTR_FETCH_TABLE_NAMES</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Предписывает предварять названия столбцов названиями исходных таблиц в результирующем наборе.
     Название столбца отделяется от названия таблицы десятичной точкой (.).
     Поддержку атрибута заложили на уровне драйвера; этот функционал
     поддерживается не каждым драйвером.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.attr-stringify-fetches">
   <term>
    <constant>PDO::ATTR_STRINGIFY_FETCHES</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Заставляет извлечённые значения, кроме &null;, обрабатываться как строки.
     Значения &null; не изменяются, если только для параметра <constant>PDO::ATTR_ORACLE_NULLS</constant>
     не установили значение <constant>PDO::NULL_TO_STRING</constant>.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.attr-max-column-len">
   <term>
    <constant>PDO::ATTR_MAX_COLUMN_LEN</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Устанавливает максимальную длину имени столбца.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.attr-default-fetch-mode">
   <term>
    <constant>PDO::ATTR_DEFAULT_FETCH_MODE</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>

    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.attr-emulate-prepares">
   <term>
    <constant>PDO::ATTR_EMULATE_PREPARES</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>

    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.attr-default-str-param">
   <term>
    <constant>PDO::ATTR_DEFAULT_STR_PARAM</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Устанавливает тип строкового параметра по умолчанию. Атрибут принимает значение в виде константы
     <constant>PDO::PARAM_STR_NATL</constant> или <constant>PDO::PARAM_STR_CHAR</constant>.
    </simpara>
    <simpara>
     Константа доступна с версии PHP 7.2.0.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.errmode-silent">
   <term>
    <constant>PDO::ERRMODE_SILENT</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Предписывает не выбрасывать исключений при ошибках. Ожидается,
     что разработчик будет явно следить за появлением ошибок.
     Это режим по умолчанию.
     Подробнее об этом атрибуте рассказывает раздел
     «<link linkend="pdo.error-handling">Ошибки и их обработка</link>».
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.errmode-warning">
   <term>
    <constant>PDO::ERRMODE_WARNING</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Предписывает выдавать сообщение о PHP-ошибке уровня
     <constant>E_WARNING</constant>. Подробнее об этом атрибуте рассказывает раздел
     «<link linkend="pdo.error-handling">Ошибки и их обработка</link>».
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.errmode-exception">
   <term>
    <constant>PDO::ERRMODE_EXCEPTION</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Предписывает выбрасывать исключение <classname>PDOException</classname> при ошибках.
     Подробнее об этом атрибуте рассказывает раздел
     «<link linkend="pdo.error-handling">Ошибки и их обработка</link>».
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.case-natural">
   <term>
    <constant>PDO::CASE_NATURAL</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Предписывает оставлять названия столбцов такими, какими их выдал драйвер
     базы данных.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.case-lower">
   <term>
    <constant>PDO::CASE_LOWER</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Приводит названия столбцов к нижнему регистру.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.case-upper">
   <term>
    <constant>PDO::CASE_UPPER</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Приводит названия столбцов к верхнему регистру.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.null-natural">
   <term>
    <constant>PDO::NULL_NATURAL</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>

    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.null-empty-string">
   <term>
    <constant>PDO::NULL_EMPTY_STRING</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>

    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.null-to-string">
   <term>
    <constant>PDO::NULL_TO_STRING</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>

    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.fetch-ori-next">
   <term>
    <constant>PDO::FETCH_ORI_NEXT</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Предписывает выбрать следующую строку из результирующего набора. Константа
     действительна только для прокручиваемых курсоров.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.fetch-ori-prior">
   <term>
    <constant>PDO::FETCH_ORI_PRIOR</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Предписывает выбирать предыдущую строку из результирующего набора. Константа
     действительна только для прокручиваемых курсоров.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.fetch-ori-first">
   <term>
    <constant>PDO::FETCH_ORI_FIRST</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Предписывает выбирать первую строку из результирующего набора. Константа
     действительна только для прокручиваемых курсоров.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.fetch-ori-last">
   <term>
    <constant>PDO::FETCH_ORI_LAST</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Предписывает выбирать последнюю строку из результирующего набора. Константа
     действительна только для прокручиваемых курсоров.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.fetch-ori-abs">
   <term>
    <constant>PDO::FETCH_ORI_ABS</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Предписывает выбирать строку с указанным номером из результирующего
     набора. Константа действительна только для прокручиваемых курсоров.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.fetch-ori-rel">
   <term>
    <constant>PDO::FETCH_ORI_REL</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Предписывает выбирать строку из результирующего набора относительно текущего
     положения курсора. Константа действительна только для прокручиваемых курсоров.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.cursor-fwdonly">
   <term>
    <constant>PDO::CURSOR_FWDONLY</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Предписывает создавать объект <classname>PDOStatement</classname>
     с последовательным курсором. Последовательные курсоры выбраны по умолчанию,
     поскольку это наиболее общий и быстрый в PHP шаблон доступа к данным.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.cursor-scroll">
   <term>
    <constant>PDO::CURSOR_SCROLL</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Предписывает создавать объект <classname>PDOStatement</classname>
     с прокручиваемым курсором. Передача констант семейства
     <literal>PDO::FETCH_ORI_*</literal> управляет поведением курсора
     при выборке строк из набора с результатами.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.err-none">
   <term>
    <constant>PDO::ERR_NONE</constant>
    (<type>string</type>)
   </term>
   <listitem>
    <simpara>
     Соответствует коду SQLSTATE '00000', который говорит о том, что SQL-запрос выполнился
     успешно, без ошибок или предупреждений. Константа повышает удобство
     при работе с методами <methodname>PDO::errorCode</methodname>
     и <methodname>PDOStatement::errorCode</methodname>, когда требуется определить, возникла ли ошибка.
     Возникла ли ошибка, часто узнают путём проверки кода возврата, который вернул метод.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.param-evt-alloc">
   <term>
    <constant>PDO::PARAM_EVT_ALLOC</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Запускает процесс выделения ресурсов для параметра подготовленного запроса.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.param-evt-free">
   <term>
    <constant>PDO::PARAM_EVT_FREE</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Инициирует процесс освобождения ресурсов параметра подготовленного запроса.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.param-evt-exec-pre">
   <term>
    <constant>PDO::PARAM_EVT_EXEC_PRE</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Событие, которое срабатывает перед запуском подготовленного запроса.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.param-evt-exec-post">
   <term>
    <constant>PDO::PARAM_EVT_EXEC_POST</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Событие, которое срабатывает после запуска подготовленного запроса.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.param-evt-fetch-pre">
   <term>
    <constant>PDO::PARAM_EVT_FETCH_PRE</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Событие, которое срабатывает перед выборкой данных из результирующего набора.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.param-evt-fetch-post">
   <term>
    <constant>PDO::PARAM_EVT_FETCH_POST</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Событие, которое срабатывает после выборки данных из результирующего набора.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.param-evt-normalize">
   <term>
    <constant>PDO::PARAM_EVT_NORMALIZE</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Событие, которое срабатывает при регистрации связанного параметра
     и запускает нормализацию названия параметра драйвером.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.sqlite-deterministic">
   <term>
    <constant>PDO::SQLITE_DETERMINISTIC</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Указывает на детерминированность функции, которую создали методом <methodname>PDO::sqliteCreateFunction</methodname>.
     Детерминированной называется функция, которая возвращает одинаковый результат при каждом вызове
     с одинаковыми входными данными в одном SQL-запросе. Константа доступна с PHP 7.1.4.
    </simpara>
   </listitem>
  </varlistentry>
 </variablelist>
</appendix>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
