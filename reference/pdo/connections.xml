<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: d861a1bcea24f05e52e4938c1ecdf9d70326d7aa Maintainer: tmn Status: ready -->
<!-- Reviewed: no -->
<chapter xml:id="pdo.connections" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>Подключения и управление подключениями</title>
 <para>
  Для установки соединений создают экземпляры базового класса PDO.
  Неважно, какой драйвер хотелось использовать;
  всё равно будет использовано имя класса PDO. Конструктор класса принимает
  параметры для задания источника базы данных (DSN), а также необязательные
  имя пользователя и пароль (если есть).
 </para>
 <para>
  <example>
   <title>Подключение к MySQL</title>
   <programlisting role="php">
<![CDATA[
<?php
$dbh = new PDO('mysql:host=localhost;dbname=test', $user, $pass);
?>
]]>
   </programlisting>
  </example>
 </para>
 <para>
  Если при подключении произошла ошибка, будет выброшено исключение
  <literal>PDOException</literal>. Его можно перехватить и обработать, либо
  оставить на откуп глобальному обработчику ошибок, который задан
  функцией <function>set_exception_handler</function>.
 </para>
 <para>
  <example><title>Обработка ошибок подключения</title>
   <programlisting role="php">
<![CDATA[
<?php
try {
    $dbh = new PDO('mysql:host=localhost;dbname=test', $user, $pass);
} catch (PDOException $e) {
    // Например, через какое-то время повторить попытку соединения
}
?>
]]>
   </programlisting>
  </example>
 </para>
 <warning>
  <para>
   Как и остальные <link linkend="language.exceptions">исключения</link>,
   исключение <classname>PDOException</classname> можно отловить явно — через
   блок &catch; или неявно — через функцию <function>set_exception_handler</function>.
   По умолчанию же непойманное исключение будет преобразовано в фатальную ошибку уровня
   <constant>E_FATAL_ERROR</constant>.
   Фатальня ошибка будет содержать стек вызовов, появляется риск утечки информации о соединении.
   Поэтому на сервере, который работает в производственной среде, в файле &php.ini; для опции
   <link linkend="ini.display-errors"><literal>display_errors</literal></link>
   должо быть установлено значение <literal>0</literal>.
  </para>
 </warning>
 <para>
  При успешном подключении к базе данных в скрипт будет возвращён созданный
  объект PDO. Соединение остаётся активным в течение жизни
  объекта. Чтобы закрыть соединение, необходимо уничтожить объект путём удаления
  всех ссылок на него (этого можно добиться, присваивая &null; всем переменным,
  указывающим на объект). Если не сделать этого явно, PHP автоматически
  закроет соединение по окончании работы скрипта.
 </para>
 <note>
  <simpara>
   Если существуют другие ссылки на данный экземпляр PDO (например, из объекта PDOStatement
   или другие переменные, ссылающиеся на него), они также должны быть удалены
   (например, присвоением &null; переменной, ссылающейся на PDOStatement).
  </simpara>
 </note>
 <para>
  <example>
   <title>Закрытие соединения</title>
   <programlisting role="php">
<![CDATA[
<?php
$dbh = new PDO('mysql:host=localhost;dbname=test', $user, $pass);
// здесь мы каким-то образом используем соединение
$sth = $dbh->query('SELECT * FROM foo');

// соединение больше не нужно, закрываем
$sth = null;
$dbh = null;
?>
]]>
   </programlisting>
  </example>
 </para>
 <para>
  Во многих приложениях может оказаться полезным использование постоянных
  соединений к базам данных. Постоянные соединения не закрываются при
  завершении работы скрипта, они кешируются и используются повторно,
  когда другой скрипт запрашивает соединение с теми же учётными данными.
  Постоянные соединения позволяют избежать создания новых подключений каждый
  раз, когда требуется обмен данными с базой, что в результате даёт прирост
  скорости работы таких приложений.
 </para>
 <para>
  <example>
   <title>Постоянные соединения</title>
   <programlisting role="php">
<![CDATA[
<?php
$dbh = new PDO('mysql:host=localhost;dbname=test', $user, $pass, array(
    PDO::ATTR_PERSISTENT => true
));
?>
]]>
   </programlisting>
  </example>
 </para>
 <para>
  Значение параметра <constant>PDO::ATTR_PERSISTENT</constant> преобразовывается
  в логическое значение (&boolean;) (включить/отключить постоянные подключения),
  если это не числовая строка (&string;), которая в этом случае позволяет использовать несколько пулов постоянных подключений.
  Это полезно, если разные соединения используют несовместимые настройки,
  например, разные значения <constant>PDO::MYSQL_ATTR_USE_BUFFERED_QUERY</constant>.
 </para>
 <note>
  <para>
   Чтобы использовать постоянные соединения, необходимо добавить константу
   <constant>PDO::ATTR_PERSISTENT</constant> в массив параметров драйвера,
   который передаётся конструктору PDO. Если просто задать этот атрибут
   функцией <methodname>PDO::setAttribute</methodname> уже после создания объекта,
   драйвер не будет использовать постоянные соединения.
  </para>
 </note>
 <note>
  <para>
   Если вы используете PDO ODBC драйвер и ваши ODBC библиотеки поддерживают
   объединение подключений в пул (ODBC Connection Pooling) (unixODBC и Windows
   точно поддерживают, но могут быть и другие), то рекомендуется вместо постоянных
   соединений пользоваться этим пулом. Пул подключений ODBC доступен всем модулям
   текущего процесса; если PDO сам кеширует соединение, то это соединение
   будет недоступно другим модулям и не попадёт в пул. В результате каждый модуль
   будет создавать дополнительные подключения для своих нужд.
  </para>
 </note>
</chapter>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
