<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: d530899344cd881b6d09ff188e24252651c2f394 Maintainer: rjhdby Status: ready -->
<!-- Reviewed: yes Maintainer: sergey -->

<refentry xml:id="zmqcontext.getsocket" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>ZMQContext::getSocket</refname>
  <refpurpose>Создаёт новый сокет</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <modifier>public</modifier> <type>ZMQSocket</type><methodname>ZMQContext::getSocket</methodname>
   <methodparam><type>int</type><parameter>type</parameter></methodparam>
   <methodparam choice="opt"><type>string</type><parameter>persistent_id</parameter><initializer>&null;</initializer></methodparam>
   <methodparam choice="opt"><type>callable</type><parameter>on_new_socket</parameter><initializer>&null;</initializer></methodparam>
  </methodsynopsis>
  <para>
   Метод для создания сокета из контекста. Если контекст не является постоянным, то
   параметр <parameter>persistent_id</parameter> будет проигнорирован и сокет
   будет непостоянным. Функция, заданная в <parameter>on_new_socket</parameter>
   будет вызвана только если будет создана новая, лежащая в основе, структура сокета.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>type</parameter></term>
     <listitem>
      <para>
       Константа <constant>ZMQ::SOCKET_*</constant>, задающая тип сокета.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>persistent_id</parameter></term>
     <listitem>
      <para>
       Если задан параметр <parameter>persistent_id</parameter>, то сокет будет сохраняться
       между запросами.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>on_new_socket</parameter></term>
     <listitem>
      <para>
       Callback-функция, которая будет вызвана при создании новой структуры сокета.
       Функция не будет вызвана, если используется постоянный контекст.
       Функция принимает в качестве аргументов ZMQSocket и persistent_id.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Возвращает объект <classname>ZMQSocket</classname>.
  </para>
 </refsect1>

 <refsect1 role="errors">
  &reftitle.errors;
  <para>
   Выбрасывает <classname>ZMQSocketException</classname> в случае возникновения ошибки.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Пример использования <function>ZMQContext</function></title>
    <para>
     Основы
    </para>
    <programlisting role="php">
<![CDATA[
<?php
/* Создаём новый контекст */
$context = new ZMQContext();

/* Создаём новый сокет */
$socket = $context->getSocket(ZMQ::SOCKET_REQ, 'my sock');

/* Соединяемся с сокетом */
$socket->connect("tcp://example.com:1234");

/* Посылаем запрос */
$socket->send("Hello there");

/* Получаем ответ */
$message = $socket->recv();
echo "Received message: {$message}\n";
?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
