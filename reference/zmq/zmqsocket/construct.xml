<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 3c31131ae899b6bea6dc1d46475160afe0995773 Maintainer: rjhdby Status: ready -->
<!-- Reviewed: yes Maintainer: sergey -->
<refentry xml:id="zmqsocket.construct" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>ZMQSocket::__construct</refname>
  <refpurpose>Конструктор класса ZMQSocket</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <modifier>public</modifier> <methodname>ZMQSocket::__construct</methodname>
   <methodparam><type>ZMQContext</type><parameter>context</parameter></methodparam>
   <methodparam><type>int</type><parameter>type</parameter></methodparam>
   <methodparam choice="opt"><type>string</type><parameter>persistent_id</parameter><initializer>&null;</initializer></methodparam>
   <methodparam choice="opt"><type>callable</type><parameter>on_new_socket</parameter><initializer>&null;</initializer></methodparam>
  </methodsynopsis>
  <para>
   Создаёт экземпляр класса ZMQSocket. Параметр <parameter>persistent_id</parameter>
   может быть использован для установления постоянного соединения. Постоянный сокет будет
   выделен из постоянного контекста и будет оставаться активным в течение нескольких
   запросов. Получить тот же сокет для множества запросов можно с помощью параметра
   <parameter>persistent_id</parameter>. Функция, заданная в
   <parameter>on_new_socket</parameter> вызывается только при создании новой структуры сокета.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>context</parameter></term>
     <listitem>
      <para>
       Объект класса ZMQContext.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>type</parameter></term>
     <listitem>
      <para>
       Тип сокета. Смотрите константы <constant>ZMQ::SOCKET_*</constant>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>persistent_id</parameter></term>
     <listitem>
      <para>
       Если параметр <parameter>persistent_id</parameter> указан, то сокет будет доступен в
       течение нескольких запросов. Если <parameter>context</parameter> не является
       постоянным, сокет так же вернётся к непостоянному режиму.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>on_new_socket</parameter></term>
     <listitem>
      <para>
       Callback-функция, которая будет вызвана при создании нового сокета. Эта функция не
       вызывается в случае повторного использования постоянного соединения.
      </para>
      <methodsynopsis>
       <methodname><replaceable>callback</replaceable></methodname>
       <methodparam><type>ZMQSocket</type><parameter>socket</parameter></methodparam>
       <methodparam choice="opt"><type>string</type><parameter>persistent_id</parameter><initializer>&null;</initializer></methodparam>
      </methodsynopsis>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="errors">
  &reftitle.errors;
  <para>
   Выбрасывает <classname>ZMQSocketException</classname> в случае возникновения ошибки.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
   <para>
    <example>
     <title>Пример использования <function>ZMQSocket</function></title>
     <para>
      Использование функции обратного вызова для связи или подключения к сокету
     </para>
     <programlisting role="php">
<![CDATA[
<?php

/*
  Здесь используется постоянный сокет, поэтому функция будет вызвана лишь
  при первом обращении к скрипту.
*/
function on_new_socket_cb(ZMQSocket $socket, $persistent_id = null)
{
    if ($persistent_id === 'server') {
        $socket->bind("tcp://localhost:12122");
    } else {
        $socket->connect("tcp://localhost:12122");
    }
}

/* Создать новый контекст */
$context = new ZMQContext();

/* Создать сокет */
$socket = $context->getSocket(ZMQ::SOCKET_REP, 'server', 'on_new_socket_cb');

$message = $socket->recv();
echo "Получено сообщение: {$message}\n";
?>
]]>
     </programlisting>
    </example>
   </para>
 </refsect1>

</refentry><!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
