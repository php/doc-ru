<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 86e6094e86b84a51d00ab217ac50ce8dde33d82a Maintainer: rjhdby Status: ready -->
<!-- Reviewed: no -->
<phpdoc:classref xml:id="class.svm" xmlns:phpdoc="http://php.net/ns/phpdoc" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude">

 <title>Класс SVM</title>
 <titleabbrev>SVM</titleabbrev>

 <partintro>

  <!-- {{{ svm intro -->
  <section xml:id="svm.intro">
   &reftitle.intro;
   <para>

   </para>
  </section>
  <!-- }}} -->

  <section xml:id="svm.synopsis">
   &reftitle.classsynopsis;

   <!-- {{{ Synopsis -->
   <classsynopsis>
    <ooclass><classname>SVM</classname></ooclass>

    <!-- {{{ Class synopsis -->
    <classsynopsisinfo>
     <ooclass>
      <classname>SVM</classname>
     </ooclass>
    </classsynopsisinfo>
    <!-- }}} -->
    <classsynopsisinfo role="comment">Константы</classsynopsisinfo>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="svm.constants.c-svc">SVM::C_SVC</varname>
     <initializer>0</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="svm.constants.nu-svc">SVM::NU_SVC</varname>
     <initializer>1</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="svm.constants.one-class">SVM::ONE_CLASS</varname>
     <initializer>2</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="svm.constants.epsilon-svr">SVM::EPSILON_SVR</varname>
     <initializer>3</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="svm.constants.nu-svr">SVM::NU_SVR</varname>
     <initializer>4</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="svm.constants.kernel-linear">SVM::KERNEL_LINEAR</varname>
     <initializer>0</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="svm.constants.kernel-poly">SVM::KERNEL_POLY</varname>
     <initializer>1</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="svm.constants.kernel-rbf">SVM::KERNEL_RBF</varname>
     <initializer>2</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="svm.constants.kernel-sigmoid">SVM::KERNEL_SIGMOID</varname>
     <initializer>3</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="svm.constants.kernel-precomputed">SVM::KERNEL_PRECOMPUTED</varname>
     <initializer>4</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="svm.constants.opt-type">SVM::OPT_TYPE</varname>
     <initializer>101</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="svm.constants.opt-kernel-type">SVM::OPT_KERNEL_TYPE</varname>
     <initializer>102</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="svm.constants.opt-degree">SVM::OPT_DEGREE</varname>
     <initializer>103</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="svm.constants.opt-shrinking">SVM::OPT_SHRINKING</varname>
     <initializer>104</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="svm.constants.opt-propability">SVM::OPT_PROPABILITY</varname>
     <initializer>105</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="svm.constants.opt-gamma">SVM::OPT_GAMMA</varname>
     <initializer>201</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="svm.constants.opt-nu">SVM::OPT_NU</varname>
     <initializer>202</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="svm.constants.opt-eps">SVM::OPT_EPS</varname>
     <initializer>203</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="svm.constants.opt-p">SVM::OPT_P</varname>
     <initializer>204</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="svm.constants.opt-coef-zero">SVM::OPT_COEF_ZERO</varname>
     <initializer>205</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="svm.constants.opt-c">SVM::OPT_C</varname>
     <initializer>206</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="svm.constants.opt-cache-size">SVM::OPT_CACHE_SIZE</varname>
     <initializer>207</initializer>
    </fieldsynopsis>

    <classsynopsisinfo role="comment">Методы</classsynopsisinfo>
    <xi:include xpointer="xmlns(db=http://docbook.org/ns/docbook) xpointer(id('class.svm')/db:refentry/db:refsect1[@role='description']/descendant::db:methodsynopsis[1])" />
   </classsynopsis>
   <!-- }}} -->

  </section>

  <!-- {{{ svm constants -->
  <section xml:id="svm.constants">
   &reftitle.constants;
   <section xml:id="svm.constants.types">
    <title>Константы SVM</title>
    <variablelist>

     <varlistentry xml:id="svm.constants.c-svc">
      <term><constant>SVM::C_SVC</constant></term>
      <listitem>
       <para>Базовый тип SVM. Тип по умолчанию, хорош для начала.</para>
      </listitem>
     </varlistentry>

     <varlistentry xml:id="svm.constants.nu-svc">
      <term><constant>SVM::NU_SVC</constant></term>
      <listitem>
       <para>Тип NU_SVC использует другой, более гибкий подход к развесовке ошибок.</para>
      </listitem>
     </varlistentry>

     <varlistentry xml:id="svm.constants.one-class">
      <term><constant>SVM::ONE_CLASS</constant></term>
      <listitem>
       <para>Одноклассовая модель. Тренирует только на одном классе, используя "выпадающие" данные в качестве отрицательных примеров</para>
      </listitem>
     </varlistentry>

     <varlistentry xml:id="svm.constants.epsilon-svr">
      <term><constant>SVM::EPSILON_SVR</constant></term>
      <listitem>
       <para>Тип для регрессии (прогнозирование значения, а не просто класса)</para>
      </listitem>
     </varlistentry>

     <varlistentry xml:id="svm.constants.nu-svr">
      <term><constant>SVM::NU_SVR</constant></term>
      <listitem>
       <para>Тип регрессии SVM в стиле NU</para>
      </listitem>
     </varlistentry>

     <varlistentry xml:id="svm.constants.kernel-linear">
      <term><constant>SVM::KERNEL_LINEAR</constant></term>
      <listitem>
       <para>Очень простое ядро, которое хорошо работает для классификации проблем больших документов</para>
      </listitem>
     </varlistentry>

     <varlistentry xml:id="svm.constants.kernel-poly">
      <term><constant>SVM::KERNEL_POLY</constant></term>
      <listitem>
       <para>Полиноминальное ядро</para>
      </listitem>
     </varlistentry>

     <varlistentry xml:id="svm.constants.kernel-rbf">
      <term><constant>SVM::KERNEL_RBF</constant></term>
      <listitem>
       <para>Стандартное Гауссово RBD ядро. Хорошо обрабатывает нелинейные проблемы и является хорошим
        значением по умолчанию для классификации</para>
      </listitem>
     </varlistentry>

     <varlistentry xml:id="svm.constants.kernel-sigmoid">
      <term><constant>SVM::KERNEL_SIGMOID</constant></term>
      <listitem>
       <para>Ядро базирующееся на сигмоидной функции. Очень похоже на использование двухуровневой
        сигмоидной нейронной сети</para>
      </listitem>
     </varlistentry>

     <varlistentry xml:id="svm.constants.kernel-precomputed">
      <term><constant>SVM::KERNEL_PRECOMPUTED</constant></term>
      <listitem>
       <para>Предварительно вычисленное ядро - сейчас не поддерживается</para>
      </listitem>
     </varlistentry>

     <varlistentry xml:id="svm.constants.opt-type">
      <term><constant>SVM::OPT_TYPE</constant></term>
      <listitem>
       <para>Опциональный ключ для типа SVM</para>
      </listitem>
     </varlistentry>

     <varlistentry xml:id="svm.constants.opt-kernel-type">
      <term><constant>SVM::OPT_KERNEL_TYPE</constant></term>
      <listitem>
       <para>Опциональный ключ для типа ядра</para>
      </listitem>
     </varlistentry>

     <varlistentry xml:id="svm.constants.opt-degree">
      <term><constant>SVM::OPT_DEGREE</constant></term>
      <listitem>
       <para></para>
      </listitem>
     </varlistentry>

     <varlistentry xml:id="svm.constants.opt-shrinking">
      <term><constant>SVM::OPT_SHRINKING</constant></term>
      <listitem>
       <para>Параметр обучения, логическое значение, определяющий использование сокращающей эвристики</para>
      </listitem>
     </varlistentry>

     <varlistentry xml:id="svm.constants.opt-propability">
      <term><constant>SVM::OPT_PROBABILITY</constant></term>
      <listitem>
       <para>Параметр обучения, логическое значение, определяющий, будут ли собираться и использоваться оценки вероятности</para>
      </listitem>
     </varlistentry>

     <varlistentry xml:id="svm.constants.opt-gamma">
      <term><constant>SVM::OPT_GAMMA</constant></term>
      <listitem>
       <para>Параметр алгоритма для следующих типов ядра:  Полиноминальное, RBF и Сигмоидное</para>
      </listitem>
     </varlistentry>

     <varlistentry xml:id="svm.constants.opt-nu">
      <term><constant>SVM::OPT_NU</constant></term>
      <listitem>
       <para>Опциональный ключ для параметра nu. Используется только с типами NU_ SVM</para>
      </listitem>
     </varlistentry>

     <varlistentry xml:id="svm.constants.opt-eps">
      <term><constant>SVM::OPT_EPS</constant></term>
      <listitem>
       <para>Опциональный ключ для параметра Epsilon. Используется только в Эпсилон-регрессии</para>
      </listitem>
     </varlistentry>

     <varlistentry xml:id="svm.constants.opt-p">
      <term><constant>SVM::OPT_P</constant></term>
      <listitem>
       <para>Обучающий параметр для Эпсилон-регрессии SVR</para>
      </listitem>
     </varlistentry>

     <varlistentry xml:id="svm.constants.opt-coef-zero">
      <term><constant>SVM::OPT_COEF_ZERO</constant></term>
      <listitem>
       <para>Параметр алгоритма для полиноминального и сигмоидного ядра</para>
      </listitem>
     </varlistentry>

     <varlistentry xml:id="svm.constants.opt-c">
      <term><constant>SVM::OPT_C</constant></term>
      <listitem>
       <para>Опция для параметра стоимости, контролирующего компромисс между ошибками и
        неопределённостями - фактически штраф за ошибочную классификацию обучающих примеров.</para>
      </listitem>
     </varlistentry>

     <varlistentry xml:id="svm.constants.opt-cache-size">
      <term><constant>SVM::OPT_CACHE_SIZE</constant></term>
      <listitem>
       <para>Размер кеша в памяти в мегабайтах</para>
      </listitem>
     </varlistentry>
    </variablelist>
   </section>
  </section>
  <!-- }}} -->


 </partintro>

 &reference.svm.entities.svm;

</phpdoc:classref>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
