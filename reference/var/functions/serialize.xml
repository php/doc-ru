<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: d816a0fad6c458d9515f697cc89e26ca9d8069f5 Maintainer: shein Status: ready -->
<!-- Reviewed: no -->
<refentry xml:id="function.serialize" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>serialize</refname>
 <refpurpose>Генерирует сохраняемое представление переменной</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>string</type><methodname>serialize</methodname>
   <methodparam><type>mixed</type><parameter>value</parameter></methodparam>
  </methodsynopsis>
  <para>
   Функция генерирует сохраняемое представление переменной.
  </para>
  <para>
   Такое представление полезно для хранения или передачи PHP-значений между скриптами
   без потери типа и структуры.
  </para>
  <para>
   Для превращения сериализованной строки обратно в PHP-значение вызывают
   функцию <function>unserialize</function>.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>value</parameter></term>
     <listitem>
      <para>
       Значение, которое требуется сериализовать. Функция <function>serialize</function>
       обрабатывает все типы, кроме <type>resource</type>
       и отдельных типов <type>object</type>, как говорится в примечании.
       Функция даже умеет сериализовать массивы, которые содержат
       ссылки на себя. Циклические ссылки внутри сериализуемого
       массива или объекта также сохраняются. Любые другие
       ссылки утратятся.
      </para>
      <para>
       При сериализации объекта PHP пытается вызвать перед операцией магические методы
       <link linkend="object.serialize">__serialize()</link>
       или <link linkend="object.sleep">__sleep()</link>.
       Это делается, чтобы разрешить объекту в последний
       момент перед сериализацией произвести очистку и другие похожие операции.
       Аналогично, когда объект восстанавливается функцией
       <function>unserialize</function>, вызывается магический метод <link linkend="object.unserialize">__unserialize()</link>
       или <link linkend="object.wakeup">__wakeup()</link>.
      </para>
      <note>
       <para>
        Начало названий закрытых членов объекта дополняются названием класса,
        а начало названий защищённых членов символом '*'. Эти дополненные
        значения окружаются с обеих сторон нулевым байтом — 0x00.
       </para>
      </note>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Функция возвращает строку, которая содержит представление значения
   <parameter>value</parameter> в виде потока байтов. Такое представление доступно для сохранения в произвольном хранилище.
  </para>
  <para>
   Обратите внимание, что это бинарная строка, которая иногда включает нулевые байты,
   и которую требуется хранить и обрабатывать с учётом содержания. Например,
   вывод функции <function>serialize</function> лучше хранить в BLOB-поле
   базы данных, а не в полях с типом CHAR или TEXT.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Пример сериализации значения функцией <function>serialize</function></title>
    <programlisting role="php" annotations="non-interactive">
<![CDATA[
<?php

// Переменная $session_data содержит многомерный массив с сессионной
// информацией о текущем пользователе. Функция serialize() сохраняет
// эту информацию в базе данных в конце запроса.

$conn = odbc_connect("webdb", "php", "chicken");
$stmt = odbc_prepare(
    $conn,
    "UPDATE sessions SET data = ? WHERE id = ?"
);

$sqldata = array(serialize($session_data), $_SERVER['PHP_AUTH_USER']);

if (!odbc_execute($stmt, $sqldata)) {
    $stmt = odbc_prepare(
        $conn,
        "INSERT INTO sessions (id, data) VALUES(?, ?)"
    );

    if (!odbc_execute($stmt, array_reverse($sqldata))) {
        /* Код при ошибке */
    }
}

?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  <note>
   <para>
    Обратите внимание, бо́льшая часть встроенных в PHP объектов не поддерживает сериализацию.
    Однако объекты, которые всё-таки поддерживают сериализацию,
    или реализуют интерфейс <interfacename>Serializable</interfacename>,
    или определяют магические методы <link linkend="object.serialize">__serialize()</link> и <link linkend="object.unserialize">__unserialize()</link>
    или <link linkend="object.sleep">__sleep()</link> и <link linkend="object.wakeup">__wakeup()</link>.
    Встроенные классы, которые не удовлетворяют ни одному из этих требований,
    невозможно надёжно сериализовать.
   </para>
   <para>
    PHP включает ряд исторических исключений из приведённого правила,
    когда отдельные внутренние объекты сериализовавались
    без реализации интерфейса или магических методов.
   </para>
  </note>
  <warning>
   <para>
    При сериализации объектов функцией <function>serialize</function>
    ведущий обратный слеш не включается в название класса, который определили
    в пространстве имён, для наилучшей обратной совместимости.
   </para>
  </warning>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>unserialize</function></member>
    <member><function>var_export</function></member>
    <member><function>json_encode</function></member>
    <member><link linkend="language.oop5.serialization">Сериализация объектов</link></member>
    <member><link linkend="object.sleep">__sleep()</link></member>
    <member><link linkend="object.wakeup">__wakeup()</link></member>
    <member><link linkend="object.serialize">__serialize()</link></member>
    <member><link linkend="object.unserialize">__unserialize()</link></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
