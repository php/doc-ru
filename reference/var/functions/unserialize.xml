<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 5fabd07880ab15b0ad2cf7eb055c7c2b36d7120f Maintainer: shein Status: ready -->
<!-- Reviewed: yes -->
<refentry xml:id="function.unserialize" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>unserialize</refname>
  <refpurpose>
   Создаёт PHP-значение из хранимого представления
  </refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>mixed</type><methodname>unserialize</methodname>
   <methodparam><type>string</type><parameter>data</parameter></methodparam>
   <methodparam choice="opt"><type>array</type><parameter>options</parameter><initializer>[]</initializer></methodparam>
  </methodsynopsis>
  <simpara>
   <function>unserialize</function> принимает одну сериализованную переменную и
   конвертирует её обратно в значение PHP.
  </simpara>
  <warning>
   <para>
    Не передавайте непроверенные пользовательские данные в
    <function>unserialize</function>, даже если в <parameter>options</parameter>
    задано <literal>allowed_classes</literal>.
    Десериализация может создать код, который выполнится при создании объекта или
    при автоматической загрузке кода, чем могут воспользоваться недобросовестные пользователи.
    Лучше использовать более безопасные стандартные форматы
    обмена данными, такие как JSON (с помощью  функций <function>json_decode</function>
    и <function>json_encode</function>), если вам нужно передать сериализованные данные пользователю.
   </para>
   <para>
    Если вам нужно десериализовать данные из внешних источников, используйте функцию
    <function>hash_hmac</function> для проверки этих данных. Убедитесь, что эти данные
    кроме вас никто не изменял.
   </para>
  </warning>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>data</parameter></term>
     <listitem>
      <para>
       Сериализованная строка.
      </para>
      <para>
       Если переменная, требующая десериализации, является объектом, то после успешного
       восстановления объекта PHP автоматически попытается вызвать магические метод
       <link linkend="object.unserialize">__unserialize()</link> или <link linkend="object.wakeup">__wakeup()</link> (если он существует).
      </para>
      <para>
       <note>
        <title>Директива unserialize_callback_func</title>
        <para>
         Существует возможность указать функцию обратного вызова, которая будет вызвана,
         если в процессе десериализации должен быть проинициализирован неопределённый
         класс. (для предотвращения получения неполного объекта (<type>object</type>)
         "__PHP_Incomplete_Class"). Используйте &php.ini;, <function>ini_set</function> или
         &htaccess; для определения функции <link linkend="ini.unserialize-callback-func">unserialize_callback_func</link>.
         Данная функция будет вызываться каждый раз, когда должен быть проинициализирован
         неопределённый класс. Для отключения этой возможности, просто оставьте значение
         директивы пустым.
        </para>
       </note>
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>options</parameter></term>
     <listitem>
      <para>
       Любые опции <function>unserialize</function> в виде ассоциативного массива.
      </para>
      <table>
       <title>Корректные опции</title>
       <tgroup cols="3">
        <thead>
         <row>
          <entry>Имя</entry>
          <entry>Тип</entry>
          <entry>Описание</entry>
         </row>
        </thead>
        <tbody>
         <row>
          <entry><literal>allowed_classes</literal></entry>
          <entry><type>mixed</type></entry>
          <entry>
           <simpara>
            Массив имён классов, которые должны быть приняты, &false; для указания не
            принимать никаких классов или &true; для приёма всех. Если эта опция задана и
            <function>unserialize</function> обнаружит объект неприемлемого класса, то он
            не будет принят, а вместо этого инстанцируется как объект класса
            <classname>__PHP_Incomplete_Class</classname>.
           </simpara>
           <simpara>
            Если опция не задана, то она будет считаться установленной в &true;: PHP
            будет пытаться инстанцировать объекты любого класса.
           </simpara>
          </entry>
         </row>
        </tbody>
       </tgroup>
      </table>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Возвращается преобразованное значение, которое принимает один
   из типов <type>bool</type>, <type>int</type>,
   <type>float</type>, <type>string</type>,
   <type>array</type> или <type>object</type>.
  </para>
  <para>
   В случае, если переданная строка не поддаётся десериализации, возвращается &false; и
   генерируется <constant>E_NOTICE</constant>.
  </para>
 </refsect1>

 <refsect1 role="errors">
  &reftitle.errors;
  <para>
   Объекты могут выбрасывать <classname>Throwable</classname> в своих обработчиках десериализации.
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>7.1.0</entry>
       <entry>
        Теперь элемент <literal>allowed_classes</literal> параметра
        <parameter>options</parameter> строго типизирован, то есть если передано что-либо,
        кроме <type>array</type> и <type>bool</type>,
        <function>unserialize</function> вернёт &false; и вызовет ошибку
        <constant>E_WARNING</constant>.
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Пример использования <function>unserialize</function></title>
    <programlisting role="php">
<![CDATA[
<?php
// Мы используем функцию unserialize() для загрузки сессионных данных в массив
// $session_data из строки, извлекаемой из базы данных.
// Данный пример дополняет пример, описывающий использование serialize().

$conn = odbc_connect("webdb", "php", "chicken");
$stmt = odbc_prepare($conn, "SELECT data FROM sessions WHERE id = ?");
$sqldata = array($_SERVER['PHP_AUTH_USER']);
if (!odbc_execute($stmt, $sqldata) || !odbc_fetch_into($stmt, $tmp)) {
    // если процедура извлечения данных не удалась, то инициализируем пустой массив
    $session_data = array();
} else {
    // сейчас у нас должны быть сериализованные данные в $tmp[0].
    $session_data = unserialize($tmp[0]);
    if (!is_array($session_data)) {
        // что-то пошло не так, инициализируем пустой массив
        $session_data = array();
    }
}
?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   <example>
    <title>Пример использования unserialize_callback_func</title>
    <programlisting role="php">
<![CDATA[
<?php
$serialized_object='O:1:"a":1:{s:5:"value";s:3:"100";}';

ini_set('unserialize_callback_func', 'mycallback'); // определяем свою callback-функцию

function mycallback($classname)
{
    // просто подключаете файл, содержащий определение класса
    // $classname указывает, для какого класса требуется определение
}
?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  <warning>
   <para>
    &false; возвращается как в случае возникновения ошибки, так и в случае, если десериализуется
    сериализованное значение &false;. Этот особый случай можно отловить, используя
    сравнение <parameter>data</parameter> со значением
    <literal>serialize(false)</literal>, или перехватив сгенерированную ошибку
    <constant>E_NOTICE</constant>.
   </para>
  </warning>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>json_encode</function></member>
    <member><function>json_decode</function></member>
    <member><function>hash_hmac</function></member>
    <member><function>serialize</function></member>
    <member><link linkend="language.oop5.autoload">Автоматическая загрузка классов</link></member>
    <member><link linkend="ini.unserialize-callback-func">unserialize_callback_func</link></member>
    <member><link linkend="object.wakeup">__wakeup()</link></member>
    <member><link linkend="object.serialize">__serialize()</link></member>
    <member><link linkend="object.unserialize">__unserialize()</link></member>
   </simplelist>
  </para>
 </refsect1>

</refentry><!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
