<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 443d81b33e6537a000cc235c2a11748ba8d56232 Maintainer: shein Status: ready -->
<!-- Reviewed: no -->
<refentry xml:id="function.unserialize" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>unserialize</refname>
  <refpurpose>
   Создаёт PHP-значение из хранимого представления
  </refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>mixed</type><methodname>unserialize</methodname>
   <methodparam><type>string</type><parameter>data</parameter></methodparam>
   <methodparam choice="opt"><type>array</type><parameter>options</parameter><initializer>[]</initializer></methodparam>
  </methodsynopsis>
  <simpara>
   Функция <function>unserialize</function> принимает одну сериализованную переменную
   и конвертирует её обратно в значение PHP.
  </simpara>
  <warning>
   <para>
    Не рекомендовано передавать ненадёжные пользовательские данные
    в функцию <function>unserialize</function>, даже если параметру <parameter>options</parameter>
    задано значение <literal>allowed_classes</literal>.
    Десериализация умеет создать код, который выполнится при инстанциировании объекта или
    при автоматической загрузке кода, что могут использовать недобросовестные пользователи.
    Лучше вызывать более безопасные стандартные форматы
    обмена данными, например, JSON (функциями <function>json_decode</function>
    и <function>json_encode</function>), если нужно передать сериализованные данные пользователю.
   </para>
   <para>
    Когда нужно десериализовать данные из внешних источников, пользуются функцией
    <function>hash_hmac</function>, чтобы проверить эти данные. Проверяют, чтобы данные
    не были изменены никем, кроме разработчика.
   </para>
  </warning>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>data</parameter></term>
     <listitem>
      <para>
       Сериализованная строка.
      </para>
      <para>
       Если переменная, требующая десериализации, — объект, то после успешного
       восстановления объекта PHP автоматически попытается вызвать магические методы
       <link linkend="object.unserialize">__unserialize()</link>
       или <link linkend="object.wakeup">__wakeup()</link> (если они определены).
      </para>
      <para>
       <note>
        <title>Директива unserialize_callback_func</title>
        <para>
         Разрешено устанавливать callback-функцию, которая будет вызвана,
         если при десериализации нужно проинициализировать неопределённый
         класс (чтобы исключить получение неполного объекта (<type>object</type>)
         «__PHP_Incomplete_Class»). Чтобы определить функцию для директивы
         <link linkend="ini.unserialize-callback-func">unserialize_callback_func</link>,
         пользуются файлом &php.ini;, функцией <function>ini_set</function>
         или файлом &htaccess;.
         Функция будет вызываться каждый раз, когда должен быть проинициализирован
         неопределённый класс. Для отключения этого поведения, значение
         директивы оставляют пустым.
        </para>
       </note>
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>options</parameter></term>
     <listitem>
      <para>
       Любые опции в виде ассоциативного массива,
       которые разрешено передавать в функцию <function>unserialize</function>.
      </para>
      <table>
       <title>Корректные опции</title>
       <tgroup cols="3">
        <thead>
         <row>
          <entry>Имя</entry>
          <entry>Тип</entry>
          <entry>Описание</entry>
         </row>
        </thead>
        <tbody>
         <row>
          <entry><literal>allowed_classes</literal></entry>
          <entry><type>mixed</type></entry>
          <entry>
           <simpara>
            Либо массив имён классов, которые должны быть приняты, &false; для указания
            не принимать никаких классов, либо &true;, чтобы принимать все. Если эта опция задана
            и функция <function>unserialize</function> обнаружит объект неприемлемого класса,
            то он не будет принят, а вместо этого инстанцируется как объект класса
            <classname>__PHP_Incomplete_Class</classname>.
           </simpara>
           <simpara>
            Если опция не задана, будет считаться, что ей задано значение &true;: PHP
            попытается инстанцировать объекты любого класса.
           </simpara>
          </entry>
         </row>
         <row>
          <entry><literal>max_depth</literal></entry>
          <entry><type>int</type></entry>
          <entry>
           <simpara>
            Максимальная глубина структур, разрешённая при десериализации
            и предназначенная для предотвращения переполнения стека.
            По умолчанию ограничение глубины составляет <literal>4096</literal>
            и отключается установкой опции <literal>max_depth</literal> значения <literal>0</literal>.
           </simpara>
          </entry>
         </row>
        </tbody>
       </tgroup>
      </table>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Возвращает преобразованное значение, которое принимает один
   из типов <type>bool</type>, <type>int</type>,
   <type>float</type>, <type>string</type>,
   <type>array</type> или <type>object</type>.
  </para>
  <para>
   Если переданная строка не поддаётся десериализации, возвращает &false;
   и выдаёт ошибку уровня <constant>E_WARNING</constant>.
  </para>
 </refsect1>

 <refsect1 role="errors">
  &reftitle.errors;
  <para>
   Объектам разрешено выбрасывать исключения <classname>Throwable</classname> в своих обработчиках десериализации.
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>8.3.0</entry>
       <entry>
        Теперь выдаёт ошибку уровня <constant>E_WARNING</constant>, если переданная строка несериализуема;
        раньше выдавалась ошибка уровня <constant>E_NOTICE</constant>.
       </entry>
      </row>
      <row>
       <entry>7.4.0</entry>
       <entry>
        Добавлен элемент <literal>max_depth</literal> в параметр <parameter>options</parameter>
        для установки максимальной глубины структур, разрешённых при десериализации.
       </entry>
      </row>
      <row>
       <entry>7.1.0</entry>
       <entry>
        Теперь элемент <literal>allowed_classes</literal> параметра
        <parameter>options</parameter> строго типизирован, то есть если передано что-либо,
        кроме <type>array</type> и <type>bool</type>,
        <function>unserialize</function> вернёт &false; и вызовет ошибку
        <constant>E_WARNING</constant>.
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Пример использования функции <function>unserialize</function></title>
    <programlisting role="php">
<![CDATA[
<?php

// Используем функцию unserialize() для загрузки сессионных данных в массив
// $session_data из строки, извлекаемой из базы данных.
// Пример дополняет пример, описывающий вызов функции serialize().

$conn = odbc_connect("webdb", "php", "chicken");
$stmt = odbc_prepare($conn, "SELECT data FROM sessions WHERE id = ?");
$sqldata = array($_SERVER['PHP_AUTH_USER']);
if (!odbc_execute($stmt, $sqldata) || !odbc_fetch_into($stmt, $tmp)) {
    // Если процедура извлечения данных не удалась, то инициализируем пустой массив
    $session_data = array();
} else {
    // Сейчас в элементе $tmp[0] должны быть сериализованные данные.
    $session_data = unserialize($tmp[0]);
    if (!is_array($session_data)) {
        // Что-то пошло не так, инициализируем пустой массив
        $session_data = array();
    }
}

?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   <example>
    <title>Пример использования директивы unserialize_callback_func</title>
    <programlisting role="php">
<![CDATA[
<?php

$serialized_object='O:1:"a":1:{s:5:"value";s:3:"100";}';

ini_set('unserialize_callback_func', 'mycallback'); // определяем свою callback-функцию

function mycallback($classname)
{
    // просто подключаете файл, содержащий определение класса
    // переменная $classname указывает, для какого класса требуется определение
}

?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  <warning>
   <para>
    Значение &false; возвращается как в случае ошибки, так и при десериализации
    сериализованного значения &false;. Этот особый случай можно отловить,
    сравнив значение параметра <parameter>data</parameter> со значением,
    которое возвращает вызов <literal>serialize(false)</literal>, или перехватив выданную ошибку
    уровня <constant>E_NOTICE</constant>.
   </para>
  </warning>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>json_encode</function></member>
    <member><function>json_decode</function></member>
    <member><function>hash_hmac</function></member>
    <member><function>serialize</function></member>
    <member><link linkend="language.oop5.autoload">Автоматическая загрузка классов</link></member>
    <member><link linkend="ini.unserialize-callback-func">unserialize_callback_func</link></member>
    <member><link linkend="ini.unserialize-max-depth">unserialize_max_depth</link></member>
    <member><link linkend="object.wakeup">__wakeup()</link></member>
    <member><link linkend="object.serialize">__serialize()</link></member>
    <member><link linkend="object.unserialize">__unserialize()</link></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
