<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: d08d2e887fdc229f16748df96450c9b68c9a3076 Maintainer: shein Status: ready -->
<!-- Reviewed: no -->
<refentry xml:id="function.debug-zval-dump" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>debug_zval_dump</refname>
  <refpurpose>Сбрасывает строковое представление внутренней структуры zval на вывод</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>void</type><methodname>debug_zval_dump</methodname>
   <methodparam><type>mixed</type><parameter>value</parameter></methodparam>
   <methodparam rep="repeat"><type>mixed</type><parameter>values</parameter></methodparam>
  </methodsynopsis>
  <para>
   Функция сбрасывает на вывод строковое представление внутренней структуры zval (значение Zend).
   По большей части информация приносит пользу в вопросе понимания
   или отладки деталей работы движка Zend Engine или модулей PHP.
  </para>
 </refsect1>
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>value</parameter></term>
     <listitem>
      <para>
       Обрабатываемая переменная.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>values</parameter></term>
     <listitem>
      <para>
       Следующие переменные или значения для вывода.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.void;
  </para>
 </refsect1>
 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Пример использования функции <function>debug_zval_dump</function></title>
    <programlisting role="php">
<![CDATA[
<?php

$var1 = 'Hello';
$var1 .= ' World';
$var2 = $var1;

debug_zval_dump($var1);

?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
string(11) "Hello World" refcount(3)
]]>
    </screen>
   </example>
  </para>
  <note>
   <title>Понимание <literal>refcount</literal></title>
   <para>
    Значение <literal>refcount</literal>, которое показывает функция,
    может вызвать удивление без глубокого понимания деталей работы движка.
   </para>
   <para>
    Zend Engine подсчитывает ссылки по двум причинам:
   </para>
   <para>
    <simplelist>
     <member>
      Оптимизация потребления памяти за счёт техники, которая называется «‎копирование при записи»,
      когда несколько переменных с одним и тем же значением указывают на одну
      и ту же копию в памяти. Когда одна переменная изменяется, она указывает на новую
      копию в памяти, а счётчик ссылок на оригинал уменьшается на 1.
     </member>
     <member>
      Отслеживание переменных, которые были назначены или переданы по ссылке
      (смотрите «<link linkend="language.references">Объяснение ссылок</link>»).
      Этот счётчик ссылок хранится в отдельной ссылке структуры zval, которая указывает на структуру zval
      текущего значения. Функция <function>debug_zval_dump</function> пока не показывает
      эту дополнительную структуру zval.
     </member>
    </simplelist>
   </para>
   <para>
    Поскольку функция <function>debug_zval_dump</function> принимает входные данные как обычные
    параметры, передаваемые по значению, для их передачи будет выполняться
    метод копирования при записи: вместо копирования данных счётчик ссылок увеличится
    на единицу на время вызова функции. Если бы функция изменила
    параметр после получения, то движок сделал бы копию; поскольку это не так,
    функция покажет счётчик ссылок на единицу больше, чем в вызывающей области.
   </para>
   <para>
    Передача параметра также предотвратит отображение функцией <function>debug_zval_dump</function> переменных,
    которые были назначены по ссылке. Чтобы проиллюстрировать это, приведём немного
    изменённую версию примера:
   </para>
   <para>
    <example>
     <title/>
     <programlisting role="php">
<![CDATA[
<?php

$var1 = 'Hello';
$var1 .= ' World';

// Укажите три переменные как ссылки на одно и то же значение
$var2 =& $var1;
$var3 =& $var1;

debug_zval_dump($var1);

?>
]]>
     </programlisting>
     &example.outputs;
     <screen>
<![CDATA[
string(11) "Hello World" refcount(2)
]]>
     </screen>
    </example>
   </para>
   <para>
    Хотя переменные <varname>$var1</varname>, <varname>$var2</varname> и
    <varname>$var3</varname> связаны как ссылки,
    в функцию <function>debug_zval_dump</function> передаётся только <emphasis>значение</emphasis>.
    Это значение обрабатывается один раз набором ссылок и один раз внутри функции <function>debug_zval_dump</function>,
    поэтому счётчик ссылок равен 2.
   </para>
   <para>
    Дополнительные сложности возникают из-за оптимизаций, которые проводит движок для
    разных типов данных. Для ряда типов, например целых чисел, движок не использует «копирование при записи»,
    поэтому вообще не показывает счётчик ссылок. В других случаях счётчик refcount показывает дополнительные
    копии, которые движок создаёт внутри, например, когда сохраняет литеральную строку или массив
    как часть инструкции кода.
   </para>
  </note>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>var_dump</function></member>
    <member><function>debug_backtrace</function></member>
    <member>Раздел «<link linkend="language.references">Объяснение ссылок</link>»</member>
    <member>Статья <link xlink:href="&url.derick.references;">Объяснение PHP-ссылок, которое даёт Derick Rethans</link></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
