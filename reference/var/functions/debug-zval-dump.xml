<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: d08d2e887fdc229f16748df96450c9b68c9a3076 Maintainer: shein Status: ready -->
<!-- Reviewed: yes -->
<!-- $Revision$ -->
<refentry xml:id="function.debug-zval-dump" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>debug_zval_dump</refname>
  <refpurpose>Выводит строковое представление внутренней структуры zval</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>void</type><methodname>debug_zval_dump</methodname>
   <methodparam><type>mixed</type><parameter>value</parameter></methodparam>
   <methodparam rep="repeat"><type>mixed</type><parameter>values</parameter></methodparam>
  </methodsynopsis>
  <para>
   Выводит на вывод строковое представление внутренней структуры zval (значение Zend).
   Это в основном полезно для понимания или отладки деталей реализации Zend Engine или модулей PHP.
  </para>
 </refsect1>
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>value</parameter></term>
     <listitem>
      <para>
       Обрабатываемая переменная.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>values</parameter></term>
     <listitem>
      <para>
       Следующие переменные или значения для обработки.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.void;
  </para>
 </refsect1>
 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Пример использования <function>debug_zval_dump</function></title>
    <programlisting role="php">
<![CDATA[
<?php
$var1 = 'Hello';
$var1 .= ' World';
$var2 = $var1;

debug_zval_dump($var1);
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
string(11) "Hello World" refcount(3)
]]>
    </screen>
   </example>
  </para>
  <note>
   <title>Понимание <literal>refcount</literal></title>
   <para>
    Значение <literal>refcount</literal>, показываемое этой функцией,
    может быть неожиданным без детального понимания реализации движка.
   </para>
   <para>
    Zend Engine использует подсчёт ссылок для двух разных целей:
   </para>
   <para>
    <simplelist>
     <member>
      Оптимизация использования памяти с помощью метода, называемого "копирование при записи",
      когда несколько переменных, содержащих одно и то же значение, указывают на одну
      и ту же копию в памяти. Когда любая из переменных изменяется, она указывает на новую
      копию в памяти, а счётчик ссылок на оригинал уменьшается на 1.
     </member>
     <member>
      Отслеживание переменных, которые были назначены или переданы по ссылке (смотрите <link linkend="language.references">Объяснение ссылок</link>). Этот
      счётчик ссылок хранится в отдельной ссылке zval, указывающей на zval для текущего значения.
      Этот дополнительный zval в настоящее время не отображается в
      <function>debug_zval_dump</function>.
     </member>
    </simplelist>
   </para>
   <para>
    Поскольку <function>debug_zval_dump</function> принимает свои входные данные как обычные
    параметры, передаваемые по значению, для их передачи будет использоваться
    метод копирования при записи: вместо копирования данных счётчик ссылок будет увеличен
    на единицу на время существования вызова функции. Если функция изменила
    параметр после его получения, будет сделана копия; поскольку это не так,
    покажет счётчик ссылок на один выше, чем в вызывающей области.
   </para>
   <para>
    Передача параметров также предотвращает отображение переменных <function>debug_zval_dump</function>,
    которые были назначены по ссылке. Для иллюстрации рассмотрим слегка
    изменённую версию приведённого выше примера:
   </para>
   <para>
    <example>
     <title/>
     <programlisting role="php">
<![CDATA[
<?php
$var1 = 'Hello';
$var1 .= ' World';
// Укажите три переменные как ссылки на одно и то же значение
$var2 =& $var1;
$var3 =& $var1;

debug_zval_dump($var1);
?>
]]>
     </programlisting>
     &example.outputs;
     <screen>
<![CDATA[
string(11) "Hello World" refcount(2)
]]>
     </screen>
    </example>
   </para>
   <para>
    Хотя <varname>$var1</varname>, <varname>$var2</varname>, и
    <varname>$var3</varname> связаны как ссылки,
    только <emphasis>value</emphasis> передаётся в <function>debug_zval_dump</function>.
    Это значение используется один раз набором ссылок и один раз внутри функции <function>debug_zval_dump</function>, поэтому счётчик
    ссылок равен 2.
   </para>
   <para>
    Дальнейшие сложности возникают из-за оптимизации, сделанной в движке для
    различных типов данных. Некоторые типы, такие как целые числа, не используют "копирование при записи",
    поэтому не показывают счётчик ссылок вообще. В других случаях refcount показывает дополнительные
    копии, используемые внутри, например, когда буквенная строка или массив сохраняется как
    часть инструкции кода.
   </para>
  </note>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>var_dump</function></member>
    <member><function>debug_backtrace</function></member>
    <member>"<link linkend="language.references">Ссылки. Разъяснения</link>"</member>
    <member>"<link xlink:href="&url.derick.references;">Ссылки. Разъяснения (от Derick Rethans)</link>"</member>
   </simplelist>
  </para>
 </refsect1>
</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
