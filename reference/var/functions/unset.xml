<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: d816a0fad6c458d9515f697cc89e26ca9d8069f5 Maintainer: shein Status: ready -->
<!-- Reviewed: no -->
<refentry xml:id="function.unset" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>unset</refname>
  <refpurpose>Удаляет переменную синтаксисом <function>unset</function></refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>void</type><methodname>unset</methodname>
   <methodparam><type>mixed</type><parameter>var</parameter></methodparam>
   <methodparam rep="repeat"><type>mixed</type><parameter>vars</parameter></methodparam>
  </methodsynopsis>
  <para>
   Языковая конструкция <function>unset</function> уничтожает заданные переменные.
  </para>
  <para>
   Поведение языковой конструкции <function>unset</function> внутри функции
   зависит от типа переменной, которую пытаются удалить.
  </para>
  <para>
   При удалении глобальной переменной внутри
   функции удалится только локальная переменная. Переменная
   в области видимости вызова функции сохранит то же значение, что и до вызова
   конструкции <function>unset</function>.
   <example>
    <title>Пример удаления переменной конструкцией <function>unset</function></title>
    <programlisting role="php">
<![CDATA[
<?php

function destroy_foo()
{
    global $foo;
    unset($foo);
}

$foo = 'bar';
destroy_foo();
echo $foo;

?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   Внутри функции глобальную переменную удаляют через
   суперглобальный массив <varname>$GLOBALS</varname>:
   <example>
    <title>Удаление конструкцией <function>unset</function> глобальной переменной</title>
    <programlisting role="php">
<![CDATA[
<?php

function foo()
{
    unset($GLOBALS['bar']);
}

$bar = "something";
foo();

?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   При удалении конструкцией <function>unset</function> переменной, которую передали ПО ССЫЛКЕ,
   внутри функции удаляется только локальная
   переменная. Переменная в области видимости вызова функции сохранит то же значение,
   что и до вызова конструкции <function>unset</function>.
   <example>
    <title>Удаление конструкцией <function>unset</function> переменной по ссылке</title>
    <programlisting role="php">
<![CDATA[
<?php

function foo(&$bar)
{
    unset($bar);
    $bar = "blah";
}

$bar = 'something';
echo "$bar\n";

foo($bar);
echo "$bar\n";

?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   При удалении статической переменной внутри
   функции конструкция <function>unset</function> удалит переменную только
   в контексте оставшейся части функции. При следующем
   вызове функции предыдущее значение переменной восстановится.
   <example>
    <title>Удаление конструкцией <function>unset</function> статической переменной</title>
    <programlisting role="php">
<![CDATA[
<?php

function foo()
{
    static $bar;
    $bar++;
    echo "До удаления: $bar, ";
    unset($bar);
    $bar = 23;
    echo "после удаления: $bar\n";
}

foo();
foo();
foo();

?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>var</parameter></term>
     <listitem>
      <para>
       Переменная, которую требуется удалить.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>vars</parameter></term>
     <listitem>
      <para>
       Дополнительные переменные.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.void;
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Пример поведения языковой конструкции <function>unset</function></title>
    <programlisting role="php" annotations="non-interactive">
<![CDATA[
<?php

// Удаляем одну переменную
unset($foo);

// Удаляем один элемент массива
unset($bar['quux']);

// Удаляем набор переменных
unset($foo1, $foo2, $foo3);

?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  &note.language-construct;
  <note>
   <para>
    Языковая конструкция умеет удалять свойства объекта, которые видны в текущем контексте.
   </para>
   <para>
    При доступе к неустановленному свойству
    вызывается метод <link linkend="object.get">__get()</link>,
    а при попытке установить неустановленное свойство
    вызывается метод <link linkend="object.set">__set()</link>,
    если эти магические методы определили в классе.
   </para>
  </note>
  <note>
   <para>
    Невозможно удалить псевдопеременную текущего контекста <literal>$this</literal> внутри метода объекта.
   </para>
  </note>
  <note>
   <para>
    При вызове конструкции <function>unset</function> на недоступных или необъявленных свойствах объекта
    вызывается метод перегрузки <link linkend="object.unset">__unset()</link>,
    если этот метод определили в классе.
   </para>
  </note>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>isset</function></member>
    <member><function>empty</function></member>
    <member><link linkend="object.unset">__unset()</link></member>
    <member><function>array_splice</function></member>
    <member><link linkend="language.types.null.casting">Приведение типа конструкцией (unset)</link></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
