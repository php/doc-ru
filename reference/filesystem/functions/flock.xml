<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 0bfb0eb957e0468912af86bba09fae588010c1df Maintainer: shein Status: ready -->
<!-- Reviewed: no -->
<refentry xml:id="function.flock" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>flock</refname>
  <refpurpose>Портируемая консультативная блокировка файлов</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>bool</type><methodname>flock</methodname>
   <methodparam><type>resource</type><parameter>stream</parameter></methodparam>
   <methodparam><type>int</type><parameter>operation</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter role="reference">would_block</parameter><initializer>&null;</initializer></methodparam>
  </methodsynopsis>
  <para>
   <function>flock</function> позволяет осуществить простую модель
   чтения/записи, которая может быть использована практически на
   любой платформе (включая большинство вариантов Unix и даже Windows).
  </para>
  <para>
   Блокировка также снимается с помощью <function>fclose</function> или когда <parameter>stream</parameter> собирается сборщиком мусора.
  </para>
  <para>
   PHP поддерживает портируемый способ консультативной блокировки
   (advisory locking) полностью всего файла (что означает, что
   все программы, осуществляющие доступ к файлу, должны использовать
   один и тот же способ блокировки, иначе блокировка не будет
   работать). По умолчанию данная функция будет ждать получения
   блокировки; это поведение можно изменить с помощью описанного ниже параметра <constant>LOCK_NB</constant>.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>stream</parameter></term>
     <listitem>
      &fs.file.pointer;
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>operation</parameter></term>
     <listitem>
      <para>
       <parameter>operation</parameter> может принимать следующие значения:
       <itemizedlist>
        <listitem>
         <simpara>
          <constant>LOCK_SH</constant> для получения разделяемой блокировки (чтение).
         </simpara>
        </listitem>
        <listitem>
         <simpara>
          <constant>LOCK_EX</constant> для получения эксклюзивной блокировки (запись).
         </simpara>
        </listitem>
        <listitem>
         <simpara>
          <constant>LOCK_UN</constant> для снятия блокировки (разделяемой или эксклюзивной).
         </simpara>
        </listitem>
       </itemizedlist>
      </para>
      <para>
       Также возможно добавить константу <constant>LOCK_NB</constant>
       в качестве битовой маски к любой из вышеуказанных операций,
       если <function>flock</function> не должна
       блокироваться во время попытки блокировки.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>would_block</parameter></term>
     <listitem>
      <para>
       Необязательный третий параметр будет установлен в 1,
       если блокировка будет блокирующей
       (код ошибки EWOULDBLOCK).
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.success;
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Пример использования функции <function>flock</function></title>
    <programlisting role="php">
<![CDATA[
<?php

$fp = fopen("/tmp/lock.txt", "r+");

if (flock($fp, LOCK_EX)) { // выполняем эксклюзивную блокировку
    ftruncate($fp, 0); // очищаем файл
    fwrite($fp, "Что-нибудь пишем сюда\n");
    fflush($fp);        // очищаем вывод перед отменой блокировки
    flock($fp, LOCK_UN); // снимаем блокировку
} else {
    echo "Не удалось получить блокировку!";
}

fclose($fp);

?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   <example>
    <title>Использование <function>flock</function> с параметром <constant>LOCK_NB</constant></title>
    <programlisting role="php">
<![CDATA[
<?php
$fp = fopen('/tmp/lock.txt', 'r+');

/* Включаем параметр LOCK_NB в операции LOCK_EX */
if(!flock($fp, LOCK_EX | LOCK_NB)) {
    echo 'Не удалось получить блокировку';
    exit(-1);
}

/* ... */

fclose($fp);
?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  <note>
   <para>
    В Windows <function>flock</function> использует обязательную
    (mandatory) блокировку вместо консультативной. Обязательная
    блокировка также поддерживается на Linux и операционных системах,
    основанных на System V с помощью стандартного механизма, который
    предоставляет системный вызов fcntl(): то есть искомый файл должен
    иметь установленный бит доступа setgid и неустановленный бит
    группового выполнения. Для корректной работы этой схемы в Linux,
    файловая система также должна быть смонтирована с опцией mand.
   </para>
  </note>
  <note>
   <para>
    Из-за того, что функции <function>flock</function> необходим указатель
    на файл, вам может понадобиться воспользоваться специальным запирающим
    файлом для того, чтобы ограничить доступ к файлу, который вы намерены
    очищать, путём его открытия в режиме записи (используя "w" или "w+" в
    качестве аргумента функции <function>fopen</function>).
   </para>
  </note>
  <note>
   <para>
    Может быть использована только на дескрипторах локальных файлов,
    возвращённых функцией <function>fopen</function>, или файловых
    дескрипторах пользовательских потоков, реализующих метод
    <function>streamWrapper::stream_lock</function>.
   </para>
  </note>
  <warning>
   <para>
    Присвоение другого значения аргументу <parameter>stream</parameter> в
    последующем коде отменит существующую блокировку.
   </para>
  </warning>
  <warning>
   <para>
    В некоторых операционных системах <function>flock</function> реализован
    на уровне процессов. При использовании многопоточных серверных API,
    таких как ISAPI, вы не можете полагаться на <function>flock</function>
    для защиты ваших файлов от других PHP-скриптов, которые
    работают в параллельном потоке на том же сервере!
   </para>
   <para>
    <function>flock</function> не поддерживается на старых файловых системах
    вроде <literal>FAT</literal> и её производных, так что всегда будет
    возвращать &false; в этих окружениях.
   </para>
  </warning>
  <note>
   <para>
    В Windows, если процесс блокировки открывает файл во второй раз, он не может
    получить доступ к файлу через второй дескриптор, пока он не разблокирует файл.
   </para>
  </note>
 </refsect1>

</refentry><!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
