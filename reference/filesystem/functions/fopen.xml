<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 18bac8389b98d513c89e965000086acfcdfdd0a9 Maintainer: shein Status: ready -->
<!-- Reviewed: no -->
<refentry xmlns="http://docbook.org/ns/docbook" xml:id="function.fopen">
 <refnamediv>
  <refname>fopen</refname>
  <refpurpose>Открывает файл или URL-адрес</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type class="union"><type>resource</type><type>false</type></type><methodname>fopen</methodname>
   <methodparam><type>string</type><parameter>filename</parameter></methodparam>
   <methodparam><type>string</type><parameter>mode</parameter></methodparam>
   <methodparam choice="opt"><type>bool</type><parameter>use_include_path</parameter><initializer>&false;</initializer></methodparam>
   <methodparam choice="opt"><type class="union"><type>resource</type><type>null</type></type><parameter>context</parameter><initializer>&null;</initializer></methodparam>
  </methodsynopsis>
  <para>
   Функция <function>fopen</function> связывает именованный ресурс
   <parameter>filename</parameter> с потоком.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>filename</parameter></term>
     <listitem>
      <para>
       При передаче в параметр <parameter>filename</parameter> аргумента в форме "scheme://..."
       функция распознает значение как URL-адрес, и PHP выполнит поиск обработчика протокола —
       «обёртки» — для этой схемы. Если для этого протокола
       не зарегистрировали ни одной обёртки, PHP выдаст замечание,
       чтобы помочь отследить потенциальную проблему
       в скрипте, а затем продолжит выполнение так, как если бы параметр <parameter>filename</parameter>
       указывал на обыкновенный файл.
      </para>
      <para>
       PHP попытается открыть поток для файла, если оценит путь <parameter>filename</parameter>
       как указатель на локальный файл.
       PHP считает файл, только если права доступа к файлу
       разрешают такой доступ.
       PHP применит дополнительные ограничения,
       если включили директиву <link linkend="ini.open-basedir">open_basedir</link>.
      </para>
      <para>
       PHP проверит, включили ли директиву <link linkend="ini.allow-url-fopen">allow_url_fopen</link>,
       если оценит параметр <parameter>filename</parameter> как указатель
       на зарегистрированный протокол и этот протокол зарегистрировали
       как сетевой URL-адрес.
       PHP выдаст предупреждение и вызов функции <function>fopen</function> завершится ошибкой,
       если директиву выключили.
      </para>
      <note>
       <para>
        Список поддерживаемых протоколов перечисляет раздел «<xref linkend="wrappers"/>».
        Отдельные протоколы, или <literal>обёртки</literal>, поддерживают
        опции <literal>контекста</literal> и (или) файла &php.ini;.
        Обратитесь к странице с описанием протокола,
        чтобы получить список опций, которые можно установить
        (например, значение директивы <literal>user_agent</literal> в файле &php.ini; использует
        обёртка <literal>http</literal>).
       </para>
      </note>
      <para>
       На платформе Windows требуется экранировать
       обратные слеши в пути к файлу или указывать прямые слеши.
       <informalexample>
        <programlisting role="php">
<![CDATA[
<?php

$handle = fopen("c:\\folder\\resource.txt", "r");

?>
]]>
        </programlisting>
       </informalexample>
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>mode</parameter></term>
     <listitem>
      <para>
       Параметр <parameter>mode</parameter> указывает тип доступа
       к потоку. Доступны следующие режимы:
       <table>
        <title>
         Список возможных режимов для параметра <parameter>mode</parameter>
         функции <function>fopen</function>
        </title>
        <tgroup cols="2">
         <thead>
          <row>
           <entry><parameter>mode</parameter></entry>
           <entry>Описание</entry>
          </row>
         </thead>
         <tbody>
          <row>
           <entry><literal>'r'</literal></entry>
           <entry>
            Открывает файл только для чтения; помещает указатель
            в начало файла.
           </entry>
          </row>
          <row>
           <entry><literal>'r+'</literal></entry>
           <entry>
            Открывает файл для чтения и записи; помещает указатель
            в начало файла.
           </entry>
          </row>
          <row>
           <entry><literal>'w'</literal></entry>
           <entry>
            Открывает файл только для записи; помещает указатель в начало файла
            и обрезает файл до нулевой длины. Функция пытается создать файл, если файл не существует.
           </entry>
          </row>
          <row>
           <entry><literal>'w+'</literal></entry>
           <entry>
            Открывает файл для чтения и записи; в остальном ведёт себя аналогично флагу <literal>'w'</literal>.
           </entry>
          </row>
          <row>
           <entry><literal>'a'</literal></entry>
           <entry>
            Открывает файл только для записи; помещает указатель в конец
            файла. Функция пытается создать файл, если файл не существует.
            В этом режиме функция <function>fseek</function> не влияет на положение указателя,
            записи каждый раз добавляются в конец.
           </entry>
          </row>
          <row>
           <entry><literal>'a+'</literal></entry>
           <entry>
            Открывает файл для чтения и записи; помещает указатель в конец
            файла. Функция пытается создать файл, если файл не существует.
            В этом режиме функция <function>fseek</function> влияет только на позицию считывания,
            записи каждый раз добавляются в конец.
           </entry>
          </row>
          <row>
           <entry><literal>'x'</literal></entry>
           <entry>
            Создаёт и открывает файл только для записи; помещает указатель
            в начало файла. Вызов функции <function>fopen</function> закончится неудачей,
            вернёт &false; и выдаст ошибку уровня <constant>E_WARNING</constant>,
            если файл уже существует.
            Функция пытается создать файл, если файл не существует. Это эквивалентно
            указанию флагов <literal>O_EXCL|O_CREAT</literal> для внутреннего
            системного вызова <literal>open(2)</literal>.
           </entry>
          </row>
          <row>
           <entry><literal>'x+'</literal></entry>
           <entry>
            Создаёт и открывает файл для чтения и записи; в остальном ведёт себя аналогично флагу <literal>'x'</literal>.
           </entry>
          </row>
          <row>
           <entry><literal>'c'</literal></entry>
           <entry>
            Открывает файл только для записи. Функция создаст файл, если файл не существует.
            Файл не обрезается — в отличие от режима <literal>'w'</literal>, —
            а вызов этой функции не вызывает ошибку, как и в режиме <literal>'x'</literal>,
            если файл существует. Функция передвинет указатель в начало файла.
            Это полезно, если требуется получить рекомендательную блокировку
            (см. описание функции <function>flock</function>) перед попыткой изменения файла, поскольку
            режим <literal>'w'</literal> иногда обрезает файл ещё до получения блокировки.
            Для обрезки файла вызывают функцию
            <function>ftruncate</function> после запроса на блокировку, если требуется.
           </entry>
          </row>
          <row>
           <entry><literal>'c+'</literal></entry>
           <entry>
            Открывает файл для чтения и записи; в остальном ведёт себя аналогично флагу <literal>'c'</literal>.
           </entry>
          </row>
          <row>
           <entry><literal>'e'</literal></entry>
           <entry>
            Устанавливает флаг close-on-exec (закрытия при исполнении) для открытого дескриптора файла.
            Флаг доступен только в PHP, который скомпилировали на системах с поддержкой стандарта POSIX.1-2008.
           </entry>
          </row>
          <row>
           <entry><literal>'n'</literal></entry>
           <entry>
            Устанавливает неблокирующий флаг для открытого файлового дескриптора.
            Флаг доступен только в PHP, который скомпилировали на системах с поддержкой стандарта POSIX.1-2008.
           </entry>
          </row>
         </tbody>
        </tgroup>
       </table>
      </para>
      <note>
       <para>
        В разных семействах операционных систем действуют разные соглашения
        о завершении строк. Когда при записи текстового файла требуется вставить
        разрыв строки, необходимо использовать правильный для операционной системы
        символ (или символы). Системы на базе Unix в качестве символа конца строки
        используют символ <literal>\n</literal>, системы
        семейства Windows в качестве символов окончания строки
        используют последовательность символов <literal>\r\n</literal>, а системы
        семейства Macintosh (Mac OS Classic) — символ <literal>\r</literal>.
       </para>
       <para>
        Файлы, в которые записали неправильные символы конца строк,
        «выглядят странно», когда такие файлы открывают в других приложениях.
       </para>
       <para>
        ОС Windows предлагает флаг перевода в текстовый режим (<literal>'t'</literal>),
        который во время работы с файлом автоматически переведёт
        символ <literal>\n</literal> в символы <literal>\r\n</literal>.
        И наоборот — можно также использовать флаг <literal>'b'</literal>, чтобы
        принудительно включить двоичный режим, который не будет переводить данные.
        Чтобы использовать эти флаги,
        значение <literal>'b'</literal> или <literal>'t'</literal> указывают последним
        символом параметра <parameter>mode</parameter>.
       </para>
       <para>
        Режим перевода по умолчанию — флаг <literal>'b'</literal>.
        При работе с простыми текстовыми файлами
        можно указать режим <literal>'t'</literal>, а для обозначения концов строк в скрипте
        использовать режим <literal>\n</literal>, но помнить,
        что файлы будут использоваться в приложениях наподобие старых версий «Блокнота».
        В остальных случаях лучше указывать флаг <literal>'b'</literal>.
       </para>
       <para>
        Иногда при работе с двоичными файлами, для которых указали флаг 't',
        возникают странные проблемы с данными, включая повреждённые файлы изображений
        и проблемы с символами <literal>\r\n</literal>.
       </para>
      </note>
      <note>
       <para>
        В целях переносимости также настоятельно рекомендуется переписать код,
        который использует или полагается на режим <literal>'t'</literal>,
        чтобы вместо этого режима использовались правильные окончания строк и режим <literal>'b'</literal>.
       </para>
      </note>
      <note>
       <simpara>
        Функция игнорирует параметр <parameter>mode</parameter> при работе
        с обёртками потоков <filename>php://output</filename>,
        <filename>php://input</filename>, <filename>php://stdin</filename>,
        <filename>php://stdout</filename>, <filename>php://stderr</filename>
        и <filename>php://fd</filename>.
       </simpara>
      </note>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>use_include_path</parameter></term>
     <listitem>
      <para>
       Для необязательного третьего параметра <parameter>use_include_path</parameter>
       разрешается устанавливать значение &true;, если также требуется
       искать файл в списке путей директивы <link linkend="ini.include-path">include_path</link>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>context</parameter></term>
     <listitem>
      &note.context-support;
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Функция возвращает указатель на файл в случае успешного выполнения&return.falseforfailure;
  </para>
 </refsect1>

 <refsect1 role="errors">
  &reftitle.errors;
  &fs.emits.warning.on.failure;
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>7.0.16, 7.1.2</entry>
       <entry>
        Добавили флаг <literal>'e'</literal>.
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Примеры использования функции <function>fopen</function></title>
    <programlisting role="php">
<![CDATA[
<?php

$handle = fopen("/home/rasmus/file.txt", "r");
$handle = fopen("/home/rasmus/file.gif", "wb");
$handle = fopen("http://www.example.com/", "r");
$handle = fopen("ftp://user:password@example.com/somefile.txt", "w");

?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  &warn.ssl-non-standard;
  <note>
   <para>
    Не забудьте проверить, что у серверного процесса есть доступ к файлам и каталогам,
    если при работе PHP в качестве версии серверного модуля
    возникли ошибки чтения или записи файлов.
   </para>
  </note>
  <note>
   <para>
    Функция умеет принимать каталог как аргумент для параметра <parameter>filename</parameter>.
    До вызова функции <function>fopen</function> иногда требуется вызов функции <function>is_dir</function>,
    когда неизвестно, параметр <parameter>filename</parameter> — файл или каталог.
   </para>
  </note>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><xref linkend="wrappers"/></member>
    <member><function>fclose</function></member>
    <member><function>fgets</function></member>
    <member><function>fread</function></member>
    <member><function>fwrite</function></member>
    <member><function>fsockopen</function></member>
    <member><function>file</function></member>
    <member><function>file_exists</function></member>
    <member><function>is_readable</function></member>
    <member><function>stream_set_timeout</function></member>
    <member><function>popen</function></member>
    <member><function>stream_context_create</function></member>
    <member><function>umask</function></member>
    <member><classname>SplFileObject</classname></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
