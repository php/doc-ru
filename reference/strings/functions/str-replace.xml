<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: e095023e408c8cb6378ae16bb6870343a3946919 Maintainer: shein Status: ready -->
<!-- Reviewed: yes -->
<refentry xml:id="function.str-replace" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>str_replace</refname>
  <refpurpose>Заменяет все вхождения строки поиска на строку замены</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type class="union"><type>string</type><type>array</type></type><methodname>str_replace</methodname>
   <methodparam><type class="union"><type>array</type><type>string</type></type><parameter>search</parameter></methodparam>
   <methodparam><type class="union"><type>array</type><type>string</type></type><parameter>replace</parameter></methodparam>
   <methodparam><type class="union"><type>string</type><type>array</type></type><parameter>subject</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter role="reference">count</parameter><initializer>&null;</initializer></methodparam>
  </methodsynopsis>
  <para>
   Эта функция возвращает строку или массив, в котором все
   вхождения <parameter>search</parameter> в <parameter>subject</parameter>
   заменены на <parameter>replace</parameter>.
  </para>
  <para>
   Если не нужны сложные правила поиска/замены (например, регулярные
   выражения), использование этой функции предпочтительнее
   <function>preg_replace</function>.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   Если <parameter>search</parameter> и <parameter>replace</parameter>
   - массивы, то <function>str_replace</function> использует каждое
   значение из соответствующего массива для поиска и замены в
   <parameter>subject</parameter>. Если в массиве
   <parameter>replace</parameter> меньше элементов, чем в
   <parameter>search</parameter>, в качестве строки замены для
   оставшихся значений будет использована пустая строка.
   Если <parameter>search</parameter> - массив, а
   <parameter>replace</parameter> - строка, то
   эта строка замены будет использована для каждого элемента
   массива <parameter>search</parameter>. Обратный случай смысла
   не имеет.
  </para>
  <para>
   Если <parameter>search</parameter> или
   <parameter>replace</parameter> являются массивами, их элементы
   будут обработаны от первого к последнему.
  </para>
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>search</parameter></term>
     <listitem>
      <para>
       Искомое значение, также известное как <emphasis>needle</emphasis>
       (иголка). Для множества искомых значений можно использовать массив.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>replace</parameter></term>
     <listitem>
      <para>
       Значение замены, будет использовано для замены искомых значений
       <parameter>search</parameter>. Для множества значений можно использовать
       массив.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>subject</parameter></term>
     <listitem>
      <para>
       Строка или массив, в котором производится поиск и замена,
       также известный как <emphasis>haystack</emphasis> (стог сена).
      </para>
      <para>
       Если <parameter>subject</parameter> является массивом, то поиск
       с заменой будет осуществляться над каждым элементом
       <parameter>subject</parameter>, а результатом функции также
       будет являться массив.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>count</parameter></term>
     <listitem>
      <para>
       Если передан, то будет установлен в количество произведённых замен.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Эта функция возвращает строку или массив с заменёнными значениями.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Примеры использования <function>str_replace</function></title>
    <programlisting role="php">
<![CDATA[
<?php
// присваивает <body text='black'>
$bodytag = str_replace("%body%", "black", "<body text='%body%'>");

// присваивает: Hll Wrld f PHP
$vowels = array("a", "e", "i", "o", "u", "A", "E", "I", "O", "U");
$onlyconsonants = str_replace($vowels, "", "Hello World of PHP");

// присваивает: You should eat pizza, beer, and ice cream every day
$phrase  = "You should eat fruits, vegetables, and fiber every day.";
$healthy = array("fruits", "vegetables", "fiber");
$yummy   = array("pizza", "beer", "ice cream");

$newphrase = str_replace($healthy, $yummy, $phrase);

// присваивает: 2
$str = str_replace("ll", "", "good golly miss molly!", $count);
echo $count;
?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   <example>
    <title>Примеры потенциальных трюков с <function>str_replace</function></title>
    <programlisting role="php">
<![CDATA[
<?php
// Порядок замены
$str     = "Строка 1\nСтрока 2\rСтрока 3\r\nСтрока 4\n";
$order   = array("\r\n", "\n", "\r");
$replace = '<br />';

// Обрабатывает сначала \r\n для избежания их повторной замены.
echo $newstr = str_replace($order, $replace, $str);

// Выводит F, т.к. A заменяется на B, затем B на C, и так далее...
// В итоге E будет заменено F, так как замена происходит слева направо.
$search  = array('A', 'B', 'C', 'D', 'E');
$replace = array('B', 'C', 'D', 'E', 'F');
$subject = 'A';
echo str_replace($search, $replace, $subject);

// Выводит: яблорехкорех орех (по вышеуказанной причине)
$letters = array('я', 'о');
$fruit   = array('яблоко', 'орех');
$text    = 'я о';
$output  = str_replace($letters, $fruit, $text);
echo $output;
?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  &note.bin-safe;
  <caution>
   <title>Замечание о порядке замены</title>
   <para>
    Так как <function>str_replace</function> осуществляет замену
    слева направо, то при использовании множественных замен
    она может заменить ранее вставленное значение на другое.
    Смотрите также примеры на этой странице.
   </para>
  </caution>
  <note>
   <para>
    Эта функция чувствительна к регистру. Используйте
    <function>str_ireplace</function> для замены без учёта регистра.
   </para>
  </note>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>str_ireplace</function></member>
    <member><function>substr_replace</function></member>
    <member><function>preg_replace</function></member>
    <member><function>strtr</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry><!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
