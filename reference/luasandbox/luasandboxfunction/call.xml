<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 86e6094e86b84a51d00ab217ac50ce8dde33d82a Maintainer: zors1 Status: ready -->
<!-- Reviewed: no -->

<refentry xml:id="luasandboxfunction.call" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>LuaSandboxFunction::call</refname>
  <refpurpose>Вызывает Lua-функцию</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <modifier>public</modifier> <type class="union"><type>array</type><type>bool</type></type><methodname>LuaSandboxFunction::call</methodname>
   <methodparam rep="repeat"><type>string</type><parameter>args</parameter></methodparam>
  </methodsynopsis>
  <para>
   Вызывает Lua-функцию.
  </para>
  <para>
   Ошибки, вызванные PHP-кодом, приведут к тому, что функция вернёт
   <literal>false</literal> и будет вызвано предупреждение
   <constant>E_WARNING</constant>, например, когда тип ресурса (<type>resource</type>)
   используется в качестве аргумента. При возникновении ошибок Lua будет
   выброшено исключение <classname>LuaSandboxRuntimeError</classname>.
  </para>
  <para>
   Типы PHP и Lua преобразуются следующим образом:
  </para>
  <para>
   <itemizedlist>
    <listitem>
     <para>&null; в PHP - это <literal>nil</literal> в Lua и наоборот.</para>
    </listitem>
    <listitem>
     <para>
      Целые числа (<type>int</type>) и числа с плавающей точкой
      (<type>float</type>) в PHP преобразуются в числа Lua.
      Поддерживаются бесконечность и <constant>NAN</constant>.
     </para>
    </listitem>
    <listitem>
     <para>
      Числа Lua без дробной части в диапазоне приблизительно от
      <literal>-2**53</literal> и <literal>2**53</literal> преобразуются в
      целые числа (<type>int</type>) PHP, а другие - в числа PHP с плавающей
      точкой (<type>float</type>).
     </para>
    </listitem>
    <listitem>
     <para>
      Логические значения в PHP (<type>bool</type>) - это значения типа
      boolean в Lua и наоборот.
     </para>
    </listitem>
    <listitem>
     <para>
      Строки в PHP (<type>string</type>) - это значения типа string в Lua и
      наоборот.
     </para>
    </listitem>
    <listitem>
     <para>
      Функции Lua - это объекты PHP <classname>LuaSandboxFunction</classname>,
      и наоборот. Callback-функции PHP (<type>callable</type>) не поддерживаются.
     </para>
    </listitem>
    <listitem>
     <para>
      Массивы PHP (<type>array</type>) преобразуются в таблицы Lua и наоборот.
     </para>
     <para>
      <itemizedlist>
       <listitem>
        <para>
         Обратите внимание, что Lua обычно индексирует массивы с 1, в то время
         как PHP индексирует массивы с 0. Никаких корректировок для этих
         различных соглашений не делается.
        </para>
       </listitem>
       <listitem>
        <para>
         Массивы, ссылающиеся сами на себя, не поддерживаются ни в одном из
         направлений.
        </para>
       </listitem>
       <listitem>
        <para>Ссылки PHP разыменовываются.</para>
       </listitem>
       <listitem>
        <para>
         <literal>__pairs</literal> и <literal>__ipairs</literal> из Lua
         обрабатываются. <literal>__index</literal> игнорируется.
        </para>
       </listitem>
       <listitem>
        <para>
         При преобразовании из PHP в Lua целочисленные ключи от
         <literal>-2**53</literal> до <literal>2**53</literal> представляются
         как числа в Lua. Все остальные ключи представлены в виде строк Lua.
        </para>
       </listitem>
       <listitem>
        <para>
         При преобразовании из Lua в PHP отличные от строк и чисел ключи
         приведут к возникновению ошибки, как и конфликты при преобразовании
         чисел в строки или наоборот (поскольку PHP считает такие конструкции,
         как <literal>$a[0]</literal> и <literal>$a["0"]</literal>
         эквивалентными).
        </para>
       </listitem>
      </itemizedlist>
     </para>
    </listitem>
    <listitem>
     <para>
      Все остальные типы не поддерживаются и вызовут ошибку/выбросят исключение,
      включая PHP-объекты (<type>object</type>), пользовательские данные Lua и
      типы потоков.
     </para>
    </listitem>
   </itemizedlist>
  </para>
  <para>
   Функции Lua по своей сути возвращают список результатов. Таким образом,
   в случае успешного выполнения этот метод возвращает массив (<type>array</type>),
   содержащий все значения, возвращаемые Lua, с целочисленными ключами
   (<type>int</type>), начинающимися с нуля. Lua может не возвращать результатов,
   и в этом случае возвращается пустой массив.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <variablelist>
   <varlistentry>
    <term><parameter>args</parameter></term>
    <listitem>
     <para>
      Аргументы, передаваемые в функцию.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Возвращает массив значений (<type>array</type>), возвращаемых функцией,
   который может быть пустым, или <literal>false</literal> в случае
   возникновения ошибки.
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
