<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 93d68fe8a9d78cd00c1e2032b48c93ec6a6ea855 Maintainer: sergey Status: ready -->
<!-- Reviewed: no -->

<book xml:id="book.pht" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>pht</title>

 <preface xml:id="intro.pht">
  &reftitle.intro;
  <para>
   pht - это новый модуль потоков для PHP. Он позволяет объединять классы, функции
   и даже целые файлы. В настоящее время pht можно использовать только с
   PHP 7.2. Это связано с тем, что режим ZTS небезопасен в PHP 7.0 и 7.1.
   Скоро появится поддержка PHP &gt;7.2.
  </para>
  <warning>
   <para>
    Модуль pht не следует использовать в среде веб-сервера. Распределение потоков
    следует ограничивать только приложениями на основе интерфейса командной строки.
   </para>
  </warning>
  <para>
   Подход к потоковой передаче, который использует pht, заключается в том, чтобы абстрагироваться
   от самого потока за выделенным объектом (<classname>pht\Thread</classname>). Затем задачи
   добавляются во внутреннюю очередь задач потока,
   где они обрабатываются при запуске потока (с помощью <methodname>pht\Thread::start</methodname>).
  </para>
  <para>
   Все задачи потока будут выполняться изолированно внутри только что созданного
   потока. Для задач класса это означает, что порождённые объекты не могут передаваться
   между потоками. Благодаря тому, что контексты потоковой обработки полностью
   отделены друг от друга, отпадает необходимость в сериализации свойств
   потоковых объектов (что является неизбежным злом, если такие объекты должны
   работать в нескольких потоках).
  </para>
  <para>
   Изоляция контекстов потоковой передачи делает передачу данных
   между ними несколько проблематичной. Для решения этой проблемы были реализованы потоковые
   структуры данных (<classname>pht\HashTable</classname>, <classname>pht\Vector</classname>,
   и <classname>pht\Queue</classname>), позволяющие двухсторонний стиль связи между потоками,
   при котором они выставляют блокировки мьютекса для контроля своей целостности. Эти структуры данных могут
   безопасно передаваться между потоками и управляться несколькими потоками, используя блокировки мьютекса,
   которые были упакованы вместе с ними. Они подсчитываются по ссылкам в потоках, поэтому их не нужно явно уничтожать.
   Такой подход к потоковой передаче означает, что между потоками необходимо
   безопасно передавать только заданные встроенные структуры данных.
  </para>
  <para>
   Атомарные значения также поддерживаются pht. В настоящее время существует
   только класс <classname>pht\AtomicInteger</classname>. Подобно многопоточным структурам данных,
   их тоже можно безопасно передавать между потоками.
  </para>
 </preface>

 &reference.pht.setup;
 &reference.pht.pht.thread;
 &reference.pht.pht.runnable;
 &reference.pht.pht.hashtable;
 &reference.pht.pht.vector;
 &reference.pht.pht.queue;
 &reference.pht.pht.atomicinteger;
 &reference.pht.pht.threaded;

</book>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
