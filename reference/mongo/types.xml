<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: e6ea4d8d68373d9428f12868d2a19ba46e45769f Maintainer: sergey Status: ready -->
<!-- Reviewed: no -->

<part xml:id="mongo.types" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">

 <title>Типы</title>

 <partintro>
  <section>
   <para>
    MongoDB позволяет программистам сохранять и запрашивать данные,
    выраженные во всех основных типах PHP, составных типах (массивы, ассоциативные массивы и объекты)
    и полдюжины классов, предоставляемых драйвером PHP MongoDB
    (для регулярных выражений, дат и другие специализированные приложения).
   </para>
  </section>

  <section>
   <title>Логиечские и &null;</title>
   <para>
    &true;, &false;, и &null; могут использоваться как есть.
   </para>
  </section>

  <section>
   <title>Числа</title>
   <para>
    Числа отличаются от строк в MongoDB: "123" не соответствует 123.
    Таким образом, если вы хотите убедиться, что числа отсортированы и сопоставлены правильно,
    вы должны убедиться, что они действительно сохраняются, как числа.
   </para>
   <programlisting role="php">
<![CDATA[
<?php

$doc = array("a" => 123, "b" => "123");
$collection->insert($doc);

$doc->find(array("a" => 123));   // совпадает
$doc->find(array("a" => "123")); // не совпадает
$doc->find(array("a" => 123.0)); // совпадает
$doc->find(array("b" => 123));   // не совпадает
$doc->find(array("b" => "123")); // совпадает

?>
]]>
   </programlisting>
   <para>
    Как отмечено выше, числа с плавающей точкой сравниваются
    с целыми числами или совпадают с ними, как и следовало ожидать.
   </para>
   <section>
    <title>Большие числа</title>
    <para>
     По умолчанию, в 32-разрядной системе числа отправляются в базу данных,
     как 32-разрядные целые числа. В 64-битной системе они отправляются,
     как 64-битные целые числа. Для обратной совместимости все системы
     десериализуют 64-битные целые числа, как числа с плавающей точкой.
     Числа с плавающей точкой не являются точными.
     Если вам нужны точные значения, вы должны
     изменить <link linkend="mongo.configuration">настройки php.ini</link>.
    </para>
    <para>
     В 32-битной системе, если установлен <literal>mongo.long_as_object</literal>,
     64-битные целые числа будут возвращены, как объекты <classname>MongoInt64</classname>.
     Целое число будет сохранено в поле значения с идеальной точностью (в виде строки).
     Вы также можете использовать <classname>MongoInt64</classname> для сохранения
     64-разрядных целых чисел на 32-разрядных компьютерах.
    </para>
    <para>
     В 64-битных системах вы можете установить <literal>mongo.long_as_object</literal>
     или <literal>mongo.native_long</literal>. <literal>mongo.native_long</literal> вернёт
     64-битные целые и "нормальные" целые числа PHP.
     Вы можете использовать <classname>MongoInt32</classname> для сохранения 32-разрядных
     целых чисел на 64-разрядных компьютерах.
    </para>
    <para>
     Вам следует установить поведение <literal>mongo.long_as_object</literal> и
     <literal>mongo.native_long</literal>, которое вы планируете использовать,
     даже если это поведение по умолчанию (для защиты от будущих изменений по умолчанию).
    </para>
    <para>
     Смотрите также: <link linkend="mongo.configuration">параметры php.ini</link>,
     <classname>MongoInt32</classname>, <classname>MongoInt64</classname>.
    </para>
   </section>
  </section>

  <section>
   <title>Строки</title>
   <para>
    Строки должны быть UTF-8.
    Строки не-UTF-8 должны быть либо преобразованы в UTF-8 перед отправкой в базу данных,
    либо сохранены, как двоичные данные.
   </para>
   <para>
    Регулярные выражения могут использоваться для сопоставления строк
    и выражаются с использованием класса <classname>MongoRegex</classname>.
   </para>
  </section>

  <section>
   <title>Двоичные данные</title>
   <para>
    Строки, изображения и любые другие двоичные данные не в формате UTF-8
    следует отправлять в базу данных с использованием типа <classname>MongoBinData</classname>.
   </para>
  </section>

  <section>
   <title>Даты</title>
   <para>
    Даты могут быть созданы с помощью класса <classname>MongoDate</classname>.
    Они хранятся в миллисекундах с начала Unix-эпохи.
   </para>
   <para>
    <classname>MongoTimestamp</classname> не предназначен для сохранения дат или временных меток,
    он используется внутри MongoDB. Если вы не создаёте инструмент,
    взаимодействующий с внутренними компонентами репликации или шардинга,
    вы должны использовать <classname>MongoDate</classname>, <emphasis>а не</emphasis>
    <classname>MongoTimestamp</classname>.
   </para>
  </section>

  <section>
   <title>Уникальные идентификаторы</title>
   <para>
    Драйвер автоматически создаст поле <literal>_id</literal> перед вставкой
    документа (если он не указан пользователем).
    Это поле является экземпляром <classname>MongoId</classname> (в большинстве других языков
    называется "ObjectId").
   </para>
   <para>
    Эти идентификаторы имеют длину 12 байтов и состоят из:
    <itemizedlist>
     <listitem>
      <para>4 байта метки времени</para>
      <para>
       Никакие две записи не могут иметь одинаковый идентификатор, если они были вставлены в разное время.
      </para>
     </listitem>
     <listitem>
      <para>3-х байтовый идентификатор машины</para>
      <para>
       Никакие две записи не могут иметь одинаковый идентификатор,
       если они были вставлены на разных компьютерах.
      </para>
     </listitem>
     <listitem>
      <para>2-х байтовый идентификатор потока</para>
      <para>
       Никакие две записи не могут иметь одинаковый идентификатор,
       если они были вставлены разными потоками, работающими на одной машине.
      </para>
     </listitem>
     <listitem>
      <para>3 байта значения приращения</para>
      <para>
       Каждый раз, когда создаётся идентификатор,
       глобальный счётчик увеличивается и используется
       в качестве значения приращения следующего идентификатора.
      </para>
     </listitem>
    </itemizedlist>
    Таким образом, никакие две записи не могут иметь одинаковый идентификатор,
    если только одному процессу на одном компьютере не удалось вставить 256^3 (более 16 миллионов)
    документов за одну секунду, переполнив поле приращения.
   </para>
  </section>

  <section>
   <title>JavaScript</title>
   <para>
    MongoDB поставляется с механизмом JavaScript,
    так что вы можете встраивать JavaScript в запросы (используя предложение $where),
    отправлять его непосредственно в базу данных для выполнения и использовать для выполнения агрегации.
   </para>
   <para>
    В целях безопасности используйте поле <literal>scope</literal> <classname>MongoCode</classname>,
    чтобы использовать переменные PHP в JavaScript.
    Код, который не требует внешних значений, может использовать <classname>MongoCode</classname> или просто быть строкой.
    Смотрите <link linkend="mongo.security">раздел о безопасности</link> для получения дополнительной
    информации об отправке JavaScript в базу данных.
   </para>
  </section>

  <section>
   <title>Массивы и Объекты</title>

   <para>
    Массивы и объекты также могут быть сохранены в базе данных.
    Массив с восходящими числовыми ключами будет сохранён, как массив,
    все остальное – как объект.
   </para>

   <programlisting role="php">
<![CDATA[
<?php

// $scores будет сохранён, как массив
$scores = array(98, 100, 73, 85);
$collection->insert(array("scores" => $scores));

// $scores будет сохранён, как объект
$scores = array("quiz1" => 98, "midterm" => 100, "quiz2" => 73, "final" => 85);
$collection->insert(array("scores" => $scores));

?>
]]>
   </programlisting>

   <para>
    Если вы запросите эти объекты с помощью оболочки базы данных, они будут выглядеть так:
    <programlisting role="shell">
<![CDATA[
> db.students.find()
{ "_id" : ObjectId("4b06beada9ad6390dab17c43"), "scores" : [ 98, 100, 73, 85 ] }
{ "_id" : ObjectId("4b06bebea9ad6390dab17c44"), "scores" : { "quiz1" : 98, "midterm" : 100, "quiz2" : 73, "final" : 85 } }
]]>
    </programlisting>
   </para>

   <para>
    База данных также может сохранять произвольные объекты PHP
    (хотя они будут возвращаться в виде ассоциативных массивов).
    Поля используются для пар ключ/значение. Например, сообщение в блоге может выглядеть так:
    <programlisting role="php">
<![CDATA[
<?php

  // класс сообщения в блоге
  class Post {

  var $author;
  var $content;
  var $comments = array();
  var $date;

  public function __construct($author, $content) {
  $this->author = $author;
$this->content = $content;
    $this->date = new MongoDate();
  }

  public function setTitle($title) {
    $this->title = $title;
  }
}

// создаём простую запись в блоге и вставляем её в базу данных
$post1 = new Post("Adam", "This is a blog post");

$blog->insert($post1);


// нет ничего ограничивающего тип поля "автор",
// поэтому мы можем сделать его вложенным объектом
$author = array("name" => "Fred", "karma" => 42);
$post2 = new Post($author, "This is another blog post.");

// мы создаём дополнительное поле, устанавливая заголовок
$post2->setTitle("Second Post");

$blog->insert($post2);

?>
]]>
    </programlisting>
   </para>

   <para>
    Из оболочки базы данных это будет выглядеть примерно так:
    <programlisting role="shell">
<![CDATA[
> db.blog.find()
{ "_id" : ObjectId("4b06c263edb87a281e09dad8"), "author" : "Adam", "content" : "This is a blog post", "comments" : [ ], "date" : "Fri Nov 20 2009 11:22:59 GMT-0500 (EST)" }
{ "_id" : ObjectId("4b06c282edb87a281e09dad9"), "author" : { "name" : "Fred", "karma" : 42 }, "content" : "This is a blog post", "comments" : [ ], "date" : "Fri Nov 20 2009 11:23:30 GMT-0500 (EST)", "title" : "Second Post" }
]]>
    </programlisting>
   </para>

   <para>
    Драйвер не будет обнаруживать эталонные циклы в массивах и объектах.
    Например, это выдаст фатальную ошибку:
    <programlisting role="php">
<![CDATA[
<?php

$collection->insert($GLOBALS);

?>
]]>
    </programlisting>
    <programlisting role="txt">
<![CDATA[
Fatal error: Nesting level too deep - recursive dependency?
]]>
    </programlisting>
    Если вам нужно вставить документы, которые могут иметь рекурсивную зависимость,
    вы должны проверить их самостоятельно, прежде чем передавать их драйверу.
   </para>
  </section>
 </partintro>
 &reference.mongo.mongoid;
 &reference.mongo.mongocode;
 &reference.mongo.mongodate;
 &reference.mongo.mongoregex;
 &reference.mongo.mongobindata;
 &reference.mongo.mongoint32;
 &reference.mongo.mongoint64;
 &reference.mongo.mongodbref;
 &reference.mongo.mongominkey;
 &reference.mongo.mongomaxkey;
 &reference.mongo.mongotimestamp;

</part>
