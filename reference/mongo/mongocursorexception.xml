<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 565e478d69a9d0c217eda773c77ca823423adf21 Maintainer: lex Status: ready -->
<!-- Reviewed: yes Maintainer: lex -->

<phpdoc:classref xml:id="class.mongocursorexception" xmlns:phpdoc="http://php.net/ns/phpdoc" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude">

 <title>Класс MongoCursorException</title>
 <titleabbrev>MongoCursorException</titleabbrev>

 <partintro>

  <!-- {{{ MongoCursorException intro -->
  <section xml:id="mongocursorexception.intro">
   &reftitle.intro;
   <para>
    Вызывается, при неправильном доступе к курсору или ошибкой, при получении ответа.
    Обратите внимание, что это может быть вызвано любым запросом к базе данных, который получает ответ, а не только запросами.
    Запись, команды и любые другие операции, которые отправляют информацию в базу данных и ожидают ответа, могут
    вызвать исключение <classname>MongoCursorException</classname>.
    Единственное исключение - это новый <literal>new MongoClient()</literal> (создающий новое соединение),
    который будет генерировать только исключения <classname>MongoConnectionException</classname>.

   </para>

   <para>
    Возвращает конкретное сообщение об ошибке,
    чтобы помочь диагностировать проблему и числовой код ошибки, связанный с причиной исключения.
   </para>

   <para>
    Например, предположим, что вы пытались вставить два документа с одинаковым _id:
    <programlisting role="php">
<![CDATA[
<?php

try {
    $collection->insert(array("_id" => 1), array("w" => 1));
    $collection->insert(array("_id" => 1), array("w" => 1));
}
catch (MongoCursorException $e) {
    echo "error message: ".$e->getMessage()."\n";
    echo "error code: ".$e->getCode()."\n";
}

?>
]]>
    </programlisting>
    Будет выведено следующее:
    <programlisting role="txt">
<![CDATA[
error message: E11000 duplicate key error index: foo.bar.$_id_  dup key: { : 1 }
error code: 11000
]]>
    </programlisting>
    Обратите внимание, что код ошибки MongoDB (11000) используется для кода ошибки PHP.
    Драйвер PHP использует "родной" код ошибки везде, где это возможно.
   </para>

   <para>
    Ниже приведён список распространённых ошибок, кодов и причин.
    Точные ошибки выделены курсивом, ошибки, в которых сообщение может отличаться, описаны в косых чертах.
   </para>

   <itemizedlist>
    <listitem>
     <para>
      <literal>cannot modify cursor after beginning iteration</literal>
     </para>
     <para>
      Code: 0
     </para>
     <para>
      Ошибка возникает, когда вы вызываете метод, который устанавливает запрос после его выполнения.
      Сбросьте курсор и попробуйте снова.
     </para>
     <para>
      Например:
      <programlisting role="php">
<![CDATA[
<?php

try {
    $cursor = $collection->find();
    var_dump($cursor->getNext());

    // getNext() запросил базу данных, слишком поздно для установки лимита
    $cursor->limit(1);
}
catch (MongoCursorException $e) {
    echo "Сообщение об ошибке: ".$e->getMessage()."\n";
    echo "Код ошибки: ".$e->getCode()."\n";
}

// это будет работать, хотя:
$cursor->getNext();
$cursor->reset();
$cursor->limit(1);

?>
]]>
      </programlisting>
     </para>
    </listitem>

    <listitem>
     <para>
      Get next batch send errors
     </para>
     <para>
      Code: 1
     </para>
     <para>
      Ошибка возникает, когда не удалось отправить запрос в базу данных.
      Убедитесь, что база данных всё ещё работает и сеть в порядке.
     </para>
    </listitem>

    <listitem>
     <para>
      <literal>cursor not found</literal>
     </para>
     <para>
      Code: 2
     </para>
     <para>
      Ошибка возникает, когда драйвер пытался получить больше результатов из базы данных,
      но в базе данных не было записи запроса.
      Обычно это означает, что время ожидания курсора на стороне сервера истекло:
      после нескольких минут бездействия база данных уничтожит курсор
      (смотрите <function>MongoCursor::immortal</function> для получения информации для предотвращения этого).
     </para>
     <para>
      Например:
      <programlisting role="php">
<![CDATA[
<?php

try {
    $cursor = $collection->find();
    $cursor->getNext();

    // Ждём 15 минут
    sleep(60*15);

    while ($cursor->hasNext()) {
        $cursor->getNext();
    }
}
catch (MongoCursorException $e) {
    echo "Сообщение об ошибке: ".$e->getMessage()."\n";
    echo "Код ошибки: ".$e->getCode()."\n";
}

?>
]]>
      </programlisting>
     </para>
    </listitem>

    <listitem>
     <para>
      <literal>cursor->buf.pos is null</literal>
     </para>
     <para>
      Code: 3
     </para>
     <para>
      Ошибка возникает, если у вас недостаточно ОЗУ или другое необычное обстоятельство.
     </para>
    </listitem>

    <listitem>
     <para>
      <literal>couldn't get response header</literal>
     </para>
     <para>
      Code: 4
     </para>
     <para>
      Распространённая ошибка, если база данных или сеть выходит из строя.
      Это означает, что драйвер не смог получить ответ от соединения.
     </para>
    </listitem>

    <listitem>
     <para>
      <literal>no db response</literal>
     </para>
     <para>
      Code: 5
     </para>
     <para>
      Это может даже не быть ошибкой, например, команда базы данных "shutdown" не возвращает ответа.
      Однако, если вы ожидали ответа, это означает, что база данных его не дала.
     </para>
    </listitem>

    <listitem>
     <para>
      <literal>bad response length: %d, did the db assert?</literal>
     </para>
     <para>
      Code: 6
     </para>
     <para>
      Ошибка возникает, если ответ базы данных был меньше 0.
      Это, вероятно, указывает на сетевую ошибку или повреждение базы данных.
     </para>
    </listitem>

    <listitem>
     <para>
      <literal>incomplete header</literal>
     </para>
     <para>
      Code: 7
     </para>
     <para>
      Весьма необычно. Происходит, если ответ базы данных начался правильно, но оборвался посередине.
      Вероятно, указывает на проблему с сетью.
     </para>
    </listitem>

    <listitem>
     <para>
      <literal>incomplete response</literal>
     </para>
     <para>
      Code: 8
     </para>
     <para>
      Highly unusual.  Occurs if the database response started out correctly,
      but broke off in the middle.  Probably indicates a network problem.
     </para>
    </listitem>

    <listitem>
     <para>
      <literal>couldn't find a response</literal>
     </para>
     <para>
      Code: 9
     </para>
     <para>
      Ошибка возникает, если ответ был кеширован и теперь не может быть найден.
     </para>
    </listitem>

    <listitem>
     <para>
      <literal>error getting socket</literal>
     </para>
     <para>
      Code: 10
     </para>
     <para>
      Ошибка возникает, если сокет был закрыт или обнаружена ошибка.
      Драйвер должен автоматически переподключиться (если это возможно) при следующей операции.
     </para>
    </listitem>

    <listitem>
     <para>
      <literal>couldn't find reply, please try again</literal>
     </para>
     <para>
      Code: 11
     </para>
     <para>
      Драйвер сохраняет любые ответы в базе данных, которые он не может немедленно сопоставить с запросом.
      Исключение возникает, если драйвер уже передал ответ на ваш запрос и не может найти ваш ответ в своём кеше.
     </para>
    </listitem>

    <listitem>
     <para>
      <literal>error getting database response: errstr</literal>
     </para>
     <para>
      <literal>WSA error getting database response: errstr</literal>
     </para>
     <para>
      "errstr" - это ошибка io, сообщаемая непосредственно из подсистемы сокета C.
      В Windows сообщение об ошибке имеет префикс "WSA".
     </para>
    </listitem>

    <listitem>
     <para>
      <literal>Timeout error</literal>
     </para>
     <para>
      Code: 13
     </para>
     <para>
      Ошибка возникает, если при ожидании завершения запроса произошла ошибка.
     </para>
    </listitem>

    <listitem>
     <para>
      <literal>couldn't send query: &lt;various&gt;</literal>
     </para>
     <para>
      Code: 14
     </para>
     <para>
      Ошибка сокета C при отправке.
     </para>
    </listitem>

    <listitem>
     <para>
      <literal>max number of retries exhausted, couldn't send query</literal>
     </para>
     <para>
      Code: 19
     </para>
     <para>
      Драйвер автоматически повторяет "простые" запросы (не команды),
      если первая попытка не удалась по определённым причинам.
      Это должно вызывать меньшее количество исключений
      во время аварийного переключения набора реплик (хотя вам, вероятно, всё ещё придётся
      иметь дело с некоторыми из них) и устранять временные проблемы в сети.
     </para>
     <para>
      Также может быть вызвано тем, что драйвер вообще
      не может повторно подключиться к базе данных (если, например, база данных недоступна).
     </para>
     <para>
      Версия 1.2.2+.
     </para>
    </listitem>
   </itemizedlist>
  </section>


  <section>
   <title>Ошибки, прошедшие через базу данных</title>
   <para>
    Ошибки базы данных всегда должны вызывать
    исключения <classname>MongoCursorExceptions</classname> для запросов.
    Сообщения об ошибках и коды отправляются непосредственно из базы данных,
    и вы должны увидеть соответствующие ошибки в журнале базы данных.
   </para>

   <para>
    Некоторые ошибки базы данных перечислены ниже:
   </para>

   <itemizedlist>
    <listitem>
     <para>
      <literal>E11000 duplicate key error index: foo.bar.$X  dup key: { /* ... */ }</literal>
     </para>
     <para>
      Code: 11000
     </para>
     <para>
      Ошибка базы данных для дубликатов ключей.
     </para>
    </listitem>

    <listitem>
     <para>
      <literal>not master</literal>
     </para>
     <para>
      Codes: 10107, 13435, and 10058
     </para>
     <para>
      Не основные ошибки, проходящие через базу данных.
      Каждый из них приведёт к отключению драйвера и попытке найти новый основной сервер.
      Фактическая ошибка, которую вы получаете при отработке отказа,
      может не быть ошибкой "not master", в зависимости от того, когда происходит изменение на основном сервере.
     </para>
    </listitem>
   </itemizedlist>

  </section>
  <!-- }}} -->

  <section xml:id="mongocursorexception.synopsis">
   &reftitle.classsynopsis;

   <!-- {{{ Synopsis -->
   <classsynopsis>
    <ooclass><classname>MongoCursorException</classname></ooclass>

    <!-- {{{ Class synopsis -->
    <classsynopsisinfo>
     <ooclass>
      <classname>MongoCursorException</classname>
     </ooclass>
     <ooclass>
      <modifier>extends</modifier>
      <classname>MongoException</classname>
     </ooclass>
    </classsynopsisinfo>
    <!-- }}} -->

   </classsynopsis>
   <!-- }}} -->

  </section>

 </partintro>

 &reference.mongo.entities.mongocursorexception;

</phpdoc:classref>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
