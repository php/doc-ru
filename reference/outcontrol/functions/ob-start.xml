<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 9e0a39029d6e66cd5f7c7e8cfecf76fdb8ad7f49 Maintainer: mch Status: ready -->
<!-- Reviewed: no -->
<refentry xml:id="function.ob-start" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>ob_start</refname>
  <refpurpose>Включает буферизацию вывода</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>bool</type><methodname>ob_start</methodname>
   <methodparam choice="opt"><type>callable</type><parameter>callback</parameter><initializer>&null;</initializer></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>chunk_size</parameter><initializer>0</initializer></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>flags</parameter><initializer><constant>PHP_OUTPUT_HANDLER_STDFLAGS</constant></initializer></methodparam>
  </methodsynopsis>
  <para>
   Эта функция включает буферизацию вывода. Если буферизация вывода активна,
   никакой вывод скрипта не отправляется (кроме заголовков), а сохраняется во
   внутреннем буфере.
  </para>
  <para>
   Содержимое этого внутреннего буфера может быть скопировано в строковую
   переменную функцией <function>ob_get_contents</function>. Для вывода
   содержимого внутреннего буфера вызывают функцию <function>ob_end_flush</function>.
   Альтернативный способ очистить содержимое буфера —
   вызов функции <function>ob_end_clean</function>.
  </para>
  <warning>
   <para>
    Веб-серверы (например, Apache) могут изменить рабочую директорию
    при вызове callback-функции. Её можно изменить обратно,
    например, вызвав в callback-функции
    <literal>chdir(dirname($_SERVER['SCRIPT_FILENAME']))</literal>.
   </para>
  </warning>
  <para>
   Буферы вывода помещаются в стек, то есть разрешён вызов
   функции <function>ob_start</function> пока активна другая
   функция <function>ob_start</function>. Просто нужно убедиться, что
   функция <function>ob_end_flush</function> вызвана столько же раз.
   Если активны несколько выходных callback-функций,
   вывод последовательно фильтруется
   для каждой из них в порядке вложения.
  </para>
  <para>
   Если буферизация вывода всё ещё активна, когда скрипт завершает работу,
   PHP автоматически выводит содержимое.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>callback</parameter></term>
     <listitem>
      <para>
       Можно задать необязательный параметр <parameter>callback</parameter>.
       Эта функция принимает в качестве параметра строку и вернуть также должна строку.
       Функция будет вызвана при сбросе (отправке) или очистке буфера (функциями
       <function>ob_flush</function>, <function>ob_clean</function> или похожими)
       или если буфер вывода сбрасывается в браузер по окончании запроса.
       При вызове переданной в параметр <parameter>callback</parameter> функции, она получает
       содержимое выходного буфера в качестве параметра и ожидается,
       что в качестве результата она вернёт обновлённый буфер вывода,
       который будет отправлен браузеру.
       Если <parameter>callback</parameter> окажется недопустимой функцией, то
       эта функция вернёт &false;.
       Описание функции для этого параметра:
      </para>
      <para>
       <methodsynopsis>
        <type>string</type><methodname><replaceable>handler</replaceable></methodname>
        <methodparam><type>string</type><parameter>buffer</parameter></methodparam>
        <methodparam choice="opt"><type>int</type><parameter>phase</parameter></methodparam>
       </methodsynopsis>
       <variablelist>
        <varlistentry>
         <term><parameter>buffer</parameter></term>
         <listitem>
          <simpara>
           Содержимое буфера вывода.
          </simpara>
         </listitem>
        </varlistentry>
        <varlistentry>
         <term><parameter>phase</parameter></term>
         <listitem>
          <simpara>
           Битовая маска констант <link linkend="outcontrol.constants"><constant>PHP_OUTPUT_HANDLER_*</constant></link>.
          </simpara>
         </listitem>
        </varlistentry>
       </variablelist>
      </para>
      <para>
       Если параметр <parameter>callback</parameter> вернёт &false;, то
       оригинальная информация отправится в браузер без изменений.
      </para>
      <para>
       Параметр <parameter>callback</parameter> можно обойти,
       передав значение &null;.
      </para>
      <para>
       Функции <function>ob_end_clean</function>, <function>ob_end_flush</function>,
       <function>ob_clean</function>, <function>ob_flush</function>
       и <function>ob_start</function> не могут быть вызваны из callback-функций,
       потому что их поведение непредсказуемо.
       Если нужно удалить содержимое буфера,
       то из callback-функции возвращают "" (пустую строку).
       Нельзя вызывать из callback-функции функции буферизации вывода, например:
       <literal>print_r($expression, true)</literal> или
       <literal>highlight_file($filename, true)</literal>.
      </para>
      <note>
       <para>
        Функция <function>ob_gzhandler</function> была введена,
        чтобы упростить отправку gz-кодированных данных браузерам,
        поддерживающим сжатые веб-страницы. Функция <function>ob_gzhandler</function>
        определяет тип кодировки содержимого, принимаемой браузером,
        и возвращает совместимый вывод.
       </para>
      </note>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>chunk_size</parameter></term>
     <listitem>
      <para>
       Если передан необязательный параметр <parameter>chunk_size</parameter>,
       то буфер буден сброшен после любого вывода, превышающего или равного
       по размеру <parameter>chunk_size</parameter>. Значение
       по умолчанию <literal>0</literal> означает, что функция вывода будет
       вызвана, когда буфер будет закрыт.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>flags</parameter></term>
     <listitem>
      <para>
       Параметр <parameter>flags</parameter> — это битовая маска, которая
       управляет операциями, которые можно выполнять с буфером вывода.
       По умолчанию она разрешает буферу вывода быть очищенным, сброшенным и удалённым, что
       равносильно значению
       <constant>PHP_OUTPUT_HANDLER_CLEANABLE</constant> |
       <constant>PHP_OUTPUT_HANDLER_FLUSHABLE</constant> |
       <constant>PHP_OUTPUT_HANDLER_REMOVABLE</constant> или
       сокращению этой комбинации <constant>PHP_OUTPUT_HANDLER_STDFLAGS</constant>.
      </para>
      <para>
       Каждый флаг управляет доступом к набору функций, как описано ниже:
       <informaltable>
        <tgroup cols="2">
         <thead>
          <row>
           <entry>Константа</entry>
           <entry>Функции</entry>
          </row>
         </thead>
         <tbody>
          <row>
           <entry><constant>PHP_OUTPUT_HANDLER_CLEANABLE</constant></entry>
           <entry>
            Функции <function>ob_clean</function>,
            <function>ob_end_clean</function> и
            <function>ob_get_clean</function>.
           </entry>
          </row>
          <row>
           <entry><constant>PHP_OUTPUT_HANDLER_FLUSHABLE</constant></entry>
           <entry>
            Функции <function>ob_end_flush</function>,
            <function>ob_flush</function> и
            <function>ob_get_flush</function>.
           </entry>
          </row>
          <row>
           <entry><constant>PHP_OUTPUT_HANDLER_REMOVABLE</constant></entry>
           <entry>
            Функции <function>ob_end_clean</function>,
            <function>ob_end_flush</function> и
            <function>ob_get_flush</function>.
           </entry>
          </row>
         </tbody>
        </tgroup>
       </informaltable>
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.success;
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Пример callback-функции, определённой пользователем</title>
    <programlisting role="php">
<![CDATA[
<?php

function callback($buffer)
{
  // заменить все яблоки апельсинами
  return (str_replace("яблоки", "апельсины", $buffer));
}

ob_start("callback");

?>
<html>
<body>
<p>Это всё равно что сравнить яблоки и апельсины.</p>
</body>
</html>
<?php

ob_end_flush();

?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
<html>
<body>
<p>Это всё равно что сравнить апельсины и апельсины.</p>
</body>
</html>
]]>
    </screen>
   </example>
  </para>

  <para>
   <example xml:id="function.ob-start.flags-bc">
    <title>Создание нестираемого буфера вывода</title>
    <programlisting role="php">
<![CDATA[
<?php

ob_start(null, 0, PHP_OUTPUT_HANDLER_STDFLAGS ^ PHP_OUTPUT_HANDLER_REMOVABLE);

?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>ob_get_contents</function></member>
    <member><function>ob_end_clean</function></member>
    <member><function>ob_end_flush</function></member>
    <member><function>ob_implicit_flush</function></member>
    <member><function>ob_gzhandler</function></member>
    <member><function>ob_iconv_handler</function></member>
    <member><function>mb_output_handler</function></member>
    <member><function>ob_tidyhandler</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
