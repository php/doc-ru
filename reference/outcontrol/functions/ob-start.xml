<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 6554e7e19770ac53e886b8194915d7cd09ff0bc7 Maintainer: mch Status: ready -->
<!-- Reviewed: yes Maintainer: lex -->
<!-- $Revision$ -->
<refentry xml:id="function.ob-start" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>ob_start</refname>
  <refpurpose>Включение буферизации вывода</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>bool</type><methodname>ob_start</methodname>
   <methodparam choice="opt"><type>callable</type><parameter>callback</parameter><initializer>&null;</initializer></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>chunk_size</parameter><initializer>0</initializer></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>flags</parameter><initializer><constant>PHP_OUTPUT_HANDLER_STDFLAGS</constant></initializer></methodparam>
  </methodsynopsis>
  <para>
   Эта функция включает буферизацию вывода. Если буферизация вывода активна,
   никакой вывод скрипта не отправляется (кроме заголовков), а сохраняется во
   внутреннем буфере.
  </para>
  <para>
   Содержимое этого внутреннего буфера может быть скопировано в строковую
   переменную, используя <function>ob_get_contents</function>. Для вывода
   содержимого внутреннего буфера следует использовать <function>ob_end_flush</function>.
   В качестве альтернативы можно использовать <function>ob_end_clean</function>
   для очистки содержимого буфера.
  </para>
  <warning>
   <para>
    Некоторые веб-серверы (например, Apache) изменяют рабочую директорию скрипта
    при вызове callback-функции. Вы можете вернуть её назад, используя
    <literal>chdir(dirname($_SERVER['SCRIPT_FILENAME']))</literal>
    в callback-функции.
   </para>
  </warning>
  <para>
   Буферы вывода помещаются в стек, то есть допускается вызов
   <function>ob_start</function> после вызова другой активной
   <function>ob_start</function>. При этом необходимо вызывать
   <function>ob_end_flush</function> соответствующее количество раз.
   Если активны несколько callback-функций,
   вывод последовательно фильтруется для
   каждой из них в порядке вложения.
  </para>
  <para>
   Если буферизация вывода всё ещё активна, когда скрипт завершает работу,
   PHP автоматически выводит содержимое.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>callback</parameter></term>
     <listitem>
      <para>
       Можно задать необязательный параметр <parameter>callback</parameter>.
       Эта функция принимает строку в виде аргумента и должна также вернуть строку.
       Она вызывается при сбросе (отправке) или очистке (с помощью
       <function>ob_flush</function>, <function>ob_clean</function> или подобных функций)
       или если буфер вывода сбрасывается в браузер по окончанию запроса.
       При вызове функции <parameter>callback</parameter>, она получает
       содержимое буфера и, как ожидается, должна вернуть обновлённое содержимое для буфера вывода,
       которое будет отправлено браузеру.
       Если <parameter>callback</parameter> не является допустимой функцией, то
       эта функция вернёт &false;.
       Описание функции для этого параметра:
      </para>
      <para>
       <methodsynopsis>
        <type>string</type><methodname><replaceable>handler</replaceable></methodname>
        <methodparam><type>string</type><parameter>buffer</parameter></methodparam>
        <methodparam choice="opt"><type>int</type><parameter>phase</parameter></methodparam>
       </methodsynopsis>
       <variablelist>
        <varlistentry>
         <term><parameter>buffer</parameter></term>
         <listitem>
          <simpara>
           Содержимое буфера вывода.
          </simpara>
         </listitem>
        </varlistentry>
        <varlistentry>
         <term><parameter>phase</parameter></term>
         <listitem>
          <simpara>
           Битовая маска констант <link linkend="outcontrol.constants"><constant>PHP_OUTPUT_HANDLER_*</constant></link>.
          </simpara>
         </listitem>
        </varlistentry>
       </variablelist>
      </para>
      <para>
       Если <parameter>callback</parameter> вернёт &false;, то
       оригинальная информация отправится в браузер без изменений.
      </para>
      <para>
       Параметр <parameter>callback</parameter> может быть игнорирован
       передачей значения &null;.
      </para>
      <para>
       <function>ob_end_clean</function>, <function>ob_end_flush</function>,
       <function>ob_clean</function>, <function>ob_flush</function> и
       <function>ob_start</function> не могут вызываться из callback-функций,
       так как их поведение непредсказуемо.
       Если вы хотите удалить содержимое буфера, то
       верните "" (пустую строку) из callback-функции.
       Вы также не можете использовать функции буферизации вывода, такие как
       <literal>print_r($expression, true)</literal> или
       <literal>highlight_file($filename, true)</literal>
       из callback-функции.
      </para>
      <note>
       <para>
        Функция <function>ob_gzhandler</function> была введена
        для облегчения отправки gz-кодированных данных браузерам,
        поддерживающим сжатые веб-страницы. <function>ob_gzhandler</function>
        определяет тип кодировки содержимого, принимаемый браузером,
        и возвращает вывод соответствующим образом.
       </para>
      </note>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>chunk_size</parameter></term>
     <listitem>
      <para>
       Если передан необязательный параметр <parameter>chunk_size</parameter>,
       то буфер буден сброшен после любого вывода, превышающего или равного
       по размеру <parameter>chunk_size</parameter>. Значение
       по умолчанию <literal>0</literal> означает, что функция вывода будет
       вызвана, когда буфер будет закрыт.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>flags</parameter></term>
     <listitem>
      <para>
       Параметр <parameter>flags</parameter> является битовой маской, которая
       управляет операциями, которые можно совершать над буфером вывода.
       По умолчанию она позволяет буферу вывода быть очищенным, сброшенным и удалённым, что
       равносильно значению
       <constant>PHP_OUTPUT_HANDLER_CLEANABLE</constant> |
       <constant>PHP_OUTPUT_HANDLER_FLUSHABLE</constant> |
       <constant>PHP_OUTPUT_HANDLER_REMOVABLE</constant> или
       <constant>PHP_OUTPUT_HANDLER_STDFLAGS</constant> как сокращение этой комбинации.
      </para>
      <para>
       Каждый флаг управляет доступом к набору функций, как описано ниже:
       <informaltable>
        <tgroup cols="2">
         <thead>
          <row>
           <entry>Константа</entry>
           <entry>Функции</entry>
          </row>
         </thead>
         <tbody>
          <row>
           <entry><constant>PHP_OUTPUT_HANDLER_CLEANABLE</constant></entry>
           <entry>
            <function>ob_clean</function>,
            <function>ob_end_clean</function> и
            <function>ob_get_clean</function>.
           </entry>
          </row>
          <row>
           <entry><constant>PHP_OUTPUT_HANDLER_FLUSHABLE</constant></entry>
           <entry>
            <function>ob_end_flush</function>,
            <function>ob_flush</function> и
            <function>ob_get_flush</function>.
           </entry>
          </row>
          <row>
           <entry><constant>PHP_OUTPUT_HANDLER_REMOVABLE</constant></entry>
           <entry>
            <function>ob_end_clean</function>,
            <function>ob_end_flush</function> и
            <function>ob_get_flush</function>.
           </entry>
          </row>
         </tbody>
        </tgroup>
       </informaltable>
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.success;
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Пример callback-функции, определённой пользователем</title>
    <programlisting role="php">
<![CDATA[
<?php

function callback($buffer)
{
  // заменить все яблоки апельсинами
  return (str_replace("яблоки", "апельсины", $buffer));
}

ob_start("callback");

?>
<html>
<body>
<p>Это всё равно что сравнить яблоки и апельсины.</p>
</body>
</html>
<?php

ob_end_flush();

?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
<html>
<body>
<p>Это всё равно что сравнить апельсины и апельсины.</p>
</body>
</html>
]]>
    </screen>
   </example>
  </para>

  <para>
   <example xml:id="function.ob-start.flags-bc">
    <title>Создание нестираемого буфера вывода</title>
    <programlisting role="php">
<![CDATA[
<?php

ob_start(null, 0, PHP_OUTPUT_HANDLER_STDFLAGS ^ PHP_OUTPUT_HANDLER_REMOVABLE);

?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>ob_get_contents</function></member>
    <member><function>ob_end_clean</function></member>
    <member><function>ob_end_flush</function></member>
    <member><function>ob_implicit_flush</function></member>
    <member><function>ob_gzhandler</function></member>
    <member><function>ob_iconv_handler</function></member>
    <member><function>mb_output_handler</function></member>
    <member><function>ob_tidyhandler</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
