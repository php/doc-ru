<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 0ec4999397fd6f7dd382120d620b72e48103a683 Maintainer: sergey Status: ready -->
<!-- Reviewed: no -->
<chapter xml:id="outcontrol.user-level-output-buffers" xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude">
 <section>
  <title>Пользовательские буферы вывода</title>
  <para>
   Пользовательские буферы вывода разрешено запускать, манипулировать ими
   и завершать из PHP-кода.
   Каждый из этих буферов состоит из буфера вывода
   и связанной с ним функции обработчика вывода.
  </para>
 </section>

 <section xml:id="outcontrol.what-output-is-buffered">
  <title>Какой вывод буферизуется?</title>
  <para>
   Пользовательские буферы вывода PHP после запуска полностью буферизуют вывод
   до тех пор, пока они не будут отключены или скрипт не завершит работу.
   Вывод в контексте пользовательского буфера вывода PHP —
   это всё, что PHP отобразил или отправил обратно в браузер.
   С практической точки зрения, вывод — это данные ненулевой длины, которые:
   <itemizedlist>
    <xi:include xpointer="xmlns(db=http://docbook.org/ns/docbook) xpointer(id('outputcontrol.what-is-output')/*)"><xi:fallback/></xi:include>
   </itemizedlist>
  </para>
  <note>
   <simpara>
    Данные, которые записываются сразу в поток вывода (<literal>stdout</literal>)
    или передаются в функцию SAPI с похожей функциональностью,
    не будут захвачены пользовательскими буферами вывода.
    В это включена
    запись данных в стандартный поток вывода (<literal>stdout</literal>) функцией <function>fwrite</function>
    или отправка заголовков функциями <function>header</function>
    или <function>setcookie</function>.
   </simpara>
  </note>
 </section>

 <section>
  <title>Включение буферизации вывода</title>
  <para>
   Буферизацию вывода включают вызовом функции
   <function>ob_start</function>
   или установкой в файле &php.ini; параметров директивам
   <link linkend="ini.output-buffering">output_buffering</link>
   и <link linkend="ini.output-handler">output_handler</link>.
   Хотя оба способа умеют создавать буферы вывода,
   функция <function>ob_start</function> гибче,
   поскольку принимает в качестве обработчиков вывода пользовательские функции
   и умеет задавать операции, разрешенные для буфера (сброс, очистка, удаление).
   Буферы, запущенные функцией <function>ob_start</function>, будут активны
   с той строки, с которой была вызвана функция,
   тогда как те, которые были запущены
   директивой <link linkend="ini.output-buffering">output_buffering</link>,
   будут буферизовать вывод начиная с первой строки скрипта.
  </para>
  <para>
   PHP также поставляется со встроенным обработчиком вывода <literal>«URL-Rewriter»</literal>,
   который запускает свой буфер вывода и разрешает
   запускать одновременно до двух его экземпляров
   (один для перезаписи URL-адресов на уровне пользователя
   и ещё один для поддержки прозрачного идентификатора сессии).
   Эти буферы запускают вызовом функции
   <function>output_add_rewrite_var</function>
   и (или) включением
   директивы <link linkend="ini.session.use-trans-sid">session.use_trans_sid</link>
   в файле &php.ini;.
  </para>
  <para>
   Во входящий в комплект модуль <literal>zlib</literal> интегрирован свой
   буфер вывода, который включают директивой
   <link linkend="ini.zlib.output-compression">zlib.output_compression</link>
   в файле &php.ini;.
  </para>
  <note>
   <simpara>
    Хотя обработчик <literal>«URL-Rewriter»</literal> и выделяется тем, что
    разрешает запускать одновременно только до двух своих экземпляров,
    пользовательские буферы вывода работают с теми же базовыми буферами,
    которые использует функция <function>ob_start</function>,
    а их функциональность реализована пользовательской функцией обработчика вывода.
    Поэтому их функциональность в состоянии сымитировать пользовательский код.
   </simpara>
  </note>
 </section>

 <section xml:id="outcontrol.nesting-output-buffers">
  <title>Вложенные буферы вывода</title>
  <para>
   Если при запуске нового буфера есть активный буфер вывода,
   новый буфер будет вложен внутрь предыдущего активного буфера.
   Внутренний буфер будет вести себя так же как и невложенный,
   но вывод, который он буферизовал, не будет буферизован внешним буфером.
   Вывод, сброшенный внутренним буфером, будет только буферизован внешним буфером.
  </para>
  <para>
   Большинство <literal>ob_<replaceable>*</replaceable></literal>-функций работает
   только с активным буфером вывода (который запущен последним),
   поэтому только активный буфер получится сбросить, очистить или отключить.
   К функциям, работающим с другими буферами, относятся —
   функция <function>ob_list_handlers</function>,
   которая возвращает список активных обработчиков вывода,
   и функция <function>ob_get_status</function>,
   которая умеет возвращать информацию только об активном буфере
   или обо всех буферах.
  </para>
  <para>
   Вызов функций <function>ob_get_level</function>
   или <function>ob_get_status</function> вернёт
   уровень вложенности активного буфера вывода.
  </para>
  <caution>
   <simpara>
    Функции <function>ob_get_level</function> и <function>ob_get_status</function>
    по-разному оценивают один и тот же уровень вложенности; значение отклонено на единицу.

    Для функции <function>ob_get_level</function>
    первый уровень — это <literal>1</literal>.
    Тогда как для функции <function>ob_get_status</function>
    первый уровень — это <literal>0</literal>.
   </simpara>
  </caution>
 </section>

 <section xml:id="outcontrol.buffer-size">
  <title>Размер буфера</title>
  <para>
   Размеры буфера выражаются целыми числами
   и представляют количество байтов, которые буфер в состоянии хранить без сброса.
   Когда размер вывода в буфере превышает размер буфера,
   содержимое буфера отправляется в обработчик вывода,
   возвращаемое обработчиком значение сбрасывается, а буфер очищается.
  </para>
  <para>
   За исключением обработчика перезаписи URL-адресов <literal>«URL-Rewriter»</literal>,
   размер буферов вывода, если нужно, устанавливают при запуске буфера.
   Если установлено значение <literal>0</literal>,
   буфер вывода будет ограничен только размеров доступной PHP памяти.
   Если установлено значение <literal>1</literal>,
   буфер будет сбрасываться после каждого блока кода, который даёт вывод ненулевой длины.
  </para>
  <para>
   Размер буферов вывода получают вызовом функции
   <function>ob_get_status</function>.
  </para>
  <para>
   Размер буферов вывода, запущенных функцией <function>ob_start</function>,
   будут равны целочисленному значению, переданному
   во второй параметр функции <parameter>chunk_size</parameter>.
   Если параметр не задан, будет установлено значение <literal>0</literal>.
  </para>
  <para>
   Размеру буфера вывода, запущенного
   директивой <link linkend="ini.output-buffering">output_buffering</link>
   со значением <literal>«On»</literal>, будет установлено значение 0.
   Если задано целое число, то размер буфера будет соответствовать этому числу.
  </para>
  <para>
   Размеру буфера Обработчик <literal>«URL-Rewriter»</literal> установлено значение <literal>0</literal>,
   поэтому он ограничен только размеров памяти, доступной PHP.
  </para>
  <para>
   Размером буфера вывода модуля <literal>zlib</literal> управляет
   директива <link linkend="ini.zlib.output-compression">zlib.output_compression</link>
   в файле &php.ini;.
   Если для директивы задано значение <literal>«On»</literal>, размер буфера
   будет равен <literal>«16K»</literal>, или <literal>16 384</literal> байтов.
   Если установлено целое число, то размер буфера будет соответствовать этому числу в байтах.
  </para>
 </section>

 <section xml:id="outcontrol.operations-on-buffers">
  <title>Операции, разрешённые для буферов</title>
  <para>
   Операциями, разрешенными для буферов, управляют, передавая
   <link linkend="outcontrol.constants.buffer-control-flags">флаги управления буфером</link>
   в третий параметр — <parameter>flags</parameter> — функции <function>ob_start</function>.
   Если параметр не задан, по умолчанию будут разрешены все операции.
   Если вместо этого задано значение <literal>0</literal>,
   буфер нельзя будет сбросить, очистить или удалить,
   но его содержимое по-прежнему будет доступно.
  </para>
  <para>
   Флаг <constant>PHP_OUTPUT_HANDLER_CLEANABLE</constant> разрешает
   функции <function>ob_clean</function> очищать содержимое буфера.
  </para>
  <warning>
   <simpara>
    Отсутствие флага <constant>PHP_OUTPUT_HANDLER_CLEANABLE</constant>
    не помешает функциям <function>ob_end_clean</function>
    или <function>ob_get_clean</function> очистить содержимое буфера.
   </simpara>
  </warning>
  <para>
   Флаг <constant>PHP_OUTPUT_HANDLER_FLUSHABLE</constant> разрешает
   функции <function>ob_flush</function> сбрасывать содержимого буфера.
  </para>
  <warning>
   <simpara>
    Отсутствие флага <constant>PHP_OUTPUT_HANDLER_FLUSHABLE</constant>
    не помешает функциям <function>ob_end_flush</function>
    или <function>ob_get_flush</function> сбросить содержимое буфера.
   </simpara>
  </warning>
  <para>
   Флаг <constant>PHP_OUTPUT_HANDLER_REMOVABLE</constant> разрешает
   функциям <function>ob_end_clean</function>, <function>ob_end_flush</function>,
   <function>ob_get_clean</function> или <function>ob_get_flush</function>
   отключать буфер.
  </para>
  <para>
   Флаг <constant>PHP_OUTPUT_HANDLER_STDFLAGS</constant> —
   это комбинация трёх флагов, которые разрешают каждую из трёх операций
   быть выполненной с буфером.
  </para>
 </section>

 <section>
  <title>Сброс, доступ и очистка содержимого буфера</title>
  <para>
   Сброс отправляет и удаляет содержимое активного буфера.
   Буферы вывода сбрасываются, когда размер вывода
   превышает размер буфера, скрипт завершает работу
   или вызываются функции <function>ob_flush</function>, <function>ob_end_flush</function>
   или <function>ob_get_flush</function>.
  </para>
  <caution>
   <simpara>
    Вызов функций <function>ob_end_flush</function>
    или <function>ob_get_flush</function> отключит активный буфер.
   </simpara>
  </caution>
  <caution>
   <simpara>
    Сброс буферов также сбросит возвращаемое обработчиком вывода значение,
    которое обработчик вывода умеет изменять,
    и если так, значение будет отличаться от содержимого буфера.
    Например, передача в обработчик вывода функции <function>ob_gzhandler</function> приведёт
    к сжатию данных вывода и сбросу сжатого вывода.
   </simpara>
  </caution>
  <para>
   Содержимое активного буфера получают вызовом
   функций <function>ob_get_contents</function>, <function>ob_get_clean</function>
   или <function>ob_get_flush</function>.
  </para>
  <para>
   Если нужен только размер содержимого буфера,
   функции <function>ob_get_length</function> или <function>ob_get_status</function>
   вернут размер содержимого в байтах.
  </para>
  <caution>
   <simpara>
    Вызов функций <function>ob_get_clean</function>
    или <function>ob_get_flush</function> отключит активный буфер
    после возврата его содержимого.
   </simpara>
  </caution>
  <para>
   Содержимое активного буфера очищают вызовом функций
   <function>ob_clean</function>, <function>ob_end_clean</function>
   или <function>ob_get_clean</function>.
  </para>
  <caution>
   <simpara>
    Вызов функций <function>ob_end_clean</function>
    или <function>ob_get_clean</function> отключит активный буфер вывода.
   </simpara>
  </caution>
 </section>

 <section>
  <title>Отключение буферов</title>
  <para>
   Буферы вывода отключают вызовом функций
   <function>ob_end_clean</function>, <function>ob_end_flush</function>,
   <function>ob_get_flush</function> или <function>ob_get_clean</function>.
  </para>
  <warning>
   <simpara>
    Буферы вывода, запущенные без флага
    <constant>PHP_OUTPUT_HANDLER_REMOVABLE</constant>,
    нельзя отключить, а попытка удалить такие буферы выдаст ошибку уровня <constant>E_NOTICE</constant>.
   </simpara>
  </warning>
  <para>
   Каждый буфер вывода, который не был закрыт до конца скрипта
   или при вызове конструкции <function>exit</function>, будет сброшен
   и отключён процессом завершения работы PHP.
   Буферы будут сброшены и отключены
   в порядке, обратном их запуску.
   Последний запущенный буфер будет первым,
   а первый запущенный буфер будет сброшен и отключён в последнюю очередь.
  </para>
  <caution>
   <simpara>
    Если сброс содержимого буферов не нужен,
    активируют пользовательский обработчик вывода,
    чтобы предотвратить сброс при завершении работы.
   </simpara>
  </caution>
 </section>

 <section xml:id="outcontrol.output-handlers">
  <title>Обработчики вывода</title>
  <para>
   Обработчики вывода — это <type>callable</type>-объекты, связанные с буферами вывода,
   которые запускаются вызовом функций <function>ob_clean</function>,
   <function>ob_flush</function>, <function>ob_end_flush</function>,
   <function>ob_get_flush</function>, <function>ob_end_clean</function>,
   <function>ob_get_clean</function> или в течение завершения работы PHP.
  </para>
  <note>
   <simpara>
    Процесс завершения работы сбросит возвращаемое значение обработчика.
   </simpara>
  </note>
  <para>
   Если при запуске буфера вывода обработчик не задан или значение равно &null;,
   будет активирован внутренний обработчик вывода <literal>«default output handler»</literal>,
   который при вызове возвращает неизменённое содержимое буфера.
   Обработчиками вывода пользуются для возврата измененной версии содержимого
   буфера и (или) или получения побочных эффектов (например, отправки заголовков).
  </para>
  <para>
   PHP поставляется с двумя внутренними обработчиками вывода:
   <literal>«default output handler»</literal>
   и <literal>«URL-Rewriter»</literal> (в который встроен
   свой буфер вывода и до двух экземпляров которого разрешено запускать).
  </para>
  <para>
   Входящие в комплект модули включают четыре дополнительных обработчика вывода:
   <function>mb_output_handler</function>, <function>ob_gzhandler</function>,
   <function>ob_iconv_handler</function>, <function>ob_tidyhandler</function>.
  </para>
 </section>

 <section xml:id="outcontrol.working-with-output-handlers">
  <title>Работа с обработчиками вывода</title>
  <para>
   При вызове обработчикам вывода передается содержимое буфера
   и битовая маска, указывающая состояние буферизации вывода.
  </para>
  <para>
   <methodsynopsis>
    <type>string</type>
    <methodname>
     <replaceable>handler</replaceable>
    </methodname>
    <methodparam>
     <type>string</type>
     <parameter>buffer</parameter>
    </methodparam>
    <methodparam choice="opt">
     <type>int</type>
     <parameter>phase</parameter>
    </methodparam>
   </methodsynopsis>
   <variablelist>
    <varlistentry>
     <term><parameter>buffer</parameter></term>
     <listitem>
      <simpara>
       Содержимое буфера вывода.
      </simpara>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>phase</parameter></term>
     <listitem>
      <simpara>
       Битовая маска
       <link linkend="constant.php-output-handler-start">
        <constant>PHP_OUTPUT_HANDLER_<replaceable>*</replaceable></constant>-констант
       </link>.
      </simpara>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
  <warning>
   <simpara>
    Вызов следующих функций из обработчика вывода приведёт к фатальной ошибке:
    <function>ob_clean</function>, <function>ob_end_clean</function>,
    <function>ob_end_flush</function>, <function>ob_flush</function>,
    <function>ob_get_clean</function>, <function>ob_get_flush</function>,
    <function>ob_start</function>.
   </simpara>
  </warning>
  <note>
   <simpara>
    Если установлен флаг статуса <constant>PHP_OUTPUT_HANDLER_DISABLED</constant> обработчика,
    обработчик не будет запущен вызовом функций
    <function>ob_end_clean</function>, <function>ob_end_flush</function>,
    <function>ob_get_clean</function>, <function>ob_get_flush</function>
    или в течение завершения работы PHP.
    Этот флаг не даёт эффекта при вызове функций <function>ob_clean</function>
    или <function>ob_flush</function>.
   </simpara>
  </note>
  <note>
   <simpara>
    Функция завершения работы на ряде веб-серверов
    умеет изменять рабочую директорию скрипта,
    например на сервере Apache или встроенном веб-сервере.
   </simpara>
  </note>
 </section>

 <section xml:id="outcontrol.flags-passed-to-output-handlers">
  <title>Флаги, передаваемые обработчикам вывода</title>
  <para>
   Битовая маска, переданная во второй параметр <parameter>phase</parameter>
   обработчика вывода даёт информацию о вызове обработчика.
  </para>
  <note>
   <simpara>
    В битовую маску разрешено включать больше одного флага,
    а для проверки того, установлен ли флаг,
    указывают побитовый оператор <literal>&amp;</literal>.
   </simpara>
  </note>
  <warning>
   <simpara>
    Значение флага <constant>PHP_OUTPUT_HANDLER_WRITE</constant> и его псевдонима
    <constant>PHP_OUTPUT_HANDLER_CONT</constant> равно <literal>0</literal>,
    поэтому установлено ли оно, определяют только операторами равенства
    <link linkend="language.operators.comparison">equality operator</link>
    (<literal>==</literal> или <literal>===</literal>).
   </simpara>
  </warning>
  <para>
   PHP устанавливает следующие флаги на конкретном этапе жизненного цикла обработчика:
   <constant>PHP_OUTPUT_HANDLER_START</constant> —
   при первом вызове обработчика.
   <constant>PHP_OUTPUT_HANDLER_FINAL</constant>
   или его псевдоним <constant>PHP_OUTPUT_HANDLER_END</constant> —
   при последнем вызове обработчика,
   т. е. он отключается. PHP также установит этот флаг,
   когда буферы выключаются процессом завершения работы PHP.
  </para>
  <para>
   Конкретный вызов обработчика устанавливает следующие флаги:
   <constant>PHP_OUTPUT_HANDLER_FLUSH</constant> —
   при запуске обработчика вызовом функции <function>ob_flush</function>.
   <constant>PHP_OUTPUT_HANDLER_WRITE</constant>
   или его псевдоним <constant>PHP_OUTPUT_HANDLER_CONT</constant> —
   когда размер его содержимого равен или превышает размер буфера,
   а обработчик вызван во время автоматической очистки буфера.
   <constant>PHP_OUTPUT_HANDLER_FLUSH</constant> —
   когда обработчик запущен вызовом функций <function>ob_clean</function>,
   <function>ob_end_clean</function> или <function>ob_get_clean</function>.
   При вызове функций <function>ob_end_clean</function> или <function>ob_get_clean</function>
   он также устанавливает флаг <constant>PHP_OUTPUT_HANDLER_FINAL</constant>.
  </para>
  <note>
   <simpara>
    При вызове функций <function>ob_end_flush</function> или <function>ob_get_flush</function>,
    флаг <constant>PHP_OUTPUT_HANDLER_FINAL</constant> будет установлен,
    а флаг <constant>PHP_OUTPUT_HANDLER_FLUSH</constant> — нет.
   </simpara>
  </note>
 </section>

 <section xml:id="outcontrol.output-handler-return-values">
  <title>Возвращаемые значения обработчика вывода</title>
  <para>
   Возвращаемое значение обработчика вывода внутренне преобразовываются в строку,
   следуя стандартной семантике PHP-типов, с двумя исключениями:
   массивы (<type>array</type>) и логические значения (<type>bool</type>).
  </para>
  <para>
   Массивы преобразовываются в строку <literal>«Array»</literal>,
   но предупреждение «<literal>Array to string conversion</literal>»
   не срабатывает.
  </para>
  <para>
   Если обработчик  возвращает значение &false;, возвращается содержимое буфера.
   Если обработчик возвращает &true;, возвращается пустая строка.
  </para>
  <note>
   <simpara>
    Если обработчик  возвращает значение &false; или выбрасывает исключение,
    PHP устанавливает для него флаг состояния <constant>PHP_OUTPUT_HANDLER_DISABLED</constant>.
   </simpara>
  </note>
 </section>

 <section>
  <title>Исключения в обработчиках вывода</title>
  <para>
   Если в обработчике вывода выбрасывается неперехваченное исключение,
   программа завершается, а процесс завершения работы вызывает обработчик,
   затем выводится сообщение об ошибке <literal>Uncaught Exception</literal>.
  </para>
  <para>
   Если в обработчике вывода, вызываемом функциями <function>ob_flush</function>,
   <function>ob_end_flush</function> или <function>ob_get_flush</function>,
   выбрасывается неперехваченное исключение,
   содержимое буфера сбрасывается перед сообщением об ошибке.
  </para>
  <para>
   Если в обработчике вывода неперехваченное исключение выбрасывается при выключении,
   обработчик завершается, не сбрасываются ни содержимое буфера,
   ни сообщение об ошибке.
  </para>
  <note>
   <simpara>
    Если обработчик вывода выбрасывает исключение,
    PHP устанавливает для него флаг состояния <constant>PHP_OUTPUT_HANDLER_DISABLED</constant>.
   </simpara>
  </note>
 </section>

 <section>
  <title>Ошибки в обработчиках вывода</title>
  <para>
   Если в обработчике вывода выдана неустранимая ошибка,
   программа продолжает выполняться.
  </para>
  <para>
   Если в обработчике, вызываемом функциями
   <function>ob_flush</function>, <function>ob_end_flush</function>
   или <function>ob_get_flush</function>,
   возникает неустранимая ошибка,
   буфер сбрасывает данные, которые вернул обработчик.
   Если обработчик возвращает значение &false;, сбрасываются буфер и сообщение об ошибке.
   Если возвращает другое значение, возвращаемое обработчиком значение сбрасывается,
   но не сообщение об ошибке.
  </para>
  <note>
   <simpara>
    Если обработчик  возвращает значение &false;
    PHP устанавливает для него флаг состояния <constant>PHP_OUTPUT_HANDLER_DISABLED</constant>.
   </simpara>
  </note>
  <para>
   Если в обработчике вывода возникает фатальная ошибка,
   программа завершается, а процесс завершения работы вызывает обработчик,
   затем сбрасывается сообщение об ошибке.
  </para>
  <para>
   Если в обработчике вывода, вызываемом функциями <function>ob_flush</function>,
   <function>ob_end_flush</function> или <function>ob_get_flush</function>,
   возникает фатальная ошибка возникает,
   содержимое буферов сбрасывается перед сообщением об ошибке.
  </para>
  <para>
   Если в обработчике вывода фатальная ошибка возникает при выключении,
   программа завершается без сброса буфера или сообщения об ошибке.
  </para>
 </section>

 <section>
  <title>Вывод обработчиков вывода</title>
  <para>
   При конкретных обстоятельствах выходные данные, созданные в обработчике,
   сбрасываются вместе с содержимым буфера. Этот вывод не добавляется
   в буфер и не становится строкой,
   возвращаемой функцией <function>ob_get_flush</function>.
  </para>
  <para>
   Если во время операций сброса (при вызове функций <function>ob_flush</function>,
   <function>ob_end_flush</function>, <function>ob_get_flush</function>
   и при завершении работы)
   возвращаемое значение обработчика равно &false;,
   содержимое буфера сбрасывается, а затем идёт вывод.
   Если обработчик не вызывается при завершении работы,
   то обработчик выбрасывает исключение;
   вызов конструкции <function>exit</function>
   ведёт себя так же.
  </para>
  <note>
   <simpara>
    Если обработчик  возвращает значение &false;,
    PHP устанавливает для него флаг состояния <constant>PHP_OUTPUT_HANDLER_DISABLED</constant>.
   </simpara>
  </note>
 </section>

 <section>
  <title>Флаги состояния обработчика вывода</title>
  <para>
   PHP устанавливает <link linkend="outcontrol.constants.flags-returned-by-handler">
    флаги состояния обработчика
   </link> битовой маски флагов (<literal>flags</literal>) буфера
   каждый раз при вызове обработчика вывода
   и делает их частью флагов (<literal>flags</literal>), возвращаемых
   функцией <function>ob_get_status</function>.
   Если обработчик успешно выполняется и не  возвращает значение &false;,
   PHP устанавливает флаги состояния <constant>PHP_OUTPUT_HANDLER_STARTED</constant>
   и <constant>PHP_OUTPUT_HANDLER_PROCESSED</constant>.
   Если обработчик  возвращает значение &false; или выбрасывает исключение во время работы,
   PHP устанавливает флаги состояния <constant>PHP_OUTPUT_HANDLER_STARTED</constant>
   и <constant>PHP_OUTPUT_HANDLER_DISABLED</constant>.
  </para>
  <note>
   <simpara>
    Если для обработчика установлено значение <constant>PHP_OUTPUT_HANDLER_DISABLED</constant>,
    обработчик не будет запускаться при вызове функций
    <function>ob_end_clean</function>, <function>ob_end_flush</function>,
    <function>ob_get_clean</function>, <function>ob_get_flush</function>
    или при завершении процесса работы PHP.
    Этот флаг не даёт эффекта при вызове функций <function>ob_clean</function>
    или <function>ob_flush</function>.
   </simpara>
  </note>
 </section>

</chapter>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
