<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: fa6c0138655159c9a360fbbf0364ac0f38274abd Maintainer: irker Status: ready -->
<!-- Reviewed: no -->
<chapter xml:id="security.database" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>Безопасность баз данных</title>

 <simpara>
  На сегодняшний день базы данных являются ключевыми компонентами большинства
  веб-приложений, позволяя предоставлять на сайтах динамический контент. Поскольку
  в таких БД может храниться очень деликатная или конфиденциальная информация,
  необходимо очень серьёзно относиться к защите базы данных.
 </simpara>
 <simpara>
  Для извлечения или сохранения любых данных вам необходимо открыть
  соединение с базой данных, отправить корректный запрос, извлечь результат и
  закрыть соединение. В настоящее время наиболее распространённым стандартом общения
  является язык структурированных запросов (SQL). Всегда следует помнить о возможности
  атаки <link linkend="security.database.sql-injection">посредством SQL-запроса</link>.
 </simpara>
 <simpara>
  Очевидно, что сам по себе <acronym>PHP</acronym> не может защитить вашу базу
  данных. В этом разделе документации описаны самые основы безопасного доступа и
  управления данными баз данных в <acronym>PHP</acronym>-скриптах.
 </simpara>
 <simpara>
  Запомните простое правило: максимальная защита. Чем больше потенциально опасных
  участков системы вы проработаете, тем сложнее будет потенциальному взломщику получить
  доступ к базе данных или повредить её. Хорошее проектирование базы данных и программных
  приложений поможет вам справиться с вашими страхами.
 </simpara>

 <sect1 xml:id="security.database.design">
  <title>Проектирование базы данных</title>
  <simpara>
   Первый шаг - это всегда создание БД, исключая тот случай, когда вы хотите использовать
   готовую базу, предоставляемую третьими лицами. После того, как база данных создана,
   она назначается пользователю, который выполнил создавший БД запрос. Как правило,
   только владелец (или суперпользователь) может выполнять различные действия с
   объектами, хранимыми в базе данных. Для того, чтобы и другие пользователи имели к ней
   доступ, их необходимо наделить соответствующими привилегиями.
  </simpara>
  <simpara>
   Приложения никогда не должны соединяться с базой данных, используя учётную запись
   владельца или суперпользователя, потому что они смогут выполнить любой запрос,
   например, модифицировать структуру таблиц (например, удалить некоторые
   таблицы) или даже удалить все содержимое БД целиком.
  </simpara>
  <simpara>
   Вы можете создать различные учётные записи пользователей БД для каждой
   индивидуальной потребности приложения с сильно ограниченными функциональными
   ограничениями. Рекомендуется назначать только самые необходимые привилегии, также вы
   должны избегать ситуаций, когда один и тот же пользователь может взаимодействовать с
   базой данных несколькими способами. Вы должны понимать, что если злоумышленник
   сможет воспользоваться какой-либо учётной записью вашей БД, он сможет вносить в базу
   все те изменения, что и программа, которая использует текущую учётную запись.
  </simpara>
 </sect1>

 <sect1 xml:id="security.database.connection">
  <title>Соединение с базой данных</title>
  <simpara>
   Вы можете использовать безопасные SSL или ssh соединения, для шифрования данных,
   которыми обмениваются клиент и сервер. При реализации чего-либо из
   вышеперечисленного мониторинг трафика и сбор данных о вашей
   базе данных существенно усложнится для потенциального взломщика .
  </simpara>
  <!--simpara>
     If your database server has native SSL support, consider using <link
     linkend="ref.openssl">OpenSSL functions</link> in communication between
     <acronym>PHP</acronym> and database via SSL.
    </simpara-->
 </sect1>

 <sect1 xml:id="security.database.storage">
  <title>Шифрование хранилища базы данных</title>
  <simpara>
   Вы можете установить соединения через SSL для шифрования связи клиент/сервер
   для повышения безопасности, или вы можете использовать ssh для шифрования сетевого
   соединения между клиентами и сервером базы данных. Если любой из них используется,
   то мониторинг вашего трафика и получение информации о вашей базы данных будет
   трудным для потенциального злоумышленника.
  </simpara>
  <simpara>
   В случае, если взломщик получил непосредственный доступ к БД (в обход веб-сервера),
   он может извлечь интересующие данные или нарушить их целостность, если
   информация не защищена на уровне самой БД. Шифрование данных -
   хороший способ предотвратить такую ситуацию, но лишь незначительное количество БД
   предоставляют такую возможность.
  </simpara>
  <simpara>
   Наиболее простое решение этой проблемы - установить вначале обыкновенный
   программный пакет для шифрования данных, а затем использовать его в ваших
   <acronym>PHP</acronym>-скриптах. <acronym>PHP</acronym> может вам помочь с этой
   задачей с помощью таких модулей как <link
     linkend="book.openssl">OpenSSL</link> и <link
     linkend="book.sodium">Sodium</link>, реализующих довольно большое число алгоритмов
   шифрования. При таком подходе скрипт вначале шифрует сохраняемые данные, а затем
   дешифрует их при запросе. Ниже приведены примеры того, как работает шифрование
   данных в PHP-скриптах.
  </simpara>

  <sect2 xml:id="security.database.storage.hashing">
   <title>Хеширование</title>
   <simpara>
    В случае работы со скрытыми служебными данными, если не требуется их нешифрованное
    представление (т.е. его не нужно показывать), то, как следствие, можно использовать
    хеширование. Хорошо известный пример хеширования - хранение криптографического
    хеша от пароля в БД, вместо хранения оригинального значения.
   </simpara>
   <simpara>
    Функция <link linkend="ref.password">password</link> позволяет
    удобно хешировать конфиденциальные данные и работать с этими хешами.
   </simpara>
   <simpara>
    <function>password_hash</function> позволяет хешировать заданную строку самым
    сильным из доступных алгоритмом и <function>password_verify</function>
    проверяет, что заданный пароль совпадает с сохранённым в БД хешем.
   </simpara>
   <example>
    <title>Хеширование полей с паролями</title>
    <programlisting role="php">
<![CDATA[
<?php

// Сохраняем хеш пароля
$query  = sprintf("INSERT INTO users(name,pwd) VALUES('%s','%s');",
            pg_escape_string($username),
            password_hash($password, PASSWORD_DEFAULT));
$result = pg_query($connection, $query);

// проверка введённого пользователем пароля на корректность
$query = sprintf("SELECT pwd FROM users WHERE name='%s';",
            pg_escape_string($username));
$row = pg_fetch_assoc(pg_query($connection, $query));

if ($row && password_verify($password, $row['pwd'])) {
    echo 'Добро пожаловать, ' . htmlspecialchars($username) . '!';
} else {
    echo 'Ошибка авторизации, ' . htmlspecialchars($username) . '.';
}

?>
]]>
      </programlisting>
     </example>
    </sect2>
   </sect1>

   <sect1 xml:id="security.database.sql-injection">
    <title>SQL-инъекции</title>
    <simpara>
     Многие веб-разработчики даже не догадываются, что SQL-запросы
     могут быть подделаны, и считают, что SQL-запросы всегда достоверны.
     На самом деле поддельные запросы могут обойти ограничения доступа,
     стандартную проверку авторизации, а некоторые виды запросов могут
     дать возможность выполнять команды операционной системы.
    </simpara>
    <simpara>
     Прямое внедрение вредоносных инструкций в SQL-запросы - это
     методика, в которой взломщик создаёт или изменяет текущие SQL-запросы
     для отображения скрытых данных, их изменения или даже выполнения
     опасных команд операционной системы на сервере базы данных.
     Атака выполняется на базе приложения, строящего SQL-запросы из пользовательского
     ввода и статических параметров. Следующие примеры, к сожалению, построены на
     реальных фактах.
    </simpara>
    <para>
     Благодаря отсутствию проверки пользовательского ввода и соединению с базой
     данных под учётной записью суперпользователя (или любого другого пользователя,
     наделённого соответствующими привилегиями), взломщик может создать ещё
     одного пользователя БД с правами суперпользователя.
     <example>
      <title>
       Постраничный вывод результата... и создание суперпользователя в PostgreSQL
      </title>
      <programlisting role="php">
<![CDATA[
<?php

$offset = $argv[0]; // внимание, нет проверки вводимых данных!
$query  = "SELECT id, name FROM products ORDER BY name LIMIT 20 OFFSET $offset;";
$result = pg_query($conn, $query);

?>
]]>
      </programlisting>
     </example>
     Обычно пользователи кликают по ссылкам 'вперёд' и 'назад', вследствие чего значение
     переменной <varname>$offset</varname> заносится в <acronym>URL</acronym>.
     Скрипт ожидает, что <varname>$offset</varname> - десятичное число.
     Однако, взломщик может попытаться взломать систему, присоединив к <acronym>URL</acronym>
     дополнительную строку, обработанную функцией <function>urlencode</function>:
     <informalexample>
      <programlisting role="sql">
<![CDATA[
0;
insert into pg_shadow(usename,usesysid,usesuper,usecatupd,passwd)
    select 'crack', usesysid, 't','t','crack'
    from pg_shadow where usename='postgres';
--
]]>
      </programlisting>
     </informalexample>
     Если это произойдёт, скрипт предоставит взломщику доступ к базе
     с правами суперпользователя. Заметим, что значение <literal>0;</literal> использовано
     для того, чтобы задать правильное смещение для первого запроса и
     корректно его завершить.
    </para>
    <note>
     <para>
      Часто используемой техникой для игнорирования SQL-парсером
      оставшейся части запроса является использование
      <literal>--</literal>, означающей комментарий.
     </para>
    </note>
    <para>
     Ещё один вероятный способ получить пароли учётных записей в БД - атака страниц,
     предоставляющих поиск по базе. Взломщику нужно лишь проверить, используется
     ли в запросе передаваемая на сервер и необрабатываемая надлежащим образом переменная.
     Это может быть один из устанавливаемых на предыдущей странице фильтров,
     таких как <literal>WHERE, ORDER BY, LIMIT</literal> и <literal>OFFSET</literal>,
     используемых при построении запросов <literal>SELECT</literal>.
     В случае, если используемая вами база данных поддерживает
     конструкцию <literal>UNION</literal>, взломщик может присоединить
     к оригинальному запросу ещё один дополнительный, для извлечения пользовательских
     паролей. Настоятельно рекомендуем использовать только зашифрованные
     пароли.
     <example>
      <title>
       Листинг статей... и некоторых паролей (для любой базы данных)
      </title>
      <programlisting role="php">
<![CDATA[
<?php

$query  = "SELECT id, name, inserted, size FROM products
           WHERE size = '$size'";
$result = odbc_exec($conn, $query);

?>
]]>
      </programlisting>
     </example>
     Статическая часть запроса может комбинироваться с другим
     <literal>SELECT</literal>-запросом, который выведет все пароли:
     <informalexample>
      <programlisting role="sql">
<![CDATA[
'
union select '1', concat(uname||'-'||passwd) as name, '1971-01-01', '0' from usertable;
--
]]>
      </programlisting>
     </informalexample>
     Если этот запрос (использующий <literal>'</literal> и
     <literal>--</literal>) присоединить к значению одной из переменных,
     используемых для формирования <varname>$query</varname>, то
     запрос заметно преобразится.
    </para>
    <para>
     Команды UPDATE также могут использоваться для атаки. Опять же, есть угроза разделения
     инструкции на несколько частей и присоединения дополнительного запроса.
     Также взломщик может видоизменить выражение <literal>SET</literal>.
     В этом случае потенциальному взломщику необходимо обладать некоторой дополнительной
     информацией о структуре базы данных для успешного манипулирования запросами. Эту информацию можно
     получить, проанализировав используемые в форме имена переменных, либо просто перебирая все
     наиболее распространённые варианты  названия соответствующих полей (а их не так уж и много).
     <example>
      <title>
       От восстановления пароля... до получения дополнительных привилегий (для любой базы данных)
      </title>
      <programlisting role="php">
<![CDATA[
<?php
$query = "UPDATE usertable SET pwd='$pwd' WHERE uid='$uid';";
?>
]]>
      </programlisting>
     </example>
     Но злоумышленник может ввести значение
     <literal>' or uid like'%admin%'</literal> для переменной <varname>$uid</varname> для
     изменения пароля администратора или просто присвоить переменной <varname>$pwd</varname> значение
     <literal>hehehe', trusted=100, admin='yes</literal>
     для получения дополнительных привилегий. При выполнении запросы переплетаются:
     <informalexample>
      <programlisting role="php">
<![CDATA[
<?php

// $uid: ' or uid like '%admin%
$query = "UPDATE usertable SET pwd='...' WHERE uid='' or uid like '%admin%';";

// $pwd: hehehe', trusted=100, admin='yes
$query = "UPDATE usertable SET pwd='hehehe', trusted=100, admin='yes' WHERE
...;";

?>
]]>
      </programlisting>
     </informalexample>
    </para>
    <para>
     Пугающий пример того, как на сервере баз данных могут выполняться команды
     операционной системы.
     <example>
      <title>Выполнение команд операционной системы на сервере (для базы MSSQL)</title>
      <programlisting role="php">
<![CDATA[
<?php

$query  = "SELECT * FROM products WHERE id LIKE '%$prod%'";
$result = mssql_query($query);

?>
]]>
      </programlisting>
     </example>
     Если взломщик введёт значение
     <literal>a%' exec master..xp_cmdshell 'net user test testpass /ADD' --</literal>
     для переменной <varname>$prod</varname>, тогда запрос <varname>$query</varname>
     будет выглядеть так:
     <informalexample>
      <programlisting role="php">
<![CDATA[
<?php

$query  = "SELECT * FROM products
           WHERE id LIKE '%a%'
           exec master..xp_cmdshell 'net user test testpass /ADD' --%'";
$result = mssql_query($query);

?>
]]>
      </programlisting>
     </informalexample>
     MSSQL сервер выполняет SQL-команды в пакетном режиме, в том числе
     и операции по заведению локальных учётных записей базы данных. В случае,
     если приложение работает с привилегиями администратора <literal>sa</literal>
     и сервис MSSQL запущен с необходимыми привилегиями, то выполнив
     приведённые выше действия, взломщик получит аккаунт для доступа к серверу.
    </para>
    <note>
     <para>
      Некоторые приведённые в этой главе примеры касаются конкретной базы данных.
      Это не означает, что аналогичные атаки на другие программные продукты невозможны.
      Работоспособность вашей базы данных может быть нарушена каким-либо другим способом.
     </para>
    </note>
    <para>
     <mediaobject>
      <alt>Рабочий пример проблем, вызываемых SQL-инъекцией</alt>
      <imageobject>
       <imagedata fileref="en/security/figures/xkcd-bobby-tables.png" format="PNG"/>
      </imageobject>
     </mediaobject>
     Авторство изображения принадлежит <link xlink:href="&url.xkcd;327">xkcd</link>
    </para>

    <sect2 xml:id="security.database.avoiding">
     <title>Способы защиты</title>
     <simpara>
      Хотя по-прежнему очевидно, что взломщик должен обладать по крайней мере некоторыми знаниями
      о структуре базы данных чтобы провести успешную атаку, получить эту информацию
      зачастую очень просто. Например, если база данных является частью open-source или
      другого публично доступного программного пакета с инсталляцией по умолчанию, эта информация
      является полностью открытой и доступной. Эти данные также могут быть получены
      из закрытого проекта, даже если он закодирован, усложнён, или скомпилирован,
      и даже из вашего личного кода через отображение сообщений об ошибках.
      К другим методам относится использование распространённых (легко угадываемых) названий
      таблиц и столбцов. Например, форма логина, которая использует таблицу 'users' c названиями
      столбцов 'id', 'username' и 'password'.
     </simpara>
     <simpara>
      Большинство успешных атак основывается на коде, написанном без учёта соответствующих
      требований безопасности. Не доверяйте никаким вводимым данным, особенно если
      они поступают со стороны клиента, даже если это списки в форме, скрытые поля или куки.
      Первый приведённый пример показывают, как подобные запросы
      могут привести к катастрофе.
     </simpara>

     <itemizedlist>
      <listitem>
       <simpara>
        Никогда не соединяйтесь с базой данных, используя учётную запись
        владельца базы данных или суперпользователя. Всегда старайтесь
        использовать специально созданных пользователей с максимально
        ограниченными правами.
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        используйте подготовленные выражения с привязанными переменными.
        Эта возможность предоставляется модулями
        <link linkend="pdo.prepared-statements">PDO</link>,
        <link linkend="mysqli.quickstart.prepared-statements">MySQLi</link>
        и другими библиотеками.
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        Всегда проверяйте введённые данные на соответствие ожидаемому типу.
        В <acronym>PHP</acronym> есть множество функций для проверки данных: начиная от простейших
        <link linkend="ref.var">функций для работы с переменными</link> и
        <link linkend="ref.ctype">функций определения типа символов</link>
        (таких как <function>is_numeric</function> и <function>ctype_digit</function>
        соответственно) и заканчивая
        <link linkend="ref.pcre">Perl-совместимыми регулярными выражениями</link>.
       </simpara>
      </listitem>
      <listitem>
       <para>
        В случае, если приложение ожидает цифровой ввод, примените функцию
        <function>ctype_digit</function> для проверки введённых данных, или
        принудительно укажите их тип при помощи <function>settype</function>,
        или просто используйте числовое представление при помощи функции
        <function>sprintf</function>.
        <example>
         <title>Более безопасная реализация постраничной навигации</title>
         <programlisting role="php">
<![CDATA[
<?php

settype($offset, 'integer');
$query = "SELECT id, name FROM products ORDER BY name LIMIT 20 OFFSET $offset;";

// обратите внимание на формат %d, использование %s было бы бессмысленно
$query = sprintf("SELECT id, name FROM products ORDER BY name LIMIT 20 OFFSET %d;",
                 $offset);

?>
]]>
         </programlisting>
        </example>
       </para>
      </listitem>
      <listitem>
       <simpara>
        Если на уровне базы данных не поддерживаются привязанные переменные, то
        всегда экранируйте любые нечисловые данные, используемый в запросах к БД при помощи
        специальных экранирующих функций, специфичных для используемой
        вами базы данных (например,
        <function>mysql_real_escape_string</function>,
        <function>sqlite_escape_string</function>  и т.д.).
        Общие функции такие как <function>addslashes</function> полезны
        только в определённых случаях (например MySQL в однобайтной кодировке
        с отключённым <varname>NO_BACKSLASH_ESCAPES</varname>), поэтому лучше
        избегать их использование.
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        Ни в коем случае не выводите никакой информации о БД, особенно о её структуре.
        Также ознакомьтесь с соответствующими разделами документации: "<link
        linkend="security.errors">Сообщения об ошибках</link>" и "<link
        linkend="ref.errorfunc">Функции обработки и логирования ошибок</link>".
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        Вы можете использовать хранимые процедуры и заранее определённые курсоры для
        абстрагированной работы с данными, не предоставляя пользователям
        прямого доступа к данным и представлениям, но это решение имеет свои особенности.
       </simpara>
      </listitem>
     </itemizedlist>

     <simpara>
      Помимо всего вышесказанного, вы можете логировать запросы в вашем скрипте либо
      на уровне базы данных, если она это поддерживает. Очевидно, что логирование
      не может предотвратить нанесение ущерба, но может помочь при трассировке взломанного
      приложения. Лог-файл полезен не сам по себе, а информацией, которая в нем содержится.
      Причём, в большинстве случаев полезно логировать все возможные детали.
     </simpara>
    </sect2>
   </sect1>
</chapter>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
