<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 3f47f213213c63232b607a15507c59b07c656f52 Maintainer: rjhdby Status: ready -->
<!-- Reviewed: no -->
<sect1 xml:id="migration56.openssl" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>Изменения OpenSSL в PHP 5.6.x</title>

 <sect2 xml:id="migration56.openssl.peer-verification">
  <title>Обёртки потоков теперь по умолчанию проверяют сертификаты узлов и имена хостов при использовании SSL/TLS</title>

  &migration56.openssl.peer-verification;
 </sect2>

 <sect2 xml:id="migration56.openssl.fingerprint">
  <title>Сигнатура сертификата</title>

  <para>
   Была добавлена поддержка извлечения и проверки сигнатуры сертификата.
   Для извлечения сигнатур сертификатов X.509 добавлена функция
   <function>openssl_x509_fingerprint</function>. Также были добавлены две
   опции <link linkend="context.ssl">контекста потока SSL</link>:
   <literal>capture_peer_cert</literal> для захвата узлового сертификата X.509,
   и <literal>peer_fingerprint</literal> для проверки сертификата на соответствие
   заданной сигнатуре.
  </para>
 </sect2>

 <sect2 xml:id="migration56.openssl.ciphers">
  <title>Обновлены шифры по умолчанию</title>

  <para>
   Список шифров по умолчанию, используемых PHP, был обновлён на более
   безопасный в соответствии с <link xlink:href="&url.openssl.ciphers.mozilla;">
   рекомендациями по шифрам от Mozilla</link>, с двумя дополнительными
   исключениями: анонимные шифры Диффи-Хеллмана и RC4.
  </para>

  <para>
   Этот список доступен через новую константу
   <constant>OPENSSL_DEFAULT_STREAM_CIPHERS</constant>, и может быть переопределён
   (как и в предыдущих версиях PHP) установкой опцией контекста
   <link linkend="context.ssl.ciphers"><parameter>ciphers</parameter></link>.
  </para>
 </sect2>

 <sect2 xml:id="migration56.openssl.tls-compression">
  <title>Сжатие запрещено по умолчанию</title>

  <para>
   Сжатие SSL/TLS было запрещено по умолчанию для compression уменьшения
   вероятности атаки типа CRIME. В PHP 5.4.13 была добавлена опция контекста
   <link linkend="context.ssl.disable-compression"><parameter>disable_compression</parameter></link>
   для возможности запретить компрессию и теперь она по умолчанию установлена
   как &true; (то есть компрессия запрещена).
  </para>
 </sect2>

 <sect2 xml:id="migration56.openssl.honor-cipher-order">
  <title>Разрешение серверу определять свой собственный порядок шифров</title>

  <para>
   Была добавлена опция контекста <parameter>honor_cipher_order</parameter>,
   которая позволяет серверу обслуживающему зашифрованный поток самому
   определять шифры, которыми будет пользоваться клиент. Это позволить снизить
   риск атаки типа BEAST.
  </para>
 </sect2>

 <sect2 xml:id="migration56.openssl.metadata">
  <title>Доступ к согласованному протоколу и шифру</title>

  <para>
   Протокол и шифр, согласованные для шифрованного потока, доступны
   с помощью функций <function>stream_get_meta_data</function> или
   <function>stream_context_get_options</function>, если опция контекста SSL
   <parameter>capture_session_meta</parameter> установлена как &true;.
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
$ctx = stream_context_create(['ssl' => [
    'capture_session_meta' => TRUE
]]);

$html = file_get_contents('https://google.com/', FALSE, $ctx);
$meta = stream_context_get_options($ctx)['ssl']['session_meta'];
var_dump($meta);
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
array(4) {
  ["protocol"]=>
  string(5) "TLSv1"
  ["cipher_name"]=>
  string(20) "ECDHE-RSA-AES128-SHA"
  ["cipher_bits"]=>
  int(128)
  ["cipher_version"]=>
  string(11) "TLSv1/SSLv3"
}
]]>
   </screen>
  </informalexample>
 </sect2>

 <sect2 xml:id="migration56.openssl.forward-secrecy">
  <title>Новые возможности для совершенной прямой секретности (PFS) для серверов, обслуживающих шифрованные потоки</title>

  <para>
   Шифрованные потоки клиента уже поддерживают совершенную прямую
   секретность, поскольку она, как правило, контролируется сервером.
   Серверы PHP, обслуживающие шифрованные потоки, использующие сертификаты
   поддерживающие совершенную прямую секретность не нуждаются в каких
   либо дополнительных действиях для включения PFS; однако, было добавлено
   некоторое количество новых опций контекста SSL для более точного контроля
   над PFS и для решения возможных проблем.
  </para>

  <variablelist>
   <varlistentry>
    <term><parameter>ecdh_curve</parameter></term>
    <listitem>
     <para>
      Эта опция позволяет выбрать кривую для использования в шифрах ECDH.
      Если не задано, то будет использоваться <literal>prime256v1</literal>.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><parameter>dh_param</parameter></term>
    <listitem>
     <para>
      Путь к файлу, содержащему параметры для обмена ключами Диффи-Хеллмана,
      созданного, например, с помощью такой команды:
     </para>
     <programlisting role="shell">
<![CDATA[
openssl dhparam -out /path/to/my/certs/dh-2048.pem 2048
]]>
     </programlisting>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><parameter>single_dh_use</parameter></term>
    <listitem>
     <para>
      Если установлено как &true;, новая пара ключей будет создана, используя
      параметры Диффи-Хеллмана, тем самым улучшая прямую секретность.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><parameter>single_ecdh_use</parameter></term>
    <listitem>
     <para>
      Если установлено как &true;, новая пара ключей будет генерироваться всегда,
      при согласовании шифра ECDH. Это улучшает прямую секретность.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </sect2>

 <sect2 xml:id="migration56.openssl.crypto-method">
  <title>Выбор версии SSL/TLS</title>

  <para>
   Теперь возможно выбирать конкретную версию SSL и TLS с помощью опции
   контекста <parameter>crypto_method</parameter> или указывая конкретный
   транспорт при создании обёртки потока (например с помощью вызова
   <function>stream_socket_client</function> или
   <function>stream_socket_server</function>).
  </para>

  <para>
   Опция контекста SSL <parameter>crypto_method</parameter> принимает битовую
   маску, перечисляющую допустимые протоколы, также как это задаётся в
   параметре <parameter>crypto_type</parameter> функции
   <function>stream_socket_enable_crypto</function>.
   <!-- TODO: link to full list, which is too big for this page but should be
              in the crypto_method and stream_socket_enable_crypto()
              documentation. -->
  </para>

  <segmentedlist>
   <title>Выбранная версия протокола и соответствующие опции</title>
   <segtitle>Протокол</segtitle>
   <segtitle>Флаг клиента</segtitle>
   <segtitle>Флаг сервера</segtitle>
   <segtitle>Транспорт</segtitle>
   <seglistitem>
    <seg>Любые версии TLS или SSL</seg>
    <seg><constant>STREAM_CRYPTO_METHOD_ANY_CLIENT</constant></seg>
    <seg><constant>STREAM_CRYPTO_METHOD_ANY_SERVER</constant></seg>
    <seg><literal>ssl://</literal></seg>
   </seglistitem>
   <seglistitem>
    <seg>Любая версия TLS</seg>
    <seg><constant>STREAM_CRYPTO_METHOD_TLS_CLIENT</constant></seg>
    <seg><constant>STREAM_CRYPTO_METHOD_TLS_SERVER</constant></seg>
    <seg><literal>tls://</literal></seg>
   </seglistitem>
   <seglistitem>
    <seg>TLS 1.0</seg>
    <seg><constant>STREAM_CRYPTO_METHOD_TLSv1_0_CLIENT</constant></seg>
    <seg><constant>STREAM_CRYPTO_METHOD_TLSv1_0_SERVER</constant></seg>
    <seg><literal>tlsv1.0://</literal></seg>
   </seglistitem>
   <seglistitem>
    <seg>TLS 1.1</seg>
    <seg><constant>STREAM_CRYPTO_METHOD_TLSv1_1_CLIENT</constant></seg>
    <seg><constant>STREAM_CRYPTO_METHOD_TLSv1_1_SERVER</constant></seg>
    <seg><literal>tlsv1.1://</literal></seg>
   </seglistitem>
   <seglistitem>
    <seg>TLS 1.2</seg>
    <seg><constant>STREAM_CRYPTO_METHOD_TLSv1_2_CLIENT</constant></seg>
    <seg><constant>STREAM_CRYPTO_METHOD_TLSv1_2_SERVER</constant></seg>
    <seg><literal>tlsv1.2://</literal></seg>
   </seglistitem>
   <seglistitem>
    <seg>SSL 3</seg>
    <seg><constant>STREAM_CRYPTO_METHOD_SSLv3_CLIENT</constant></seg>
    <seg><constant>STREAM_CRYPTO_METHOD_SSLv3_SERVER</constant></seg>
    <seg><literal>sslv3://</literal></seg>
   </seglistitem>
  </segmentedlist>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php

// Требуется TLS 1.0 или выше для использования file_get_contents():
$ctx = stream_context_create([
    'ssl' => [
        'crypto_method' => STREAM_CRYPTO_METHOD_TLS_CLIENT,
    ],
]);
$html = file_get_contents('https://google.com/', false, $ctx);

// Требуется TLS 1.1 или 1.2:
$ctx = stream_context_create([
    'ssl' => [
        'crypto_method' => STREAM_CRYPTO_METHOD_TLSv1_1_CLIENT |
                           STREAM_CRYPTO_METHOD_TLSv1_2_CLIENT,
    ],
]);
$html = file_get_contents('https://google.com/', false, $ctx);

// Соединяемся с использованием транспорта потокового сокета tlsv1.2://
$sock = stream_socket_client('tlsv1.2://google.com:443/');

?>
]]>
   </programlisting>
  </informalexample>
 </sect2>

 <sect2 xml:id="migration56.openssl.default-certificate-paths">
  <title>Добавлена функция <function>openssl_get_cert_locations</function></title>

  <para>
   Была добавлена функция <function>openssl_get_cert_locations</function>:
   она возвращает расположения, в которых PHP будет искать пакеты CA по
   умолчанию.
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
var_dump(openssl_get_cert_locations());
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
array(8) {
  ["default_cert_file"]=>
  string(21) "/etc/pki/tls/cert.pem"
  ["default_cert_file_env"]=>
  string(13) "SSL_CERT_FILE"
  ["default_cert_dir"]=>
  string(18) "/etc/pki/tls/certs"
  ["default_cert_dir_env"]=>
  string(12) "SSL_CERT_DIR"
  ["default_private_dir"]=>
  string(20) "/etc/pki/tls/private"
  ["default_default_cert_area"]=>
  string(12) "/etc/pki/tls"
  ["ini_cafile"]=>
  string(0) ""
  ["ini_capath"]=>
  string(0) ""
}
]]>
   </screen>
  </informalexample>
 </sect2>

 <sect2 xml:id="migration56.openssl.spki">
  <title>Поддержка SPKI</title>

  <para>
   Была добавлена поддержка для создания, извлечения и проверки подписанных
   публичных ключей и опознавательных строк (SPKAC).
   Были добавлены функции <function>openssl_spki_new</function>,
   <function>openssl_spki_verify</function>,
   <function>openssl_spki_export_challenge</function> и
   <function>openssl_spki_export</function> для создания, проверки экспорта PEM
   публичных ключей и соответствующих опознавательных строк из SPKAC,
   созданных из элементов HTML5 <literal>KeyGen</literal>.
  </para>

  <variablelist>
   <varlistentry>
    <term><parameter>openssl_spki_new</parameter></term>
    <listitem>
     <para>
      Генерация нового SPKAC с использованием приватного ключа, опознавательной строки
      и алгоритма хеширования.
     </para>

     <informalexample>
      <programlisting role="php">
<![CDATA[
<?php
$pkey = openssl_pkey_new();
openssl_pkey_export($pkey, 'secret passphrase');

$spkac = openssl_spki_new($pkey, 'challenge string');
?>
]]>
      </programlisting>
      &example.outputs;
      <screen>
<![CDATA[
SPKAC=MIIBXjCByDCBnzANBgkqhkiG9w0BAQEFAAOBjQAwgYkCgYEA3L0IfUijj7+A8CPC8EmhcdNoe5fUAog7OrBdhn7EkxFButUp40P7+LiYiygYG1TmoI/a5EgsLU3s9twEz3hmgY9mYIqb/rb+SF8qlD/K6KVyUORC7Wlz1Df4L8O3DuRGzx6/+3jIW6cPBpfgH1sVuYS1vDBsP/gMMIxwTsKJ4P0CAwEAARYkYjViMzYxMTktNjY5YS00ZDljLWEyYzctMGZjNGFhMjVlMmE2MA0GCSqGSIb3DQEBAwUAA4GBAF7hu0ifzmjonhAak2FhhBRsKFDzXdKIkrWxVNe8e0bZzMrWOxFM/rqBgeH3/gtOUDRS5Fnzyq425UsTYbjfiKzxGeCYCQJb1KJ2V5Ij/mIJHZr53WYEXHQTNMGR8RPm7IxwVXVSHIgAfXsXZ9IXNbFbcaLRiSTr9/N4U+MXUWL7
]]>
      </screen>
     </informalexample>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><parameter>openssl_spki_verify</parameter></term>
    <listitem>
     <para>
      Проверка предоставленного SPKAC.
     </para>

     <informalexample>
      <programlisting role="php">
<![CDATA[
<?php
$pkey = openssl_pkey_new();
openssl_pkey_export($pkey, 'secret passphrase');

$spkac = openssl_spki_new($pkey, 'challenge string');
var_dump(openssl_spki_verify($spkac));
?>
]]>
      </programlisting>
     </informalexample>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><parameter>openssl_spki_export_challenge</parameter></term>
    <listitem>
     <para>
      Экспорт связанной опознавательной строки из предоставленного SPKAC.
     </para>

     <informalexample>
      <programlisting role="php">
<![CDATA[
<?php
$pkey = openssl_pkey_new();
openssl_pkey_export($pkey, 'secret passphrase');

$spkac = openssl_spki_new($pkey, 'challenge string');
$challenge = openssl_spki_export_challenge($spkac):
echo $challenge;
?>
]]>
      </programlisting>
      &example.outputs;
      <screen>
<![CDATA[
challenge string
]]>
      </screen>
     </informalexample>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><parameter>openssl_spki_export</parameter></term>
    <listitem>
     <para>
      Экспорт публичного ключа RSA в формате из SPKAC.
     </para>

     <informalexample>
      <programlisting role="php">
<![CDATA[
<?php
$pkey = openssl_pkey_new();
openssl_pkey_export($pkey, 'secret passphrase');

$spkac = openssl_spki_new($pkey, 'challenge string');
echo openssl_spki_export($spkac);
?>
]]>
      </programlisting>
      &example.outputs;
      <screen>
<![CDATA[
-----BEGIN PUBLIC KEY-----
MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDcvQh9SKOPv4DwI8LwSaFx02h7
l9QCiDs6sF2GfsSTEUG61SnjQ/v4uJiLKBgbVOagj9rkSCwtTez23ATPeGaBj2Zg
ipv+tv5IXyqUP8ropXJQ5ELtbXPUN/gvw7cO5EbPHr/7eMhbpw8Gl+AfWxW5hLW8
MGw/+AwwjHBOwong/QIDAQAB
-----END PUBLIC KEY-----
]]>
      </screen>
     </informalexample>
    </listitem>
   </varlistentry>
  </variablelist>
 </sect2>
</sect1>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
