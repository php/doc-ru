<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 22583751fbfdaa3eaa41aeb6470d1343f5cb2c78 Maintainer: malferov Status: ready -->
<!-- Reviewed: no -->
<sect1 xml:id="migration84.new-features">
 <title>Новая функциональность</title>

 <!-- TODO: Core features for 8.4 -->
 <sect2 xml:id="migration84.new-features.core">
  <title>Ядро PHP</title>

  <!-- RFC: https://wiki.php.net/rfc/property-hooks -->
  <sect3 xml:id="migration84.new-features.core.property-hooks">
   <title>Хуки для свойств объектов</title>

   <simpara>
    Операциям чтения и записи свойств объектов теперь разрешили добавлять логику поведения.
    Дополнительную логику добавляют через хук <literal>get</literal>, который срабатывает при чтении свойства,
    и хук <literal>set</literal>, который срабатывает при записи значения в свойство объекта.
    Хуки умеют делать свойства виртуальными — без реальных значений.
   </simpara>

   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php

class Person
{
    // «Виртуальное» свойство. Невозможно установить значение виртуального свойства явным образом
    public string $fullName
    {
        get => $this->firstName . ' ' . $this->lastName;
    }

    // Каждая операция записи значения свойства пройдёт через хук. В свойство в итоге запишется значение, которое вернётся из хука.
    // Доступ к свойству для чтения значения проходит в стандартном режиме
    public string $firstName
    {
        set => mb_ucfirst(strtolower($value));
    }

    // Каждая операция записи значения свойства пройдёт через хук, который сам запишет реальное значение свойства.
    // Доступ к свойству для чтения значения проходит в стандартном режиме
    public string $lastName
    {
        set {
            if (strlen($value) < 2) {
                throw new \InvalidArgumentException('Слишком короткая фамилия');
            }

            $this->lastName = $value;
        }
    }
}

$p = new Person();

$p->firstName = 'пётр';
print $p->firstName; // Конструкция выведет "Пётр"

$p->lastName = 'Петров';
print $p->fullName; // Конструкция выведет "Пётр Петров"

?>
]]>
    </programlisting>
   </informalexample>
  </sect3>

  <!-- RFC: https://wiki.php.net/rfc/asymmetric-visibility-v2 -->
  <sect3 xml:id="migration84.new-features.core.asymmetric-property-visibility">
   <title>Асимметричная видимость свойств объектов</title>

   <simpara>
    Видимостью свойств объектов для операций записи значения — <literal>set</literal>
    теперь разрешили управлять отдельно от видимости свойств для операций чтения — <literal>get</literal>.
   </simpara>
   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php

class Example
{
    // Первый модификатор управляет видимостью свойства для чтения, второй — видимостью для записи.
    // Видимость для чтения нельзя сужать сильнее видимости для записи
    public protected(set) string $name;

    public function __construct(string $name)
    {
        $this->name = $name;
    }
}

?>
]]>
    </programlisting>
   </informalexample>
  </sect3>

  <!-- RFC: https://wiki.php.net/rfc/lazy-objects -->
  <sect3 xml:id="migration84.new-features.core.lazy-objects">
   <title>Ленивые объекты</title>
   <simpara>
    С PHP 8.4.0 разрешили создавать объекты, инициализация которых откладывается
    до обращения к объекту.
    За счёт ленивых объектов библиотеки и фреймворки получают доступ к отсрочке
    получения данных или зависимостей, которые требуются для инициализации.
   </simpara>
   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php

class Example
{
    public function __construct(private int $data) {}

    // ...
}

$initializer = static function (Example $ghost): void {
    // Fetch data or dependencies
    $data = getData();

    // Initialize
    $ghost->__construct($data);
};

$reflector = new ReflectionClass(Example::class);
$object = $reflector->newLazyGhost($initializer);

?>
]]>
    </programlisting>
   </informalexample>
  </sect3>

  <!-- RFC: https://wiki.php.net/rfc/deprecated_attribute -->
  <sect3 xml:id="migration84.new-features.core.deprecated-attribute">
   <title>Атрибут <code>#[\Deprecated]</code></title>

   <simpara>
    Новый атрибут <classname>Deprecated</classname> помечает функции, методы
    и константы классов устаревшими. Поведение функциональности, которую пометили устаревшей
    этим атрибутом, совпадает с поведением механизма устаревания функциональности,
    которую предоставляет сам PHP. Единственное отличие состоит в том, что вместо кода ошибки
    <constant>E_DEPRECATED</constant> PHP выдаст ошибку уровня
    <constant>E_USER_DEPRECATED</constant>.
   </simpara>

   <simpara>
    Функциональность самого PHP, которая устарела прежде, обновили
    и пометили этим атрибутом, что улучшило выдаваемые сообщения об ошибках
    за счёт включения краткого пояснения.
   </simpara>
  </sect3>

  <!-- RFC: https://wiki.php.net/rfc/rfc1867-non-post -->
  <sect3 xml:id="migration84.new-features.core.rfc1867">
   <title>
    Разбор HTTP-запросов, метод которых отличается от POST,
    при передаче многокомпонентного содержимого по стандарту RFC1867
   </title>

   <!-- TODO: expand? -->
   <simpara>
    Для разбора multipart-запросов по протоколу HTTP, которые определяет
    стандарт RFC1867 (multipart) и метод HTTP-запроса которых отличается от метода POST,
    добавили функцию <function>request_parse_body</function>.
   </simpara>
  </sect3>

  <!-- RFC: https://wiki.php.net/rfc/new_without_parentheses -->
  <sect3 xml:id="migration84.new-features.core.new-chaining">
   <title>Объединение в цепочку вызовов выражения &new; без круглых скобок</title>

   <!-- TODO: expand and examples? -->
   <simpara>
    Выражениям, которыми создают новый объект с аргументами конструктора, теперь доступно разыменование,
    поэтому такие выражения разрешают по цепочке вызывать методы, получать доступ к свойствам объекта,
    и обращаться к другим членам объекта без заключения выражения в круглые скобки.
   </simpara>
  </sect3>

  <sect3 xml:id="migration84.new-features.core.debug-weakref">
   <title>Улучшение отладочной информации об объектах класса <classname>WeakReference</classname></title>

   <!-- TODO: expand and examples? -->
   <simpara>
    Получение отладочной информации об слабых ссылках, которые представляет класс <classname>WeakReference</classname>,
    теперь также выведет объект, на который ссылается слабая ссылка, или &null;, если ссылка больше
    недействительна.
   </simpara>
  </sect3>

  <sect3 xml:id="migration84.new-features.core.debug-closure">
   <title>Улучшение отладочной информации об объектах класса <classname>Closure</classname></title>

   <!-- TODO: expand and examples? -->
   <simpara>
    Вывод магического метода <methodname>Closure::__debugInfo</methodname> теперь включает
    название функции или метода, который вернул замыкание <classname>Closure</classname>,
    а также путь к файлу и строку, на которой определили замыкание.
   </simpara>
  </sect3>

  <!-- Is this really a feature? Should this be moved to other changes? -->
  <sect3 xml:id="migration84.new-features.core.multiple-namespaces-symbols">
   <title>Определение идентичных символов в разных блоках пространства имён</title>

   <!-- TODO: expand and examples? -->
   <simpara>
    Выход из пространства имён теперь очищает видимые символы.
    Это разрешает использовать символ в блоке пространства имён, даже если предыдущий блок
    пространства имён объявил символ с тем же именем.
    <!-- See Zend/tests/use_function/ns_end_resets_seen_symbols_1.phpt. -->
   </simpara>
  </sect3>

 </sect2>

 <sect2 xml:id="migration84.new-features.curl">
  <title>Модуль cURL</title>

  <simpara>
   Функция <function>curl_version</function> возвращает дополнительное
   значение <literal>feature_list</literal> — ассоциативный массив
   со списком известных функций cURL, и поддерживаются ли они: &true;, если да,
   или &false;, если нет.
  </simpara>

  <simpara>
   Добавили константы <constant>CURL_HTTP_VERSION_3</constant>
   и <constant>CURL_HTTP_VERSION_3ONLY</constant> (доступны
   с libcurl 7.66 и 7.88) как доступные флаги
   для опции <constant>CURLOPT_HTTP_VERSION</constant>.
  </simpara>

  <simpara>
   Добавили константу <constant>CURLOPT_PREREQFUNCTION</constant> — опция модуля cURL,
   которая принимает значение с типом <type>callable</type>, которое вызовет после установки соединения,
   но до отправки запроса. К функции обратного вызова предъявляется требование:
   вернуть или значение <constant>CURL_PREREQFUNC_OK</constant>, чтобы разрешить,
   или значение <constant>CURL_PREREQFUNC_ABORT</constant>, чтобы прервать запрос.
  </simpara>

  <simpara>
   Добавили опцию <constant>CURLOPT_SERVER_RESPONSE_TIMEOUT</constant>,
   которая заменила опцию с названием <constant>CURLOPT_FTP_RESPONSE_TIMEOUT</constant>.
   Обе константы содержат одно и то же значение.
  </simpara>

  <para>
   Добавили константу <constant>CURLOPT_DEBUGFUNCTION</constant> — опция модуля cURL,
   которая принимает значение с типом <type>callable</type>. Callback-функция
   вызывается в течение жизни запроса, который обрабатывается объектом <classname>CurlHandle</classname>.
   Функция обратного вызова получает целое число, которое содержит тип отладочного сообщения,
   и строку, которая содержит отладочное сообщение.
   Тип отладочного сообщения получает значение константы из следующего списка:
   <simplelist>
    <member><constant>CURLINFO_TEXT</constant></member>
    <member><constant>CURLINFO_HEADER_IN</constant></member>
    <member><constant>CURLINFO_HEADER_OUT</constant></member>
    <member><constant>CURLINFO_DATA_IN</constant></member>
    <member><constant>CURLINFO_DATA_OUT</constant></member>
    <member><constant>CURLINFO_SSL_DATA_IN</constant></member>
    <member><constant>CURLINFO_SSL_DATA_OUT</constant></member>
   </simplelist>
   При установке отладочной опции нельзя устанавливать параметр <constant>CURLINFO_HEADER_OUT</constant>,
   потому что параметр использует ту же функциональность библиотеки libcurl.
  </para>

  <simpara>
   Функция <function>curl_getinfo</function> теперь возвращает дополнительный
   ключ <literal>posttransfer_time_us</literal>, который содержит количество
   микросекунд от начала передачи до отправки последнего байта.
   При перенаправлениях время каждого запроса суммируется.
   Это значение также возвращает функция <function>curl_getinfo</function>
   при вызове с аргументом <constant>CURLINFO_POSTTRANSFER_TIME_T</constant>
   для параметра <parameter>option</parameter>.
   Для этого требуется библиотека libcurl 8.10.0 или новее.
  </simpara>
 </sect2>

 <sect2 xml:id="migration84.new-features.dom">
  <title>Модуль DOM</title>

  <!-- RFC: https://wiki.php.net/rfc/domdocument_html5_parser -->
  <!-- RFC: https://wiki.php.net/rfc/opt_in_dom_spec_compliance -->
  <simpara>
   В модуль добавили пространство имён <package>Dom</package> с новыми классами наподобие
   <classname>Dom\Node</classname>, который работает аналогично прежнему классу
   <classname>DOMNode</classname>. Новые классы совместимы с языком разметки HTML 5
   и соответствуют спецификации WHATWG; новые классы
   решают давние ошибки в модуле DOM.
   Старые классы модуля DOM остаются доступны в целях сохранения обратной совместимости.
  </simpara>

  <para>
   Добавили метод <methodname>DOMNode::compareDocumentPosition</methodname>
   и связанные с ним константы:
   <simplelist>
    <member><constant>DOMNode::DOCUMENT_POSITION_DISCONNECTED</constant></member>
    <member><constant>DOMNode::DOCUMENT_POSITION_PRECEDING</constant></member>
    <member><constant>DOMNode::DOCUMENT_POSITION_FOLLOWING</constant></member>
    <member><constant>DOMNode::DOCUMENT_POSITION_CONTAINS</constant></member>
    <member><constant>DOMNode::DOCUMENT_POSITION_CONTAINED_BY</constant></member>
    <member><constant>DOMNode::DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC</constant></member>
   </simplelist>
  </para>

  <!-- RFC: https://wiki.php.net/rfc/improve_callbacks_dom_and_xsl -->
  <simpara>
   Метод <methodname>DOMXPath::registerPhpFunctions</methodname> теперь принимает callable-значения.

   Кроме того, метод <methodname>DOMXPath::registerPhpFunctionNs</methodname>
   теперь умеет регистрировать callback-функции, которые будут использовать свой
   синтаксис вызова функции, а не вызовы вроде <code>php:function('name')</code>.
  </simpara>
 </sect2>

 <sect2 xml:id="migration84.new-features.intl">
  <title>Модуль Intl</title>

  <simpara>
   Режим округления <constant>NumberFormatter::ROUND_HALFEVEN</constant>
   дополнили новым режимом <constant>NumberFormatter::ROUND_HALFODD</constant>.
  </simpara>
 </sect2>

 <sect2 xml:id="migration84.new-features.openssl">
  <title>Модуль OpenSSL</title>

  <simpara>
   Добавили поддержку ключей на основе эллиптических кривых Curve25519 + Curve448.
   В частности, поля x25519, ed25519, x448 и ed448 поддерживаются в функциях
   <function>openssl_pkey_new</function>,
   <function>openssl_pkey_get_details</function>,
   <function>openssl_sign</function>
   и <function>openssl_verify</function>, которые расширили для поддержки этих ключей.
  </simpara>

  <simpara>
   Реализовали хеширование паролей алгоритмом PASSWORD_ARGON2.
   Для этого требуется модуль OpenSSL 3.2 и NTS-сборка (англ. сокр.: Non-Thread Safe).
  </simpara>
 </sect2>

 <sect2 xml:id="migration84.new-features.pcre">
  <title>Модуль PCRE</title>

  <simpara>
   Библиотеку pcre2lib, которая поставляется в комплекте с PHP, обновили до версии 10.44.
   Поэтому добавили поддержку JIT-компилятором процессорной архитектуры LoongArch,
   в Perl-совместимых элементах между фигурными скобками разрешили пробелы
   и теперь поддерживаются ретроспективные проверки переменной длины.
  </simpara>

  <simpara>
   В библиотеке pcre2lib версии 10.44 максимальную длину меток именованных групп захвата
   изменили с <literal>32</literal> до <literal>128</literal> символов.
  </simpara>

  <simpara>
   Добавили поддержку модификатора <literal>r</literal> (PCRE2_EXTRA_CASELESS_RESTRICT)
   и модификатора режима <literal>(?r)</literal>.
   При включении вместе с модификатором (<literal>i</literal>), который включает регистронезависимый поиск,
   выражение блокирует смешивание ASCII-символов и символов, которые не входят в кодировку ASCII.
  </simpara>
 </sect2>

 <sect2 xml:id="migration84.new-features.pdo">
  <title>Модуль PDO</title>

  <!-- RFC: https://wiki.php.net/rfc/pdo_driver_specific_subclasses -->
  <simpara>
   Добавили подклассы, характерные для драйверов,
   чтобы лучше поддерживать функциональность, специфичную для баз данных.
   Новые классы модуля PDO улучшают поддержку функциональности,
   характерной для конкретных баз данных.
   Новые классы могут быть инициализированы либо с помощью метода <methodname>PDO::connect</methodname>,
   либо непосредственно инициализировав один из подклассов, характерных для драйверов.
  </simpara>

  <!-- RFC: https://wiki.php.net/rfc/pdo_driver_specific_parsers -->
  <para>
   Добавлена поддержка SQL-парсеров, характерных для конкретных драйверов.
   Если парсер для конкретного драйвера недоступен, используется парсер по умолчанию.
   Парсер по умолчанию поддерживает:
   <simplelist>
    <member>
     литералы в одинарных и двойных кавычках с удвоением в качестве механизма экранирования
    </member>
    <member>
     комментарии, которые начинаются с двух дефисов, и невложенные комментарии в стиле языка C
    </member>
   </simplelist>
  </para>
 </sect2>

 <sect2 xml:id="migration84.new-features.pdo-mysql">
  <title>Драйвер PDO_MYSQL</title>

  <!-- RFC: https://wiki.php.net/rfc/pdo_driver_specific_parsers -->
  <para>
   Добавили пользовательский парсер, который поддерживает:
   <simplelist>
    <member>
     литералы в одинарных и двойных кавычках с удвоением и обратным слешем
     в качестве механизма экранирования
    </member>
    <member>
     литеральные идентификаторы с обратными машинописными апострофами, или обратными кавычками,
     с удвоением в качестве механизма экранирования
    </member>
    <member>
     комментарии, которые начинаются с двух дефисов, за которыми следует как минимум один пробел,
     невложенные комментарии в стиле языка C и комментарии, которые начинаются с символа решётки
    </member>
   </simplelist>
  </para>
 </sect2>

 <sect2 xml:id="migration84.new-features.pdo-pgsql">
  <title>Драйвер PDO_PGSQL</title>

  <!-- RFC: https://wiki.php.net/rfc/pdo_driver_specific_parsers -->
  <para>
   Добавили пользовательский парсер, который поддерживает:
   <simplelist>
    <member>
     литералы в одинарных и двойных кавычках с удвоением в качестве механизма экранирования
    </member>
    <member>
     «экранирование» строковых литералов в стиле языка C: <literal>E'string'</literal>
    </member>
    <member>
     строковые литералы между знаками долларов
    </member>
    <member>
     Комментарии, которые начинаются с двух дефисов, и невложенные комментарии в стиле языка C
    </member>
    <member>
     экранирование оператора <literal>?</literal>
     последовательностью символов <literal>??</literal>
    </member>
   </simplelist>
  </para>
 </sect2>

 <sect2 xml:id="migration84.new-features.pdo-sqlite">
  <title>Драйвер PDO_SQLITE</title>

  <!-- RFC: https://wiki.php.net/rfc/pdo_driver_specific_parsers -->
  <para>
   Добавили пользовательский парсер, который поддерживает:
   <simplelist>
    <member>
     литералы в одинарных, двойных и обратных кавычках с удвоением в качестве
     механизма экранирования
    </member>
    <member>
     идентификаторы в квадратных скобках
    </member>
    <member>
     Комментарии, которые начинаются с двух дефисов, и невложенные комментарии в стиле языка C
    </member>
   </simplelist>
  </para>
 </sect2>

 <sect2 xml:id="migration84.new-features.phar">
  <title>Модуль Phar</title>

  <simpara>
   Добавили поддержку модуля меток времени Unix для Zip-архивов.
  </simpara>
 </sect2>

 <sect2 xml:id="migration84.new-features.readline">
  <title>Модуль Readline</title>

  <simpara>
   Добавили поддержку изменения пути <literal>.php_history</literal>
   через переменную окружения <envar>PHP_HISTFILE</envar>.
  </simpara>
 </sect2>

 <sect2 xml:id="migration84.new-features.reflection">
  <title>Модуль Reflection</title>

  <simpara>
   Класс <classname>ReflectionAttribute</classname> теперь содержит
   свойство <property>name</property>, чтобы улучшить опыт отладки.
  </simpara>

  <simpara>
   Методы <methodname>ReflectionClassConstant::__toString</methodname>
   и <methodname>ReflectionProperty::__toString</methodname> теперь возвращают
   комментарии, которые прикрепили к документу.
  </simpara>

  <!-- RFC: https://wiki.php.net/rfc/lazy-objects -->
  <para>
   Добавили новые методы и константы ленивых объектов:

   <simplelist>
    <member>
     <methodname>ReflectionClass::newLazyGhost</methodname>
    </member>
    <member>
     <methodname>ReflectionClass::newLazyProxy</methodname>
    </member>
    <member>
     <methodname>ReflectionClass::resetAsLazyGhost</methodname>
    </member>
    <member>
     <methodname>ReflectionClass::resetAsLazyProxy</methodname>
    </member>
    <member>
     <methodname>ReflectionClass::isUninitializedLazyObject</methodname>
    </member>
    <member>
     <methodname>ReflectionClass::initializeLazyObject</methodname>
    </member>
    <member>
     <methodname>ReflectionClass::markLazyObjectAsInitialized</methodname>
    </member>
    <member>
     <methodname>ReflectionClass::getLazyInitializer</methodname>
    </member>
    <member>
     <methodname>ReflectionProperty::skipLazyInitialization</methodname>
    </member>
    <member>
     <methodname>ReflectionProperty::setRawValueWithoutLazyInitialization</methodname>
    </member>
    <member>
     <constant>ReflectionClass::SKIP_INITIALIZATION_ON_SERIALIZE</constant>
    </member>
    <member>
     <constant>ReflectionClass::SKIP_DESTRUCTOR</constant>
    </member>
   </simplelist>
  </para>
 </sect2>

 <sect2 xml:id="migration84.new-features.soap">
  <title>Модуль SOAP</title>

  <simpara>
   Добавили поддержку нотации Кларка для пространств имён в карте классов.

   В карте классов теперь разрешается указывать записи в нотации Кларка,
   чтобы тип с конкретным пространством имён разрешался в конкретным класс.
   Например: <code>'{http://example.com}foo' => 'FooClass'</code>.
  </simpara>

  <simpara>
   Экземпляры интерфейса <interfacename>DateTimeInterface</interfacename>, которые
   передали в <literal>xsd:datetime</literal> или похожие элементы, теперь
   сериализуются как таковые, а не как пустая строка.
  </simpara>

  <simpara>
   Сохранение сессий теперь работает с общим модулем сессий.
  </simpara>
 </sect2>

 <sect2 xml:id="migration84.new-features.standard">
  <title>Стандартные модули</title>

  <!-- RFC: https://wiki.php.net/rfc/correctly_name_the_rounding_mode_and_make_it_an_enum -->
  <simpara>
   <!-- Should this use <enumname> -->
   Добавили новое перечисление <classname>RoundingMode</classname> с понятными названиями
   и улучшенной по сравнению с константами семейства
   <constant>PHP_ROUND_<replaceable>*</replaceable></constant> обнаруживаемостью.
   Более того, добавили четыре новых режима округления,
   которые доступны только через новое перечисление <classname>RoundingMode</classname>.
  </simpara>
 </sect2>

 <sect2 xml:id="migration84.new-features.xsl">
  <title>Модуль XSL</title>

  <simpara>
   Разрешили параметры, которые содержат как одинарные, так и двойные кавычки.
  </simpara>

  <!-- RFC: https://wiki.php.net/rfc/improve_callbacks_dom_and_xsl -->
  <simpara>
   В метод <methodname>XSLTProcessor::registerPhpFunctions</methodname>
   разрешили передавать callable-значения не только в виде строк или массивов,
   но и в других форматах, которые поддерживает PHP.
   <!-- TODO Mention XSLTProcessor::registerPHPFunctionNS ? -->
  </simpara>

  <simpara>
   Добавили свойства <property>XSLTProcessor::$maxTemplateDepth</property>
   и <property>XSLTProcessor::$maxTemplateVars</property>
   для управления глубиной рекурсии при оценке XSL-шаблона.
  </simpara>
 </sect2>

 <sect2 xml:id="migration84.new-features.zip">
  <title>Модуль Zip</title>

  <simpara>
   Добавили константу <constant>ZipArchive::ER_TRUNCATED_ZIP</constant>,
   которую прежде добавили в библиотеку libzip 1.11.
  </simpara>
 </sect2>

</sect1>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
