<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 459c0e1de40c71062731abb431ec1c9f74b2aaf2 Maintainer: rjhdby Status: ready -->
<!-- Reviewed: no -->
<sect1 xml:id="migration71.new-features" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>Новые возможности</title>

 <sect2 xml:id="migration71.new-features.nullable-types">
  <title>Обнуляемые типы</title>

  <para>
   Типы для параметров и возвращаемых значений могут быть помечены как
   обнуляемые путём добавления префикса в виде знака вопроса.
   Это означает, что указанные параметры и возвращаемые значения, могут
   быть как указанного типа, так и &null;.
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php

function testReturn(): ?string
{
    return 'elePHPant';
}

var_dump(testReturn());

function testReturn(): ?string
{
    return null;
}

var_dump(testReturn());

function test(?string $name)
{
    var_dump($name);
}

test('elePHPant');
test(null);
test();
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
string(10) "elePHPant"
NULL
string(10) "elePHPant"
NULL
Uncaught Error: Too few arguments to function test(), 0 passed in...
]]>
   </screen>
  </informalexample>
 </sect2>

 <sect2 xml:id="migration71.new-features.void-functions">
  <title>Ничего не возвращающие функции</title>

  <para>
   Был добавлен тип возвращаемого значения <type>void</type>. Функции с
   таким заданным типом возвращаемого значения не должны ничего возвращать.
   То есть либо вообще не содержать ни одного оператора return, либо использовать его без
   параметра. &null; не является корректным значением для возврата в
   таких функциях.
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
function swap(&$left, &$right): void
{
    if ($left === $right) {
        return;
    }

    $tmp = $left;
    $left = $right;
    $right = $tmp;
}

$a = 1;
$b = 2;
var_dump(swap($a, $b), $a, $b);
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
null
int(2)
int(1)
]]>
   </screen>
  </informalexample>

  <para>
   Попытка использовать возвращаемое значение таких функций приведёт к тому,
   что это значение будет считаться за &null;, без вывода предупреждения.
   Причина этого в том, что предупреждения будут вызывать общих функций
   высшего порядка.
  </para>
 </sect2>

 <sect2 xml:id="migration71.new-features.symmetric-array-destructuring">
  <title>Симметричная деструктуризация массива</title>

  <para>
   Можно использовать короткий синтаксис (<literal>[]</literal>) для деструктуризации
   массивов с целью присвоения (в том числе в <literal>foreach</literal>), как альтернатива
   функции <function>list</function>, которая, впрочем, всё ещё поддерживается.
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
$data = [
    [1, 'Tom'],
    [2, 'Fred'],
];

// используя list()
list($id1, $name1) = $data[0];

// используя []
[$id1, $name1] = $data[0];

// используя list()
foreach ($data as list($id, $name)) {
    // код, содержащий $id и $name
}

// используя []
foreach ($data as [$id, $name]) {
    // код, содержащий $id и $name
}
]]>
   </programlisting>
  </informalexample>
 </sect2>

 <sect2 xml:id="migration71.new-features.class-constant-visibility">
  <title>Видимость констант класса</title>

  <para>
   Добавлена поддержка определения области видимости для констант класса.
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
class ConstDemo
{
    const PUBLIC_CONST_A = 1;
    public const PUBLIC_CONST_B = 2;
    protected const PROTECTED_CONST = 3;
    private const PRIVATE_CONST = 4;
}
]]>
   </programlisting>
  </informalexample>
 </sect2>

 <sect2 xml:id="migration71.new-features.iterable-pseudo-type">
  <title>Псевдотип <type>iterable</type></title>

  <para>
   Был добавлен новый псевдотип (похожий на <type>callable</type>), названный
   <type>iterable</type>. Он может использоваться как параметр, так и в качестве
   возвращаемого значения там, где используется массив или объект,
   реализующий интерфейс <classname>Traversable</classname>.
   Что касается подтипов, типы параметров из дочерних классов могут расширить
   декларацию родителей типа <type>array</type> или <classname>Traversable</classname>
   до <type>iterable</type>. Для типов возврата, дочерние классы могут сужать тип
   возвращаемого значения с <type>iterable</type> до <type>array</type> или объекта
   реализующего <classname>Traversable</classname>.
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
function iterator(iterable $iter)
{
    foreach ($iter as $val) {
        //
    }
}
]]>
   </programlisting>
  </informalexample>
 </sect2>

 <sect2 xml:id="migration71.new-features.mulit-catch-exception-handling">
  <title>Обработка нескольких исключений в одном блоке catch</title>

  <para>
   В блоке catch теперь можно обрабатывать несколько исключений, перечисляя их
   через символ вертикальной черты (<literal>|</literal>). Это может быть полезно,
   если различные исключения обрабатываются одинаково.
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
try {
    // Какой то код
} catch (FirstException | SecondException $e) {
    // Обрабатываем оба исключения
}
]]>
   </programlisting>
  </informalexample>
 </sect2>

 <sect2 xml:id="migration71.new-features.support-for-keys-in-list">
  <title>Поддержка ключей в <function>list</function></title>

  <para>
   Теперь вы можете указывать ключи в операторе <function>list</function> или в
   его новом коротком синтаксисе <literal>[]</literal>. Это позволяет деструктурировать
   массивы с нечисловыми или непоследовательными ключами.
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
$data = [
    ["id" => 1, "name" => 'Tom'],
    ["id" => 2, "name" => 'Fred'],
];

// стиль list()
list("id" => $id1, "name" => $name1) = $data[0];

// стиль []
["id" => $id1, "name" => $name1] = $data[0];

// стиль list()
foreach ($data as list("id" => $id, "name" => $name)) {
    // logic here with $id and $name
}

// стиль []
foreach ($data as ["id" => $id, "name" => $name]) {
    // logic here with $id and $name
}
]]>
   </programlisting>
  </informalexample>
 </sect2>

 <sect2 xml:id="migration71.new-features.support-for-negative-string-offsets">
  <title>Поддержка отрицательных смещений для строк</title>

  <para>
   Поддержка отрицательных смещений для строк добавлена в
   <link linkend="book.strings">функции для работы со строками</link>, а также в
   <link linkend="language.types.string.substr">индексацию строк</link> с помощью
   <literal>[]</literal> или <literal>{}</literal>. В этих случаях отрицательные
   смещения интерпретируются как смещения относительно конца строки.
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
var_dump("abcdef"[-2]);
var_dump(strpos("aabbcc", "b", -3));
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
string (1) "e"
int(3)
]]>
   </screen>
  </informalexample>

  <para>
   Теперь поддерживаются отрицательные смещения в простом синтаксисе указания индекса
   в строках и массивах.
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
$string = 'bar';
echo "Последний символ '$string' - '$string[-1]'.\n";
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
Последний символ 'bar' - 'r'.
]]>
   </screen>
  </informalexample>
 </sect2>

 <sect2 xml:id="migration71.new-features.support-for-aead-in-ext-openssl">
  <title>Поддержка AEAD в ext/openssl</title>

  <para>
   Поддержка AEAD (режимы GCM и CCM) была добавлена путём расширения функций
   <function>openssl_encrypt</function> и
   <function>openssl_decrypt</function> дополнительными параметрами.
  </para>
 </sect2>

 <sect2 xml:id="migration71.new-features.convert-callables-to-closures">
  <title>Преобразование callable в <classname>Closure</classname> с помощью <methodname>Closure::fromCallable</methodname></title>

  <para>
   В класс <classname>Closure</classname> добавлен новый статический метод
   для возможности легко преобразовать <type>callable</type> в объекты типа
   <classname>Closure</classname>.
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
class Test
{
    public function exposeFunction()
    {
        return Closure::fromCallable([$this, 'privateFunction']);
    }

    private function privateFunction($param)
    {
        var_dump($param);
    }
}

$privFunc = (new Test)->exposeFunction();
$privFunc('значение');
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
string(16) "значение"
]]>
   </screen>
  </informalexample>
 </sect2>

 <sect2 xml:id="migration71.new-features.asynchronous-signal-handling">
  <title>Асинхронная обработка сигналов</title>

  <para>
   Новая функция <function>pcntl_async_signals</function> была добавлена
   для разрешения асинхронной обработки сигналов без использования тиков
   (которые производят много накладных расходов).
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
pcntl_async_signals(true); // включает асинхронные сигналы

pcntl_signal(SIGHUP,  function($sig) {
    echo "SIGHUP\n";
});

posix_kill(posix_getpid(), SIGHUP);
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
SIGHUP
]]>
   </screen>
  </informalexample>
 </sect2>

 <sect2 xml:id="migration71.new-features.http2-server-push-support-in-ext-curl">
  <title>Поддержка HTTP/2 server push в ext/curl</title>

  <para>
   Поддержка "server push" добавлена в модуль CURL (требуется версия 7.46 и выше).
   Использовать можно в функции <function>curl_multi_setopt</function> с новой
   константой <constant>CURLMOPT_PUSHFUNCTION</constant>. Также добавлены константы
   <constant>CURL_PUSH_OK</constant> и <constant>CURL_PUSH_DENY</constant> для
   определения, был ли принят или отклонён "server push".
  </para>
 </sect2>

  <sect2 xml:id="migration71.new-features.stream-context-options">
  <title>Контекстные опции потока</title>

  <para>
   Была добавлена опция контекста потока <link linkend="context.socket.tcp_nodelay">tcp_nodelay</link>.
  </para>
 </sect2>
</sect1>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
