<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 86e6094e86b84a51d00ab217ac50ce8dde33d82a Maintainer: rjhdby Status: ready -->
<!-- Reviewed: no -->
<sect1 xml:id="migration71.incompatible">
 <title>Изменения, ломающие обратную совместимость</title>

 <sect2 xml:id="migration71.incompatible.too-few-arguments-exception">
  <title>Вызов исключения при передаче функции недостаточного количества аргументов</title>

  <para>
   Ранее, если пользовательская функция вызывалась с недостаточным количеством
   аргументов, выдавалось предупреждение. Теперь же, вместо предупреждения будет
   вызываться исключение класса Error. Это изменение затрагивает только пользовательские
   функции и не оказывает влияния на встроенные. Например:
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
function test($param){}
test();
]]>
   </programlisting>
   &example.outputs.similar;
   <screen>
<![CDATA[
Fatal error: Uncaught ArgumentCountError: Too few arguments to function test(), 0 passed in %s on line %d and exactly 1 expected in %s:%d
]]>
   </screen>
  </informalexample>
 </sect2>

 <sect2 xml:id="migration71.incompatible.forbid-dynamic-calls-to-scope-introspection-functions">
  <title>Запрет динамического вызова функций интроспекции области видимости</title>

  <para>
   Динамические вызовы определённых функций были запрещены (в виде
   <literal>$func()</literal> или <literal>array_map('extract', ...)</literal>, и т.д.)
   Эти функции проверяют или модифицируют объекты другой области видимости, чем
   вызывают неоднозначное и неопределённое поведение.
   Список таких функций:
  </para>

  <itemizedlist>
   <listitem>
    <simpara>
     <function>assert</function> - со строкой в качестве первого аргумента
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <function>compact</function>
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <function>extract</function>
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <function>func_get_args</function>
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <function>func_get_arg</function>
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <function>func_num_args</function>
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <function>get_defined_vars</function>
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <function>mb_parse_str</function> - с одним аргументом
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <function>parse_str</function> - с одним аргументом
    </simpara>
   </listitem>
  </itemizedlist>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
(function () {
    $func = 'func_num_args';
    $func();
})();
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
Warning: Cannot call func_num_args() dynamically in %s on line %d
]]>
   </screen>
  </informalexample>
 </sect2>

 <sect2 xml:id="migration71.incompatible.invalid-class-names">
  <title>Некорректные имена классов, интерфейсов и трейтов</title>

  <para>
   Следующие имена нельзя использовать как имена классов, интерфейсов или трейтов:
  </para>

  <itemizedlist>
   <listitem>
    <simpara><type>void</type></simpara>
   </listitem>
   <listitem>
    <simpara><type>iterable</type></simpara>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration71.incompatible.numerical-strings-scientific-notation">
  <title>Преобразование числовых строк теперь учитывает научную нотацию</title>

  <para>
   Целочисленные операции и конвертации числовых строк теперь учитывают научную нотацию,
   включая приведение <literal>(int)</literal> и следующие функции:
   <function>intval</function> (с базой 10), <function>settype</function>,
   <function>decbin</function>, <function>decoct</function> и <function>dechex</function>.
  </para>
 </sect2>

 <sect2 xml:id="migration71.incompatible.fixes-to-mt_rand-algorithm">
  <title>Исправление алгоритма <function>mt_rand</function></title>

  <para>
   <function>mt_rand</function> теперь по умолчанию использует зафиксированную версию
   алгоритма "Вихрь Мерсена". Если вы полагались на детерминированный вывод
   <function>mt_srand</function>, для сохранения старого (неправильного) поведения,
   можно использовать константу <constant>MT_RAND_PHP</constant> в качестве второго,
   необязательного, параметра <function>mt_srand</function>.
  </para>
 </sect2>

 <sect2 xml:id="migration71.incompatible.rand-srand-aliases">
  <title>
   <function>rand</function> псевдоним для <function>mt_rand</function> и
   <function>srand</function> псевдоним для <function>mt_srand</function>
  </title>

  <para>
   <function>rand</function> и <function>srand</function> теперь являются просто синонимами
   для <function>mt_rand</function> и <function>mt_srand</function>.
   Это означает, что вывод следующих функций изменился: <function>rand</function>,
   <function>shuffle</function>, <function>str_shuffle</function> и
   <function>array_rand</function>.
  </para>
 </sect2>

 <sect2 xml:id="migration71.incompatible.delete-control-character-in-identifiers">
  <title>Запрет использовать символ удаления из таблицы ASCII в идентификаторах</title>

  <para>
   Символ удаления ASCII (<literal>0x7F</literal>) больше нельзя использовать в
   идентификаторах, не обёрнутых в кавычки.
  </para>
 </sect2>

 <sect2 xml:id="migration71.incompatible.error_log-syslog">
  <title>
   Значение <parameter>error_log</parameter> изменено на <literal>syslog</literal>
  </title>

  <para>
   Если ini-параметр <parameter>error_log</parameter> установлен как
   <literal>syslog</literal>, то уровни ошибок PHP проецируются на уровни ошибок "syslog".
   Это позволяет более тонко логировать события, а не как раньше, когда все они
   записывались с уровнем "notice".
  </para>
 </sect2>

 <sect2 xml:id="migration71.incompatible.dont-call-destructors">
  <title>Деструкторы не вызываются на незавершённых объектах</title>

  <para>
   Теперь деструкторы никогда не вызываются, если было вызвано исключение в
   конструкторе объекта. Раньше это поведение зависело от того, была ли ссылка на
   объект вне конструктора (например, в трассировке исключения).
  </para>
 </sect2>

 <sect2 xml:id="migration71.incompatible.call_user_func-with-ref-args">
  <title>
   <function>call_user_func</function> обрабатывает ссылки на аргументы
  </title>

  <para>
   Теперь <function>call_user_func</function> всегда вызывает предупреждение,
   если вызывается функция, ожидающая ссылки в качестве параметров.
   Ранее это зависело от того, был ли вызов полностью определённым.
  </para>
  <para>
   Кроме того, <function>call_user_func</function> и
   <function>call_user_func_array</function> больше не прекращают выполнение функции в
   этом случае. Предупреждение "expected reference" будет вызвано, но сама функция
   продолжит выполнение.
  </para>
 </sect2>

 <sect2 xml:id="migration71.incompatible.empty-string-index-operator">
  <title>
   Оператор пустого индекса более не применим к строкам
  </title>

  <para>
   Применение оператора пустого индекса к строке (<literal>$str[] = $x</literal>)
   вызывает фатальную ошибку вместо тихого преобразования переменной к массиву.
  </para>
 </sect2>

 <sect2 xml:id="migration71.incompatible.empty-string-modifcation-by-character">
  <title>Присвоение через механизм доступа к элементу строки по индексу применительно к пустой строке</title>
  <para>
   Модификация символа в пустой строке  теперь работает так же как и для не пустой.
   Т.е. запись по несуществующему смещению приведёт к преобразованию не целочисленного
   значения смещения к целому числу, дополнению строки до нужной длины символами
   пробела и использованию только первого символа из присваиваемой строки. Раньше,
   в такой ситуации, пустая строка рассматривалась как пустой массив.
   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
$a = '';
$a[10] = 'foo';
var_dump($a);
?>
]]>
    </programlisting>
    &example.outputs.70;
    <screen>
<![CDATA[
array(1) {
  [10]=>
  string(3) "foo"
}
]]>
    </screen>
    &example.outputs.71;
    <screen>
<![CDATA[
string(11) "          f"
]]>
    </screen>
   </informalexample>
  </para>
 </sect2>

 <sect2 xml:id="migration71.incompatible.removed-ini-directives">
  <title>Удалённые ini-директивы</title>

  <para>
   Следующие ini-директивы были удалены:
  </para>

  <itemizedlist>
   <listitem>
    <simpara>
     <parameter>session.entropy_file</parameter>
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <parameter>session.entropy_length</parameter>
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <parameter>session.hash_function</parameter>
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <parameter>session.hash_bits_per_character</parameter>
    </simpara>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration71.incompatible.array-order">
  <title>
   Порядок массива, когда элементы созданы автоматически через присвоение по ссылке, был
   изменён
  </title>

  <para>
   Порядок расположения элементов массива, создаваемых присвоением по ссылке не созданных
   на момент присвоения элементов, был изменён.
   К примеру:
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
$array = [];
$array["a"] =& $array["b"];
$array["b"] = 1;
var_dump($array);
?>
]]>
   </programlisting>
   &example.outputs.70;
   <screen>
<![CDATA[
array(2) {
  ["a"]=>
  &int(1)
  ["b"]=>
  &int(1)
}
]]>
   </screen>
   &example.outputs.71;
   <screen>
<![CDATA[
array(2) {
  ["b"]=>
  &int(1)
  ["a"]=>
  &int(1)
}
]]>
   </screen>
  </informalexample>
 </sect2>
 <sect2 xml:id="migration71.incompatible.sort-order">
  <title>Порядок сортировки эквивалентных элементов</title>
  <para>
   Внутренний алгоритм сортировки был улучшен, что может привести
   к отличию в порядке расположения эквивалентных элементов
   после сортировки по сравнению с предыдущими версиями PHP.
  </para>
  <note>
   <para>
    Не полагайтесь на порядок расположения эквивалентных элементов, так как
    он может в любой момент измениться.
   </para>
  </note>
 </sect2>
 <sect2 xml:id="migration71.incompatible.e-recoverable">
  <title>Сообщения для ошибок E_RECOVERABLE</title>
  <para>
   Сообщения для ошибок E_RECOVERABLE изменено с "Catchable
   fatal error" на "Recoverable fatal error".
  </para>
 </sect2>

 <sect2 xml:id="migration71.incompatible.unserialize">
  <title>Параметр $options функции unserialize()</title>
  <para>
   Теперь элемент <literal>allowed_classes</literal> параметра $options функции
   <function>unserialize</function> строго типизирован, то есть если передать
   значение с типом, отличным от <type>array</type> и <type>bool</type>,
   то unserialize() вернёт &false; и вызовет ошибку уровня <constant>E_WARNING</constant>.
  </para>
 </sect2>

 <sect2 xml:id="migration71.incompatible.datetime-microseconds">
  <title>Конструктор DateTime использует микросекунды</title>
  <para>
   Теперь <classname>DateTime</classname> и <classname>DateTimeImmutable</classname>
   используют микросекунды при создании с текущим временем, либо в явном виде,
   либо со строкой относительного времени (например, <literal>"first day of next
   month"</literal>). Это означает, что сравнение двух подряд созданных экземпляров
   класса скорее будет возвращать &false; нежели &true;:
   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
new DateTime() == new DateTime();
?>
]]>
    </programlisting>
   </informalexample>
  </para>
 </sect2>

 <sect2 xml:id="migration71.incompatible.fatal-errors-to-error-exceptions">
  <title>Вызов исключений <classname>Error</classname> вместо фатальных ошибок</title>
  <para>
   Для модуля Date при некорректных данных сериализации классов
   <classname>DateTime</classname> или <classname>DatePeriod</classname>,
   или ошибки инициализации часового пояса из сериализованных данных, будет
   выбрасываться исключение <classname>Error</classname> из методов
   <methodname>__wakeup</methodname> или <methodname>__set_state</methodname>,
   вместо вызова фатальной ошибки.
  </para>

  <para>
   В модуле DBA функции манипулирования данными (такие как
   <function>dba_insert</function>) теперь будут выбрасывать исключение
   <classname>Error</classname> вместо вызова отлавливаемой фатальной ошибки
   если ключ не содержит ровно двух элементов.
  </para>

  <para>
   В модуле DOM некорректная проверка контекста схемы или RelaxNG
   теперь будут выбрасывать исключение <classname>Error</classname> вместо вызова
   фатальной ошибки. Аналогичным образом, попытки зарегистрировать класс узла, который не расширяет
   правильный базовый класс, попытки прочитать некорректное свойство или перезаписать
   свойство доступное только для чтения будут выбрасывать исключение
   <classname>Error</classname>.
  </para>

  <para>
   В модуле IMAP адрес email длиннее 16385 байт теперь будет выбрасывать исключение
   <classname>Error</classname> вместо вызова фатальной ошибки.
  </para>

  <para>
   Модуль Intl в случае возникновения ошибки вызова родительского конструктора в классе,
   наследующем <classname>Collator</classname> до вызова родительских методов
   теперь будет выбрасывать исключение <classname>Error</classname> вместо вызова
   фатальной ошибки. Кроме того, клонирование объекта <classname>Transliterator</classname>
   теперь будет выбрасывать исключение <classname>Error</classname> в случае возникновения ошибки
   клонирования внутреннего transliterator вместо вызова фатальной ошибки.
  </para>

  <para>
   Модуль LDAP при указании неизвестного типа модификации в
   <function>ldap_batch_modify</function> теперь будет выбрасывать исключение
   <classname>Error</classname> вместо вызова фатальной ошибки.
  </para>

  <para>
   В модуле mbstring функции <function>mb_ereg</function> и
   <function>mb_eregi</function> теперь будут выбрасывать исключение
   <classname>ParseError</classname> в случае некорректного регулярного выражения
   либо в случае использования опции 'e'.
  </para>

  <para>
   В модуле Mcrypt <function>mcrypt_encrypt</function> и
   <function>mcrypt_decrypt</function> теперь будет выбрасывать исключение
   <classname>Error</classname> вместо вызова фатальной ошибки, если mcrypt
   не инициализирован.
  </para>

  <para>
   В модуле mysqli попытки прочитать некорректное свойство или перезаписать
   свойство доступное только для чтения будут выбрасывать исключение
   <classname>Error</classname> вместо вызова фатальной ошибки.
  </para>

  <para>
   В модуле Reflection неудачное извлечение отражённого объекта или свойства объекта
   будут выбрасывать исключение
   <classname>Error</classname> вместо вызова фатальной ошибки.
  </para>

  <para>
   В модуле сессий пользовательские обработчики сессии, которые не возвращают строку
   для идентификатора сессии, будут выбрасывать исключение
   <classname>Error</classname> вместо вызова фатальной ошибки, когда будет
   вызвана функция для генерации идентификатора.
  </para>

  <para>
   В модуле SimpleXML попытка создания безымянного либо дублирующего атрибута
   будет выбрасывать исключение
   <classname>Error</classname> вместо вызова фатальной ошибки.
  </para>

  <para>
   В модуле SPL попытка клонировать объект
   <classname>SplDirectory</classname> будет выбрасывать исключение
   <classname>Error</classname> вместо вызова фатальной ошибки. Аналогично,
   вызов <methodname>ArrayIterator::append</methodname> когда итерация объекта
   закончена будет выбрасывать исключение
   <classname>Error</classname>.
  </para>

  <para>
   Функция <function>assert</function>, когда ей передан строковый аргумент
   первым параметром, теперь будет выбрасывать исключение
   <classname>ParseError</classname> вместо вызова отлавливаемой фатальной ошибки,
   если PHP-код некорректен. Аналогично, вызов <function>forward_static_call</function> за
   пределами пространства класса будет выбрасывать исключение
   <classname>Error</classname>.
  </para>

  <para>
   В модуле Tidy ручное создание <classname>tidyNode</classname> будет выбрасывать
   исключение <classname>Error</classname>.
  </para>

  <para>
   В модуле WDDX циклические ссылки при сериализации будут выбрасывать исключение
   <classname>Error</classname> вместо вызова фатальной ошибки.
  </para>

  <para>
   В модуле XML-RPC циклические ссылки при сериализации будут выбрасывать
   исключение
   <classname>Error</classname> вместо вызова фатальной ошибки.
  </para>

  <para>
   В модуле Zip метод <methodname>ZipArchive::addGlob</methodname>
   будет выбрасывать исключение <classname>Error</classname> вместо вызова
   фатальной ошибки, если отсутствует поддержка glob.
  </para>
 </sect2>

 <sect2 xml:id="migration71.incompatible.lexical-names">
  <title>Лексически связанные переменные не могут переиспользовать имена</title>

  <para>
   Переменные, привязанные к <link linkend="functions.anonymous">замыканию</link>
   через конструкцию <literal>use</literal>, не могут использовать те же имена, что и
   любые &link.superglobals;, <varname>$this</varname> или параметры. К примеру,
   все приведённые функции вызовут фатальную ошибку:
   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
$f = function () use ($_SERVER) {};
$f = function () use ($this) {};
$f = function ($param) use ($param) {};
]]>
    </programlisting>
   </informalexample>
  </para>
 </sect2>
 <sect2 xml:id="migration71.incompatible.long2ip">
  <title>Изменён тип параметра long2ip()</title>
  <para>
   Теперь <function>long2ip</function> ожидает параметр типа <type>int</type> а не
   <type>string</type>.
  </para>
 </sect2>

 <sect2 xml:id="migration71.incompatible.json">
  <title>Кодирование и декодирование JSON</title>
  <para>
   INI-настройка  <parameter>serialize_precision</parameter> определяет точность сериализации
   при кодировании значений типа <type>float</type>.
  </para>
  <para>
   Теперь декодирование пустого ключа приводит к появлению свойства с пустым именем,
   раньше имя свойства приводилось к значению <literal>_empty_</literal>.

   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
var_dump(json_decode(json_encode(['' => 1])));
]]>
    </programlisting>
    &example.outputs.similar;
    <screen>
<![CDATA[
object(stdClass)#1 (1) {
  [""]=>
  int(1)
}
]]>
    </screen>
   </informalexample>
  </para>
  <para>
   При передаче флага <constant>JSON_UNESCAPED_UNICODE</constant> в функцию
   <function>json_encode</function> последовательности U+2028 и U+2029 будут экранированы.
  </para>
 </sect2>

 <sect2 xml:id="migration71.incompatible.mbstring">
  <title>
   Изменение в семантике параметров <function>mb_ereg</function> и <function>mb_eregi</function>
  </title>
  <para>
   Третий параметр функций <function>mb_ereg</function> и
   <function>mb_eregi</function>  (<parameter>regs</parameter>) теперь устанавливается
   равным пустому массиву, если не было найдено совпадений. Ранее параметр
   оставался неизменным.
  </para>
 </sect2>

 <sect2 xml:id="migration71.incompatible.openssl">
  <title>Удалена поддержка потока sslv2</title>
  <para>
   Поддержка потока sslv2 в OpenSSL удалена.
  </para>
 </sect2>

 <sect2 xml:id="migration71.incompatible.typed-returns-compile-time">
  <title>Запрещён "return;" для типизированных возвратов уже во время компиляции</title>
  <para>
   Операторы возврата без аргументов в функциях, которые объявляют тип возвращаемого значения,
   теперь вызывают <constant>E_COMPILE_ERROR</constant> (если тип возврата не
   объявлен как <type>void</type>), даже если оператор возврата никогда
   не будет достигнут.
  </para>
 </sect2>
</sect1>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
