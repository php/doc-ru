<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: c308ed37a98decb1959ed47dc149a43d6c71ec60 Maintainer: lex Status: ready -->
<!-- Reviewed: no -->
<sect1 xml:id="migration74.incompatible" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>Изменения, ломающие обратную совместимость</title>

 <sect2 xml:id="migration74.incompatible.core">
  <title>Ядро PHP</title>

  <sect3 xml:id="migration74.incompatible.core.non-array-access">
   <title>Массивоподобное обращение к немассивам</title>

   <para>
    Попытка использовать значения с типом <type>null</type>, <type>bool</type>,
    <type>int</type>, <type>float</type> или <type>resource</type> как массив
    (например, <literal>$null["key"]</literal>) теперь создаст уведомление.
   </para>
  </sect3>

  <sect3 xml:id="migration74.incompatible.core.get-declared-classes">
   <title>Функция <function>get_declared_classes</function></title>

   <para>
    Функция <function>get_declared_classes</function> больше
    не возвращает анонимные классы, которые ещё не были созданы.
   </para>
  </sect3>

  <sect3 xml:id="migration74.incompatible.core.fn">
   <title>Ключевое слово <literal>fn</literal></title>

   <para>
    Литерал <literal>fn</literal> теперь зарезервированное ключевое слово. В частности,
    его больше не разрешено указывать как имя функции или класса.
    Но при этом, этим ключевым словом разрешено назвать имя метода или константы в классе.
   </para>
  </sect3>

  <sect3 xml:id="migration74.incompatible.core.php-tag">
   <title>Тег <literal>&lt;?php</literal> в конце файла</title>

   <para>
    Запись <literal>&lt;?php</literal> в конце файла (без завершающей новой строки)
    теперь будет интерпретироваться как открывающий тег PHP.
    Ранее она обрабатывалась либо как короткий открывающий тег
    с последующим литералом <literal>php</literal>
    и приводил к синтаксической ошибке (при <literal>short_open_tag=1</literal>),
    либо воспринимался как строковый литерал <literal>&lt;?php</literal>
    (в случае <literal>short_open_tag=0</literal>).
   </para>
  </sect3>

  <sect3 xml:id="migration74.incompatible.core.stream-wrappers">
   <title>Потоковые обёртки</title>

   <para>
    При включении данных потока выражениями include или require
    метод <methodname>streamWrapper::stream_set_option</methodname>
    будет вызываться с параметром <constant>STREAM_OPTION_READ_BUFFER</constant>.
    Для пользовательских потоковых обёрток, возможно, потребуется реализация
    метода <methodname>streamWrapper::stream_set_option</methodname>,
    чтобы убрать предупреждение (как правило, хватает только возврата &false;).
   </para>
  </sect3>

  <sect3 xml:id="migration74.incompatible.core.serialization">
   <title>Сериализация</title>

   <para>
    Удалён формат сериализации <literal>o</literal>.
    Поскольку сам PHP им не пользуется, он мог только нарушить десериализацию строк, созданных вручную.
   </para>
  </sect3>

  <sect3 xml:id="migration74.incompatible.core.password-algorithm-constants">
   <title>Константы алгоритма пароля</title>

   <para>
    Идентификаторы алгоритма хеширования паролей теперь обнуляемые строки, а не целые числа.
   </para>

   <itemizedlist>
    <listitem>
     <simpara>
      <constant>PASSWORD_DEFAULT</constant> раньше было целочисленным 1; теперь строка '2y' (в PHP 7.4.0, 7.4.1 и 7.4.2 было &null;)
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <constant>PASSWORD_BCRYPT</constant> раньше было целочисленным 1; теперь строка '2y'
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <constant>PASSWORD_ARGON2I</constant> раньше было целочисленным 2; теперь строка 'argon2i'
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <constant>PASSWORD_ARGON2ID</constant> раньше было целочисленным 3; теперь строка 'argon2id'
     </simpara>
    </listitem>
   </itemizedlist>

   <para>
    Приложения, правильно использующие константы PASSWORD_DEFAULT,
    PASSWORD_BCRYPT, PASSWORD_ARGON2I и PASSWORD_ARGON2ID, будут
    работать как и раньше.
   </para>
  </sect3>

  <sect3 xml:id="migration74.incompatible.core.htmlentities">
   <title>Функция <function>htmlentities</function></title>

   <para>
    Функция <function>htmlentities</function> теперь будет выдавать уведомление
    (вместо предупреждения уровня E_STRICT), если она используется
    с кодировкой, для которой поддерживается только преобразование основных символов.
    В этом случае она эквивалентна использованию <function>htmlspecialchars</function>.
   </para>
  </sect3>

  <sect3 xml:id="migration74.incompatible.core.fread-fwrite">
   <title>Функции <function>fread</function> и <function>fwrite</function></title>

   <para>
    Функции <function>fread</function> и <function>fwrite</function> теперь будут
    возвращать &false;, если операция не удалась.
    Ранее возвращалась пустая строка или 0.
    К ошибкам EAGAIN/EWOULDBLOCK это не относится.
   </para>
   <para>
    Эти функции теперь также вызывают уведомление при неудачном выполнении,
    например, при записи в файловый ресурс, предназначенный только для чтения.
   </para>
  </sect3>

 </sect2>

 <sect2 xml:id="migration74.incompatible.bcmath">
  <title>Вычисления над числами с произвольной точностью BCMath</title>

  <para>
   Теперь функции BCMath будут выдавать предупреждения,
   если передано число с ошибкой, например, <literal>"32foo"</literal>.
   Подобный аргумент, как и раньше, будет интерпретирован как ноль.
  </para>
 </sect2>

 <sect2 xml:id="migration74.incompatible.curl">
  <title>CURL</title>

  <para>
   Попытка сериализации класса <classname>CURLFile</classname> теперь создаст исключение.
   Ранее исключение выбрасывалось только при десериализации.
  </para>
  <para>
   Использование <constant>CURLPIPE_HTTP1</constant> объявлено устаревшим,
   и не будет поддерживаться с версии cURL 7.62.0.
  </para>
  <para>
   Параметр <literal>$version</literal> функции <function>curl_version</function>
   объявлен устаревшим. Если передаётся значение,
   не равное <constant>CURLVERSION_NOW</constant> по умолчанию,
   будет вызвано предупреждение, а параметр проигнорирован.
  </para>
 </sect2>

 <sect2 xml:id="migration74.incompatible.datetime">
  <title>Дата и время</title>

  <para>
   Вызов <function>var_dump</function> или похожей отладочной функции с экземпляром
   <classname>DateTime</classname> или <classname>DateTimeImmutable</classname>
   больше не оставляет после своего выполнения доступных свойств.
  </para>
  <para>
   Сравнение объектов <classname>DateInterval</classname>
   (с использованием <literal>==</literal>, <literal>&lt;</literal> и т.д.) теперь создаёт
   предупреждение и всегда возвращает &false;. Ранее все объекты <classname>DateInterval</classname>
   считались одинаковыми, если у них не было свойств.
  </para>
 </sect2>

 <sect2 xml:id="migration74.incompatible.intl">
  <title>Intl</title>

  <para>
   Значение параметров по умолчанию в функциях <function>idn_to_ascii</function> и
   <function>idn_to_utf8</function> теперь <constant>INTL_IDNA_VARIANT_UTS46</constant>
   вместо устаревшего <constant>INTL_IDNA_VARIANT_2003</constant>.
  </para>
 </sect2>

 <sect2 xml:id="migration74.incompatible.mysqli">
  <title>MySQLi</title>

  <para>
   Функциональность встроенного сервера была удалена. Она была сломана как минимум с PHP 7.0.
  </para>
  <para>
   Недокументированное свойство <literal>mysqli::$stat</literal> было удалено
   в пользу использования <methodname>mysqli::stat</methodname>.
  </para>
 </sect2>

 <sect2 xml:id="migration74.incompatible.openssl">
  <title>OpenSSL</title>

  <para>
   Функция <function>openssl_random_pseudo_bytes</function> теперь будет
   выбрасывать исключение в тех же ситуациях, что и функция <function>random_bytes</function>.
   В частности, выбрасывается исключение <classname>Error</classname>, если количество запрошенных байтов
   меньше или равно нулю. Исключение <classname>Exception</classname> выбрасывается,
   если не получена достаточная случайность.
   Аргумент <literal>$crypto_strong</literal> гарантированно будет равен &true;,
   если функция ничего не выбрасывает, поэтому явно проверять его не нужно.
  </para>
 </sect2>

 <sect2 xml:id="migration74.incompatible.pcre">
  <title>Регулярные выражения (совместимые Perl)</title>

  <para>
   При использовании флага <constant>PREG_UNMATCHED_AS_NULL</constant>,
   завершающие несовпадающие подмаски теперь будут иметь значение &null; (или
   <literal>[null, -1]</literal>, если включено сохранение позиции подмаски).
   Это означает, что размер <literal>$matches</literal> всегда будет одинаковым.
  </para>
 </sect2>

 <sect2 xml:id="migration74.incompatible.pdo">
  <title>Объекты данных PHP (PDO)</title>

  <para>
   Попытка сериализовать экземпляр <classname>PDO</classname> или
   <classname>PDOStatement</classname> теперь создаст
   <classname>Exception</classname>, а не <classname>PDOException</classname>,
   по аналогии с другими внутренними классами, которые не поддерживают сериализацию.
  </para>
 </sect2>

 <sect2 xml:id="migration74.incompatible.reflection">
  <title>Reflection</title>

  <para>
   Объекты Reflection теперь создают исключение, если попробовать
   их сериализовать. Сериализация объектов Reflection никогда не поддерживалась
   и приводила к повреждению объектов Reflection. Сейчас это было явно запрещено.
  </para>

  <para>
   Изменились значения констант классов <classname>ReflectionClassConstant</classname>,
   <classname>ReflectionMethod</classname> и <classname>ReflectionProperty</classname>.
  </para>
 </sect2>

 <sect2 xml:id="migration74.incompatible.spl">
  <title>Стандартная библиотека PHP (SPL)</title>

  <para>
   Вызов <function>get_object_vars</function> с экземпляром
   <classname>ArrayObject</classname> теперь всегда будет возвращать свойства самого
   <classname>ArrayObject</classname> (или подкласса). Ранее он возвращал значения упакованного
   массива/объекта, если не был указан флаг <constant>ArrayObject::STD_PROP_LIST</constant>.
  </para>
  <para>
   Другие затронутые операции:
  </para>
  <itemizedlist>
   <listitem>
    <simpara>
     <methodname>ReflectionObject::getProperties</methodname>
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <function>reset</function>, <function>current</function> и т.д.
     Используйте вместо этого методы <interfacename>Iterator</interfacename>.
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     Вероятно, все остальное работает со свойствами объекта при доступе в виде списка,
     например, <function>array_walk</function>.
    </simpara>
   </listitem>
  </itemizedlist>
  <para>
   На приведение типа <literal>(array)</literal> эти изменения не повлияют.
   Они по-прежнему возвращают либо упакованный массив, либо свойства <classname>ArrayObject</classname>,
   в зависимости от того, используется ли флаг <constant>ArrayObject::STD_PROP_LIST</constant>.
  </para>
  <para>
   Метод <methodname>SplPriorityQueue::setExtractFlags</methodname> выбросит
   исключение, если передан ноль. Ранее это приводило к отлавливаемой
   фатальной ошибке при следующей операции извлечения.
  </para>
  <para>
   <classname>ArrayObject</classname>, <classname>ArrayIterator</classname>,
   <classname>SplDoublyLinkedList</classname> и <classname>SplObjectStorage</classname>
   теперь поддерживают <literal>__serialize()</literal> и  <literal>__unserialize()</literal>
   в дополнение к интерфейсу <interfacename>Serializable</interfacename>.
   Поэтому теперь созданные в более старых версиях PHP сериализованные данные,
   всё ещё могут быть неверно обработаны. Однако новые созданные сериализованные данные в PHP 7.4,
   не будут восприниматься в более старых версиях.
  </para>
 </sect2>

 <sect2 xml:id="migration74.incompatible.tokenizer">
  <title>Лексер (Tokenizer)</title>

  <para>
   Функция <function>token_get_all</function> теперь отобразит метку
   <constant>T_BAD_CHARACTER</constant> в случае обнаружения непредвиденных символов в потоке меток.
  </para>
 </sect2>

 <sect2 xml:id="migration74.incompatible.cookie-decode">
  <title>Входящие Cookies</title>

  <para>
   Начиная с PHP 7.4.11 <emphasis>имена</emphasis> входящих cookie
   больше не декодируются из URL-закодированной строки из соображений безопасности.
  </para>
 </sect2>

</sect1>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
