<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 22583751fbfdaa3eaa41aeb6470d1343f5cb2c78 Maintainer: lex Status: ready -->
<!-- Reviewed: no -->
<sect1 xml:id="migration74.new-features" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>Новые возможности</title>

 <sect2 xml:id="migration74.new-features.core">
  <title>Ядро PHP</title>

  <sect3 xml:id="migration74.new-features.core.typed-properties">
   <title>Типизированные свойства</title>

   <para>
    Свойства класса теперь поддерживают объявления типов.
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php

class User
{
    public int $id;
    public string $name;
}

?>
]]>
     </programlisting>
    </informalexample>
    Приведённый пример показывает, что свойству <literal>$user->id</literal> получится
    присвоить только значения с типом <type>int</type>, тогда как свойству <literal>$user->name</literal> —
    только значения с типом <type>string</type>.
   </para>
  </sect3>

  <sect3 xml:id="migration74.new-features.core.arrow-functions">
   <title>Стрелочные функции</title>

   <para>
    <link linkend="functions.arrow">Стрелочные функции</link> — сокращённая запись для определения функций
    с неявной привязкой родительской области видимости по значению.
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php

$factor = 10;
$nums = array_map(fn ($n) => $n * $factor, [1, 2, 3, 4]);
// $nums = array(10, 20, 30, 40);

?>
]]>
     </programlisting>
    </informalexample>
   </para>
  </sect3>

  <sect3 xml:id="migration74.new-features.core.type-variance">
   <title>Ограниченная ковариация возвращаемого типа и контравариантность типа аргумента</title>

   <para>
    Следующий код теперь будет работать:
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php

class A {}
class B extends A {}

class Producer
{
    public function method(): A {}
}

class ChildProducer extends Producer
{
    public function method(): B {}
}

?>
]]>
     </programlisting>
    </informalexample>
    Полная поддержка вариантности доступна только при автозагрузке классов.
    Нельзя ссылаться на типы циклически внутри одного файла, поскольку при ссылке
    на класс, который пока недоступен, возникает фатальная ошибка.
   </para>
  </sect3>

  <sect3 xml:id="migration74.new-features.core.null-coalescing-assignment-operator">
   <title>Присваивающий оператор объединения с null</title>

   <para>
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php

$array['key'] ??= computeDefault();

// Предыдущая проверка на null с присваиванием — примерно то же, что:
if (!isset($array['key'])) {
    $array['key'] = computeDefault();
}

?>
]]>
     </programlisting>
    </informalexample>
   </para>
  </sect3>

  <sect3 xml:id="migration74.new-features.core.unpack-inside-array">
   <title>Распаковка внутри массивов</title>

   <para>
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php

$parts = ['apple', 'pear'];

$fruits = ['banana', 'orange', ...$parts, 'watermelon'];
// ['banana', 'orange', 'apple', 'pear', 'watermelon'];

?>
]]>
     </programlisting>
    </informalexample>
   </para>
  </sect3>

  <sect3 xml:id="migration74.new-features.core.numeric-literal-separator">
   <title>Разделитель в числовых литералах</title>

   <para>
    Между знаками числовых литералов теперь допускаются символы подчёркивания.
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php

6.674_083e-11; // число с плавающей точкой
299_792_458;   // десятичное число
0xCAFE_F00D;   // шестнадцатеричное число
0b0101_1111;   // двоичное число

?>
]]>
     </programlisting>
    </informalexample>
   </para>
  </sect3>

  <sect3 xml:id="migration74.new-features.core.weakreference">
   <title>Слабые ссылки</title>

   <para>
    <link linkend="class.weakreference">Слабые ссылки</link> разрешают программисту хранить ссылку на объект,
    которая не препятствует уничтожению объекта сборщиком мусора, когда ссылок на объект не осталось.
   </para>
  </sect3>

  <sect3 xml:id="migration74.new-features.core.tostring-exceptions">
   <title>Исключения в магическом методе __toString()</title>

   <para>
    В магическом методе <link linkend="object.tostring">__toString()</link> разрешили
    выбрасывать исключения. Раньше это вызывало фатальную ошибку. Существующие
    отлавливаемые фатальные ошибки при преобразовании объекта в строку преобразовали
    в исключения класса <classname>Error</classname>.
   </para>
  </sect3>

 </sect2>

 <sect2 xml:id="migration74.new-features.curl">
  <title>Модуль cURL</title>

  <para>
   В дополнение к станадртным названиям файлов класс <classname>CURLFile</classname> теперь поддерживает
   потоковые обёртки, если модуль собрали с библиотекой libcurl &gt;= 7.56.0.
  </para>
 </sect2>

 <sect2 xml:id="migration74.new-features.filter">
  <title>Модуль Filter</title>

  <para>
   Фильтр <constant>FILTER_VALIDATE_FLOAT</constant> теперь поддерживает
   параметры <literal>min_range</literal> и <literal>max_range</literal>,
   с тем же смыслом, что и фильтр <constant>FILTER_VALIDATE_INT</constant>.
  </para>
 </sect2>

 <sect2 xml:id="migration74.new-features.ffi">
  <title>Модуль FFI</title>

  <para>
   FFI — новый модуль, который предлагает простой способ вызова
   библиотечных функций, доступа к встроенным переменным
   и способ создавать или обращаться к структурам данных, которые определили в библиотеках на языке Си.
  </para>
 </sect2>

 <sect2 xml:id="migration74.new-features.gd">
  <title>Модуль GD</title>

  <para>
   Добавили константу <constant>IMG_FILTER_SCATTER</constant> для применения рассеивающегося фильтра к изображениям.
  </para>
 </sect2>

 <sect2 xml:id="migration74.new-features.hash">
  <title>Модуль Hash</title>

  <para>
   Добавили поддержку алгоритма <literal>crc32c</literal>, который вычисляет «хеш» на основе полинома Кастаноли.
   С этой реализацией алгоритма CRC32 работают системы хранения наподобие iSCSI, SCTP, Btrfs и ext4.
  </para>
 </sect2>

 <sect2 xml:id="migration74.new-features.mbstring">
  <title>Многобайтовые строки</title>

  <para>
   Добавили функцию <function>mb_str_split</function>, которая выполняет
   то же, что и функция <function>str_split</function>, но работает
   с кодовыми точками, а не с байтами.
  </para>
 </sect2>

 <sect2 xml:id="migration74.new-features.opcache">
  <title>Модуль OPcache</title>

  <para>
   Добавили поддержку <link linkend="opcache.preloading">предварительной загрузки кода</link>.
  </para>
 </sect2>

 <sect2 xml:id="migration74.new-features.pcre">
  <title>Регулярные выражения, совместимые с синтаксисом языка Perl</title>

  <para>
   Функции <function>preg_replace_callback</function> и <function>preg_replace_callback_array</function>
   теперь принимают дополнительный аргумент <parameter>flags</parameter> с поддержкой флагов
   <constant>PREG_OFFSET_CAPTURE</constant> и <constant>PREG_UNMATCHED_AS_NULL</constant>.
   Он повлияет на формат массива совпавших значений, передаваемого в callback-функцию.
  </para>
 </sect2>

 <sect2 xml:id="migration74.new-features.pdo">
  <title>Модуль PDO</title>

  <para>
   Имя пользователя и пароль как часть DSN-строки разрешили указывать
   для драйверов mysql, mssql, sybase, dblib, firebird и oci. Раньше это поддерживалось
   только для драйвера pgsql. Конструктор будет приоритетнее,
   если имя пользователя с паролем указали и в конструкторе, и в DSN-строке.
  </para>
  <para>
   В SQL-запросах разрешили экранировать вопросительные знаки, чтобы
   они не воспринимались как заполнители параметров.
   Запись <literal>??</literal> отправит один знак вопроса в базу данных,
   и разрешит, например при работе с СУБД PostgreSQL, указывать оператор <literal>?</literal>,
   чтобы проверить, содержит ли столбец JSON конкретный ключ.
  </para>
 </sect2>

 <sect2 xml:id="migration74.new-features.pdo_oci">
  <title>Драйвер PDO_OCI</title>

  <para>
   Для драйвера теперь доступен метод <methodname>PDOStatement::getColumnMeta</methodname>.
  </para>
 </sect2>

 <sect2 xml:id="migration74.new-features.pdo_sqlite">
  <title>Драйвер PDO_SQLite</title>

  <para>
   Вызов <literal>PDOStatement::getAttribute(PDO::SQLITE_ATTR_READONLY_STATEMENT)</literal>
   проверит, доступен ли подготовленный запрос только для чтения,
   т. е. не изменяет ли запрос базу данных.
  </para>
  <para>
   При установке <literal>PDO::setAttribute(PDO::SQLITE_ATTR_EXTENDED_RESULT_CODES, true)</literal>
   методы <function>PDO::errorInfo</function> и <function>PDOStatement::errorInfo</function>
   возвращают расширенные коды ошибок СУБД SQLite3.
  </para>
 </sect2>

 <sect2 xml:id="migration74.new-features.sqlite3">
  <title>SQLite3</title>

  <para>
   Добавили метод <methodname>SQLite3::lastExtendedErrorCode</methodname>,
   который получает последний расширенный код ошибки.
  </para>
  <para>
   Добавили метод <literal>SQLite3::enableExtendedResultCodes($enable = true)</literal>,
   который заставит метод <methodname>SQLite3::lastErrorCode</methodname>
   возвращать расширенные коды ошибок.
  </para>
 </sect2>

 <sect2 xml:id="migration74.new-features.standard">
  <title>Стандартные функции языка</title>

  <sect3 xml:id="migration74.new-features.standard.strip-tags">
   <title>Функция strip_tags() с массивом имён тегов</title>
   <para>
    Функция <function>strip_tags</function> теперь также принимает массив разрешённых тегов:
    вместо <literal>strip_tags($str, '&lt;a&gt;&lt;p&gt;')</literal>
    теперь можно написать <literal>strip_tags($str, ['a', 'p'])</literal>.
   </para>
  </sect3>

  <sect3 xml:id="migration74.new-features.standard.magic-serialize">
   <title>Пользовательская сериализация объектов</title>
   <para>
    Добавили новый механизм сериализации пользовательских объектов
    через два новых магических метода: <literal>__serialize</literal>
    и <literal>__unserialize</literal>.
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php

// Метод возвращает массив с данными для сохранения целостного состояния объекта
public function __serialize(): array {}

// Восстанавливает состояние объекта из массива данных
public function __unserialize(array $data): void {}

?>
]]>
     </programlisting>
    </informalexample>
    Новый механизм сериализации заменяет интерфейс <interfacename>Serializable</interfacename>,
    который в будущем объявят устаревшим.
   </para>
  </sect3>

  <sect3 xml:id="migration74.new-features.standard.array-merge-no-args">
   <title>Функции слияния массивов без аргументов</title>
   <para>
    Функции <function>array_merge</function> и <function>array_merge_recursive</function>
    стали поддерживать вызов без аргументов. При вызове без аргументов функции возвращают пустой массив.
    Функции также полезно вызывать с распаковкой аргумента spread-оператором: <literal>array_merge(...$arrays)</literal>.
   </para>
  </sect3>

  <sect3 xml:id="migration74.new-features.standard.proc-open">
   <title>Функция <function>proc_open</function></title>
   <para>
    Функция <function>proc_open</function> теперь принимает массив вместо
    строки для выполнения команды. При таком вызове процесс открывается
    напрямую, без командной оболочки, а PHP экранирует
    аргументы, если потребуется.
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php

proc_open(['php', '-r', 'echo "Привет, мир\n";'], $descriptors, $pipes);

?>
]]>
     </programlisting>
    </informalexample>
   </para>
   <para>
    Функция <function>proc_open</function> теперь поддерживает
    дескрипторы <literal>redirect</literal> и <literal>null</literal>.
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php

// То же самое, что и 2>&1 в командной оболочке
proc_open($cmd, [1 => ['pipe', 'w'], 2 => ['redirect', 1]], $pipes);

// То же самое, что и 2>/dev/null или 2>nul в командной оболочке
proc_open($cmd, [1 => ['pipe', 'w'], 2 => ['null']], $pipes);

?>
]]>
     </programlisting>
    </informalexample>
   </para>
  </sect3>

  <sect3 xml:id="migration74.new-features.standard.sodium-argon-hash">
   <title>Алгоритмы Argon2i и argon2id без библиотеки libargon</title>
   <para>
    Функция <function>password_hash</function> теперь поддерживает варианты хеширования argon2i и argon2id
    из модуля Sodium, если PHP собрали без библиотеки libargon.
   </para>
  </sect3>

 </sect2>

</sect1>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
