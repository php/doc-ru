<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 35511ebc54edd56f1653a6a956210b4728570316 Maintainer: rjhdby Status: ready -->
<!-- Reviewed: no -->
<sect2 xml:id="migration70.incompatible.variable-handling">
 <title>Изменения в обработке переменных</title>

 <para>
  PHP 7 использует абстрактное синтаксическое дерево при
  разборе файлов с исходным кодом. Это позволило внести
  множество улучшений в язык, которые ранее были
  невозможны из-за ограничений парсера, использовавшегося в
  предыдущих версиях PHP, но привело к удалению некоторых
  особых возможностей по соображениям согласованности и
  нарушило обратную совместимость. Описание этих
  особых случаев приведено в этой секции.
 </para>

 <sect3 xml:id="migration70.incompatible.variable-handling.indirect">
  <title>
   Изменения в обработке непрямых переменных, свойств и
   методов
  </title>

  <para>
   Непрямой доступ к переменным, свойствам и методам теперь
   раскрывается строго слева-направо, в противовес
   предыдущему сочетанию из специальных правил. В таблице
   представлены изменения в порядке раскрытия.
  </para>

  <para>
   <table>
    <title>Старая и новая оценка непрямых выражений</title>
    <tgroup cols="3">
     <thead>
      <row>
       <entry>Выражение</entry>
       <entry>Интерпретация PHP 5</entry>
       <entry>Интерпретация PHP 7</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>
        <code>$$foo['bar']['baz']</code>
       </entry>
       <entry>
        <code>${$foo['bar']['baz']}</code>
       </entry>
       <entry>
        <code>($$foo)['bar']['baz']</code>
       </entry>
      </row>
      <row>
       <entry>
        <code>$foo-&gt;$bar['baz']</code>
       </entry>
       <entry>
        <code>$foo-&gt;{$bar['baz']}</code>
       </entry>
       <entry>
        <code>($foo-&gt;$bar)['baz']</code>
       </entry>
      </row>
      <row>
       <entry>
        <code>$foo-&gt;$bar['baz']()</code>
       </entry>
       <entry>
        <code>$foo-&gt;{$bar['baz']}()</code>
       </entry>
       <entry>
        <code>($foo-&gt;$bar)['baz']()</code>
       </entry>
      </row>
      <row>
       <entry>
        <code>Foo::$bar['baz']()</code>
       </entry>
       <entry>
        <code>Foo::{$bar['baz']}()</code>
       </entry>
       <entry>
        <code>(Foo::$bar)['baz']()</code>
       </entry>
      </row>
     </tbody>
    </tgroup>
   </table>
  </para>

  <para>
   Код, использующий старый порядок раскрытия справа-налево,
   должен быть переписан с использованием фигурных скобок
   (смотрите средний столбец в таблице выше). Это сделает код
   рабочим как в PHP 5.x, так и в PHP 7.x.
  </para>
  <para>
   Также это относится и к ключевому слову &global;. Для эмуляции старого
   поведения необходимо использовать фигурные скобки:
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
function f() {
    // Корректно только в PHP 5.
    global $$foo->bar;

    // Корректно в PHP 5 и 7.
    global ${$foo->bar};
}
?>
]]>
   </programlisting>
  </informalexample>
 </sect3>

 <sect3 xml:id="migration70.incompatible.variable-handling.list">
  <title>Изменение в обработке <function>list</function></title>

  <sect4 xml:id="migration70.incompatible.variable-handling.list.order">
   <title>
    <function>list</function> больше не присваивает переменные в обратном порядке
   </title>

   <para>
    Теперь <function>list</function> присваивает переменные в
    том порядке, как они перечислены, а не в обратном. В целом,
    это влияет только на случаи, когда <function>list</function>
    используется совместно с оператором массива
    <code>[]</code>, как показано ниже:
   </para>

   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
list($a[], $a[], $a[]) = [1, 2, 3];
var_dump($a);
?>
]]>
    </programlisting>
    &example.outputs.5;
    <screen>
<![CDATA[
array(3) {
  [0]=>
  int(3)
  [1]=>
  int(2)
  [2]=>
  int(1)
}
]]>
    </screen>
    &example.outputs.7;
    <screen>
<![CDATA[
array(3) {
  [0]=>
  int(1)
  [1]=>
  int(2)
  [2]=>
  int(3)
}
]]>
    </screen>
   </informalexample>

   <para>
    Также хочется отметить, что полагаться на порядок
    присвоения оператором <function>list</function> - не самое
    разумное решение, поскольку он снова может поменяться
    в будущем.
   </para>
  </sect4>

  <sect4 xml:id="migration70.incompatible.variable-handling.list.empty">
   <title>Пустое присвоение <function>list</function> больше не разрешено</title>

   <para>
    Конструкция <function>list</function> больше не может быть
    пустой. Следующие примеры недопустимы:
   </para>

   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
list() = $a;
list(,,) = $a;
list($x, list(), $y) = $a;
?>
]]>
    </programlisting>
   </informalexample>
  </sect4>

  <sect4 xml:id="migration70.incompatible.variable-handling.list.string">
   <title><function>list</function> не может раскрывать строки</title>

   <para>
    <function>list</function> более не может раскрывать
    строки. Используйте <function>str_split</function>.
   </para>
  </sect4>
 </sect3>

 <sect3 xml:id="migration70.incompatible.variable-handling.array-order">
  <title>
   Изменён порядок массива при автоматическом создании через
   присвоение по ссылке
  </title>

  <para>
   Порядок создания элементов в массиве был изменён, когда
   элемент создаётся путём присвоения значения переменной,
   на которую ссылается этот элемент. Пример:
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
$array = [];
$array["a"] =& $array["b"];
$array["b"] = 1;
var_dump($array);
?>
]]>
   </programlisting>
   &example.outputs.5;
   <screen>
<![CDATA[
array(2) {
  ["b"]=>
  &int(1)
  ["a"]=>
  &int(1)
}
]]>
   </screen>
   &example.outputs.7;
   <screen>
<![CDATA[
array(2) {
  ["a"]=>
  &int(1)
  ["b"]=>
  &int(1)
}
]]>
   </screen>
  </informalexample>
 </sect3>

 <sect3 xml:id="migration70.incompatible.variable-handling.parentheses">
  <title>
   Скобки вокруг аргументов функции больше ни на что не влияют</title>

  <para>
   В PHP 5 при использовании избыточных скобок вокруг
   аргументов функции не выводилось предупреждение, когда
   аргумент передавался по ссылке. Теперь предупреждение
   выводится всегда.
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
function getArray() {
    return [1, 2, 3];
}

function squareArray(array &$a) {
    foreach ($a as &$v) {
        $v **= 2;
    }
}

// Выведет предупреждение в PHP 7.
squareArray((getArray()));
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
Notice: Only variables should be passed by reference in /tmp/test.php on line 13
]]>
   </screen>
  </informalexample>
 </sect3>
</sect2>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
