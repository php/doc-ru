<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 86e6094e86b84a51d00ab217ac50ce8dde33d82a Maintainer: rjhdby Status: ready -->
<!-- Reviewed: yes Maintainer: lex -->
<!-- $Revision$ -->
<sect2 xml:id="migration70.incompatible.integers">
 <title>Изменение в обработке значений типа <type>int</type></title>

 <sect3 xml:id="migration70.incompatible.integers.invalid-octals">
  <title>Некорректная восьмеричная нотация</title>

  <para>
   Ранее восьмеричные литералы, содержащие некорректные числа молча
   обрезались (<literal>0128</literal> считались за <literal>012</literal>).
   Сейчас в таких случаях будет выдана ошибка разбора.
  </para>
 </sect3>

 <sect3 xml:id="migration70.incompatible.integers.negative-bitshift">
  <title>Отрицательные побитовые смещения</title>

  <para>
   Теперь побитовые смещения на отрицательную величину будут
   бросать исключение <classname>ArithmeticError</classname>:
  </para>
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
var_dump(1 >> -1);
?>
]]>
   </programlisting>
   &example.outputs.5;
   <screen>
<![CDATA[
int(0)
]]>
   </screen>
   &example.outputs.7;
   <screen>
<![CDATA[
Fatal error: Uncaught ArithmeticError: Bit shift by negative number in /tmp/test.php:2
Stack trace:
#0 {main}
  thrown in /tmp/test.php on line 2
]]>
   </screen>
  </informalexample>
 </sect3>

 <sect3 xml:id="migration70.incompatible.integers.out-of-range">
  <title>Побитовые смещения с выходом из допустимого диапазона</title>

  <para>
   Побитовые смещения (в обоих направлениях) за пределы ширины
   типа <type>int</type> будут всегда возвращать 0.
   Раньше поведение зависело от архитектуры.
  </para>
 </sect3>

 <sect3 xml:id="migration70.incompatible.integers.div-by-zero">
  <title>Изменение в делении на ноль</title>

  <para>
   Ранее использование нуля в качестве делителя в операциях
   деления (/) или деления по модулю (%) приводило к ошибке уровня
   E_WARNING и возврату значения <constant>false</constant>.
   Теперь оператор деления возвращает число с плавающей точкой, равное
   +INF, -INF или NAN, как определено в IEEE 754. Деление по модулю вместо
   ошибки уровня E_WARNING будет выбрасывать исключение
   <classname>DivisionByZeroError</classname>.
  </para>
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
var_dump(3/0);
var_dump(0/0);
var_dump(0%0);
?>
]]>
   </programlisting>
   &example.outputs.5;
   <screen>
<![CDATA[
Warning: Division by zero in %s on line %d
bool(false)

Warning: Division by zero in %s on line %d
bool(false)

Warning: Division by zero in %s on line %d
bool(false)
]]>
   </screen>
   &example.outputs.7;
   <screen>
<![CDATA[
Warning: Division by zero in %s on line %d
float(INF)

Warning: Division by zero in %s on line %d
float(NAN)

PHP Fatal error:  Uncaught DivisionByZeroError: Modulo by zero in %s line %d
]]>
   </screen>
  </informalexample>
 </sect3>
</sect2>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
