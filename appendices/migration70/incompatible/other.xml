<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: b20fb5e69d7f7a91a52e43bbb95925893cbd4bb9 Maintainer: rjhdby Status: ready -->
<!-- Reviewed: no -->
<sect2 xml:id="migration70.incompatible.other">
 <title>Прочие изменения, затрагивающие обратную совместимость</title>

 <sect3 xml:id="migration70.incompatible.other.new-by-ref">
  <title>Новые объекты не могут присваиваться по ссылке</title>

  <para>
   Результат оператора &new; больше не может быть присвоен
   переменной по ссылке:
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
class C {}
$c =& new C;
?>
]]>
   </programlisting>
   &example.outputs.5;
   <screen>
<![CDATA[
Deprecated: Assigning the return value of new by reference is deprecated in /tmp/test.php on line 3
]]>
   </screen>
   &example.outputs.7;
   <screen>
<![CDATA[
Parse error: syntax error, unexpected 'new' (T_NEW) in /tmp/test.php on line 3
]]>
   </screen>
  </informalexample>
 </sect3>

 <sect3 xml:id="migration70.incompatible.other.classes">
  <title>Некорректные имена классов, интерфейсов и трейтов</title>

  <para>
   Следующие имена нельзя использовать для классов, интерфейсов и трейтов:
  </para>

  <itemizedlist>
   <listitem>
    <simpara><type>bool</type></simpara>
   </listitem>
   <listitem>
    <simpara><type>int</type></simpara>
   </listitem>
   <listitem>
    <simpara><type>float</type></simpara>
   </listitem>
   <listitem>
    <simpara><type>string</type></simpara>
   </listitem>
   <listitem>
    <simpara>&null;</simpara>
   </listitem>
   <listitem>
    <simpara>&true;</simpara>
   </listitem>
   <listitem>
    <simpara>&false;</simpara>
   </listitem>
  </itemizedlist>

  <para>
   Более того, следующие имена не должны использоваться.
   Они не приведут к ошибке в PHP 7.0, но они зарезервированы
   на будущее и должны считаться устаревшими.
  </para>

  <itemizedlist>
   <listitem>
    <simpara><type>resource</type></simpara>
   </listitem>
   <listitem>
    <simpara><type>object</type></simpara>
   </listitem>
   <listitem>
    <simpara><type>mixed</type></simpara>
   </listitem>
   <listitem>
    <simpara><type>numeric</type></simpara>
   </listitem>
  </itemizedlist>
 </sect3>

 <sect3 xml:id="migration70.incompatible.other.php-tags">
  <title>Удалены PHP-теги ASP и script</title>

  <para>
   Удалена поддержка использования тегов ASP и script для
   определения кода PHP.
  </para>

  <table>
   <title>Удалённые теги ASP и script</title>
   <tgroup cols="2">
    <thead>
     <row>
      <entry>Открывающий тег</entry>
      <entry>Закрывающий тег</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry><code>&lt;%</code></entry>
      <entry><code>%&gt;</code></entry>
     </row>
     <row>
      <entry><code>&lt;%=</code></entry>
      <entry><code>%&gt;</code></entry>
     </row>
     <row>
      <entry><code>&lt;script language="php"&gt;</code></entry>
      <entry><code>&lt;/script&gt;</code></entry>
     </row>
    </tbody>
   </tgroup>
  </table>
 </sect3>

 <sect3 xml:id="migration70.incompatible.other.incompatible-this">
  <title>Удалены вызовы из неподходящего контекста</title>

  <para>
   <link linkend="migration56.deprecated.incompatible-context">Ранее признанные устаревшими в PHP 5.6</link>
   статические вызовы нестатических методов из неподходящего
   контекста теперь приведут к тому, что для вызываемого
   метода переменная <literal>$this</literal> будет не
   определена и будет выведено предупреждение.
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
class A {
    public function test() { var_dump($this); }
}

// Обратите вимание: НЕ расширяет класс A
class B {
    public function callNonStaticMethodOfA() { A::test(); }
}

(new B)->callNonStaticMethodOfA();
?>
]]>
   </programlisting>
   &example.outputs.56;
   <screen>
<![CDATA[
Deprecated: Non-static method A::test() should not be called statically, assuming $this from incompatible context in /tmp/test.php on line 8
object(B)#1 (0) {
}
]]>
   </screen>
   &example.outputs.7;
   <screen>
<![CDATA[
Deprecated: Non-static method A::test() should not be called statically in /tmp/test.php on line 8

Notice: Undefined variable: this in /tmp/test.php on line 3
NULL
]]>
   </screen>
  </informalexample>
 </sect3>

 <sect3 xml:id="migration70.incompatible.other.yield">
  <title>&yield; теперь право-ассоциативный оператор</title>

  <para>
   Конструкция &yield; больше не требует оборачивания в скобки
   и является право-ассоциативным оператором с приоритетом
   между <literal>print</literal> и <literal>=&gt;</literal>.
   Это может привести к изменению поведения:
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
echo yield -1;
// Ранее интерпретировалось так
echo (yield) - 1;
// А теперь так
echo yield (-1);

yield $foo or die;
// Ранее интерпретировалось так
yield ($foo or die);
// А теперь так
(yield $foo) or die;
?>
]]>
   </programlisting>
  </informalexample>

  <para>
   Скобки могут быть использованы для устранения неоднозначности в таких случаях.
  </para>
 </sect3>

 <sect3 xml:id="migration70.incompatible.other.func-parameters">
  <title>Функции не могут иметь несколько параметров с одинаковыми именами</title>

  <para>
   Больше нельзя определить несколько параметров функции с
   одинаковыми именами. К примеру такая функция выдаст
   ошибку уровня <constant>E_COMPILE_ERROR</constant>:
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
function foo($a, $b, $unused, $unused) {
    //
}
?>
]]>
   </programlisting>
  </informalexample>
 </sect3>

 <sect3 xml:id="migration70.incompatible.other.func-parameter-modified">
  <title>Функции, работающие с аргументами, теперь возвращают
   их <emphasis>текущие</emphasis> значения</title>

  <para>
   <function> func_get_arg</function>, <function>func_get_args</function>,
   <function>debug_backtrace</function> и трассировки исключений
   возвращают не исходные переданные
   значения, а текущие значения, которые могут уже быть
   изменены.
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
function foo($x) {
    $x++;
    var_dump(func_get_arg(0));
}
foo(1);?>
]]>
   </programlisting>
   &example.outputs.5;
   <screen>
<![CDATA[
1
]]>
   </screen>
   &example.outputs.7;
   <screen>
<![CDATA[
2
]]>
   </screen>
  </informalexample>
 </sect3>

 <sect3 xml:id="migration70.incompatible.other.multiple-default">
  <title>Оператор switch больше не может иметь несколько блоков default</title>

  <para>
   Больше невозможно задать более одного блока default в
   операторе switch. К примеру, такая конструкция выдаст
   ошибку <constant>E_COMPILE_ERROR</constant>:
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
switch (1) {
    default:
    break;
    default:
    break;
}
?>
]]>
   </programlisting>
  </informalexample>
 </sect3>

 <sect3 xml:id="migration70.incompatible.other.http-raw-post-data">
  <title>Удалена <varname>$HTTP_RAW_POST_DATA</varname></title>

  <para>
   <varname>$HTTP_RAW_POST_DATA</varname> больше не доступен. Вместо него используйте поток
   <link linkend="wrappers.php.input"><literal>php://input</literal></link>.
  </para>
 </sect3>

 <sect3 xml:id="migration70.incompatible.other.ini-comments">
  <title>Запрещены комментарии <literal>#</literal> в INI-файлах</title>

  <para>
   Поддержка префикса комментария <literal>#</literal> в
   INI-файлах удалена. Используйте префикс <literal>;</literal> вместо него.
   Это изменение касается как &php.ini;, так и файлов,
   обрабатываемых функциями
   <function>parse_ini_file</function> и
   <function>parse_ini_string</function>.
  </para>
 </sect3>

 <sect3 xml:id="migration70.incompatible.other.json-to-jsond">
  <title>Модуль JSON заменён на JSOND</title>

  <para>
   Модуль JSON заменён на JSOND, что порождает три
   небольших обратных несовместимости. Первое - числа не
   должны заканчиваться на точку (то есть <literal>34.</literal>
   должно быть заменено на <literal>34.0</literal> или
   <literal>34</literal>). Второе - при использовании научной
   нотации, экспонента <literal>e</literal> не должна следовать
   сразу за десятичной точкой (то есть <literal>3.e3</literal> нужно
   поменять на <literal>3.0e3</literal> или <literal>3e3</literal>).
   Третье - пустая строка больше не считается за корректный JSON.
  </para>
 </sect3>

 <sect3 xml:id="migration70.incompatible.other.internal-function-failure-overflow">
  <title>Ошибки внутренних функций при переполнении </title>

  <para>
   Ранее встроенные функции могли тихо обрезать числа,
   полученные при приведении типа float к integer, если float был
   больше, чем способен вместить integer. Теперь же будет
   выдаваться ошибка E_WARNING и возвращаться &null;.
  </para>
 </sect3>

 <sect3 xml:id="migration70.incompatible.other.fixes-custom-session-handler">
  <title>Исправление для возвращаемых значений пользовательского обработчика сессии</title>

  <para>
   Любые предикатные функции, реализованные с помощью
   пользовательских обработчиков сессии и возвращающие
   &false; или <literal>-1</literal>, вызовут фатальную ошибку.
   Если эти функции вернут любое значение, кроме логического,
   <literal>-1</literal> или <literal>0</literal>, они будут
   считаться завершёнными с ошибкой и вызовут
   предупреждение E_WARNING.
  </para>
 </sect3>

 <sect3 xml:id="migration70.incompatible.other.sort-order">
  <title>Порядок сортировки одинаковых элементов</title>
  <para>
   Внутренний алгоритм сортировки был изменён, что может
   сказаться на отличном от предыдущего отсортированном
   порядке элементов, определённых как одинаковые.
  </para>
  <note>
   <para>
    Не полагайтесь на порядок одинаковых элементов, так как
    он может в любое время измениться.
   </para>
  </note>
 </sect3>

 <sect3 xml:id="migration70.incompatible.other.break-continue">
  <title>Изменение порядка обработки операторов break и switch</title>
  <para>
   Операторы <literal>break</literal> и <literal>continue</literal> вне цикла или
   управляющей структуры <literal>switch</literal> теперь обрабатываются во время
   компиляции, а не во время выполнения, как это было ранее, поэтому выдают ошибки
   уровня <constant>E_COMPILE_ERROR</constant>.
  </para>
 </sect3>

 <sect3 xml:id="migration70.incompatible.other.mhash">
  <title>Mhash больше не является модулем</title>
  <para>
   Модуль Mhash полностью интегрирован в модуль <link
   linkend="book.hash">Hash</link>. Таким образом, теперь нельзя определить
   доступность поддержки Mhash с помощью функции <function>extension_loaded</function>;
   вместо неё используйте <function>function_exists</function>.
   Кроме того, Mhash больше не будет выводить с помощью
   <function>get_loaded_extensions</function> и подобных  функций.
  </para>
 </sect3>
 <sect3 xml:id="migration70.incompatible.other.declare-ticks">
  <title>declare(ticks)</title>
  <para>
   Директива <link linkend="control-structures.declare.ticks">declare(ticks)</link> больше не проникает в различные модули компиляции.
  </para>
 </sect3>
</sect2>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
