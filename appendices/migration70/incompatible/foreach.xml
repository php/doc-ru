<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 285e7e31e523ac35abc12bb1d7d60c8a6e42c4c6 Maintainer: rjhdby Status: ready -->
<!-- Reviewed: no -->
<sect2 xml:id="migration70.incompatible.foreach">
 <title>Изменения &foreach;</title>

 <para>
  Небольшие изменения были внесены в поведение
  управляющей структуры &foreach;. Основное изменение
  касается модификации итерируемого массива и обработки его
  внутреннего указателя.
 </para>

 <sect3 xml:id="migration70.incompatible.foreach.array-pointer">
  <title>&foreach; больше не изменяет внутренний указатель массива</title>

  <para>
   До PHP 7 в процессе итерации массива в &foreach;, его
   внутренний указатель изменялся. В примере ниже
   показано, что это поведение изменено:
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
$array = [0, 1, 2];
foreach ($array as &$val) {
    var_dump(current($array));
}
?>
]]>
   </programlisting>
   &example.outputs.5;
   <screen>
<![CDATA[
int(1)
int(2)
bool(false)
]]>
   </screen>
   &example.outputs.7;
   <screen>
<![CDATA[
int(0)
int(0)
int(0)
]]>
   </screen>
  </informalexample>
 </sect3>

 <sect3 xml:id="migration70.incompatible.foreach.by-value">
  <title>&foreach; по значениям оперирует копией массива</title>

  <para>
   Если &foreach; используется для стандартного перебора
   по значению, то он оперирует копией массива, а не самим
   массивом. Это значит, что изменения внесённые в массив
   внутри цикла не затронут перебираемые значения.
  </para>
 </sect3>

 <sect3 xml:id="migration70.incompatible.foreach.by-ref">
  <title>Для &foreach; по ссылке улучшили поведение при итерации</title>

  <para>
   Когда &foreach; используется для перебора по ссылке,
   он будет лучше отслеживать изменения, вносимые в массив
   в процессе итерации. К примеру, добавление элементов к
   итерируемому массиву приведёт к тому, что эти новые
   элементы попадут в перебор:
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
$array = [0];
foreach ($array as &$val) {
    var_dump($val);
    $array[1] = 1;
}
?>
]]>
   </programlisting>
   &example.outputs.5;
   <screen>
<![CDATA[
int(0)
]]>
   </screen>
   &example.outputs.7;
   <screen>
<![CDATA[
int(0)
int(1)
]]>
   </screen>
  </informalexample>
 </sect3>

 <sect3 xml:id="migration70.incompatible.foreach.object">
  <title>Итерация объектов  не реализующих <classname>Traversable</classname></title>

  <para>
   Итерация объектов не реализующих
   <classname>Traversable</classname> теперь происходит
   так же, как и итерация массива по ссылке. Так получается
   вследствие того, что
   <link linkend="migration70.incompatible.foreach.by-ref">улучшения поведения при изменении массива во время итерации</link>
   также влияет при добавлении или удалении свойств объекта.
  </para>
 </sect3>
</sect2>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
