<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: c3b9bcfbee1f77830cfa086e88de6c0742cfb8ad Maintainer: sergey Status: ready -->
<!-- Reviewed: no -->
<sect1 xml:id="migration83.incompatible" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>Изменения, ломающие обратную совместимость</title>

 <sect2 xml:id="migration83.incompatible.core">
  <title>Ядро PHP</title>

  <sect3 xml:id="migration83.incompatible.core.overflowing-call-stack">

   <title>Программы, которые были очень близки к переполнению стека вызовов</title>
   <para>
    Программы, которые были очень близки к переполнению стека вызовов, теперь могут выбрасывать
    исключение <classname>Error</classname>, когда занятый в байтах размер стека больше, чем определено в настройке
    <!-- link linkend="zend.max_allowed_stack_size-zend.reserved_stack_size" -->zend.max_allowed_stack_size-zend.reserved_stack_size<!-- </link>-->
    (<!-- link linkend="fiber.stack_size-zend.reserved_stack_size" -->fiber.stack_size-zend.reserved_stack_size<!-- </link>--> для файберов).
   </para>
  </sect3>

  <sect3 xml:id="migration83.incompatible.core.proc-get-status-multiple-times">
   <title>Выполнение функции proc_get_status() несколько раз</title>
   <para>
    Выполнение функции proc_get_status() несколько раз теперь всегда
    возвращает правильное значение в POSIX-системах. Ранее только первый вызов
    функции возвращал правильное значение. Выполнение
    функции <function>proc_close</function> после функции <function>proc_get_status</function>
    теперь также возвращает правильный код выхода. Ранее это вернуло бы
    значение <literal>-1</literal>.
    Внутренне это работает через кеширование результата на POSIX-системах.
    Если требуется прежнее поведение, можно проверить
    ключ <literal>«cached»</literal> в массиве, который возвращает функция
    <function>proc_get_status</function>, чтобы проверить, был ли кеширован результат.
   </para>
  </sect3>

  <sect3 xml:id="migration83.incompatible.core.zend-max-execution-timers">
   <title>Таймеры Zend Max Execution</title>
   <para>
    Таймеры Zend Max Execution теперь по умолчанию включены для сборок ZTS
    в системах Linux.
   </para>
  </sect3>

  <sect3 xml:id="migration83.incompatible.core.traits-with-static-properties">
   <title>Включение трейтов со статическими свойствами</title>
   <para>
    Включение трейтов со статическими свойствами теперь будет повторно определять статические свойства,
    унаследованные из родительского класса. Это создаст разные хранилища статических
    свойств для текущего класса. Это аналогично добавлению
    статического свойства в классе, без трейтов.
   </para>
  </sect3>

  <sect3 xml:id="migration83.incompatible.core.negative-index-to-empty-array">
   <title>Присваивание отрицательного индекса пустому массиву</title>
   <para>
    При добавлении в массив с занятым отрицательным индексом,
    который, предположим, хранится в переменной <varname>$n</varname>,
    нового значения,
    следующий индекс получит значение <code>$n + 1</code>, а не <literal>0</literal>.
   </para>
  </sect3>

  <sect3 xml:id="migration83.incompatible.core.class-constant-visibility-check">
   <title>Проверка несоответствия видимости констант классов</title>
   <para>
    Несоответствия видимости констант классов теперь будет корректно проверено
    при реализации интерфейсов.
   </para>
  </sect3>

  <sect3 xml:id="migration83.incompatible.core.weakmap-entries-maps-to-itself">
   <title>Записи WeakMap, ключ которых соответствует самим себе</title>
   <para>
    Записи объекта <classname>WeakMap</classname>, ключ которых сопоставлен с самим собой, (возможно,
    транзитивно) теперь можно удалить во время сбора цикла если ключ недоступен,
    кроме как путём перебора значений WeakMap (доступность во время перебора
    считается слабой).
    Ранее такие записи не были бы удалены автоматически.
   </para>
  </sect3>
 </sect2>

 <sect2 xml:id="migration83.incompatible.date">
  <title>Модуль Date</title>

  <para>
   Вместо предупреждений и общих исключений
   в модуль DateTime были добавлены свойственные только ему исключения
   и ошибки в иерархии классов <classname>DateError</classname> и
   <classname>DateException</classname>. Это улучшает обработку ошибок и исключений,
   когда нужно проверить их существование.
  </para>
 </sect2>

 <sect2 xml:id="migration83.incompatible.dom">
  <title>Модуль DOM</title>

  <para>
   Вызов методов <methodname>DOMChildNode::after</methodname>,
   <methodname>DOMChildNode::before</methodname>
   и <methodname>DOMChildNode::replaceWith</methodname>
   на узле, у которого нет родительского узла теперь неработоспособно, а не
   исключением иерархии, чтобы поведение было совместимым со спецификацией DOM.
  </para>

  <para>
   Вызов методов классов <classname>DOMParentNode</classname>
   и <classname>DOMChildNode</classname> без документа теперь
   работает, а не выбрасывает исключения <constant>DOM_HIERARCHY_REQUEST_ERR</constant>
   класса <classname>DOMException</classname>.
   Это соответствует поведению спецификации DOM.
  </para>

  <para>
   Вызов метода <methodname>DOMDocument::createAttributeNS</methodname> без префикса
   неправильно бы создал пространство имён по умолчанию,
   помещая элемент внутрь пространства имён вместо атрибута. Эта ошибка теперь исправлена.
  </para>

  <para>
   Метод <methodname>DOMDocument::createAttributeNS</methodname> раньше
   неправильно бросал исключение <constant>DOM_NAMESPACE_ERRNAMESPACE_ERR</constant>
   класса <classname>DOMException</classname>, когда префикс уже был занят другим
   URI. Теперь он правильно выбирает другой префикс при конфликте префиксов.
  </para>

  <para>
   Новые методы и свойства были добавлены в ряд классов DOM.
   Если пользовательский класс наследуется от этих классов и объявляет метод или свойство
   с таким же именем, оно должно быть совместимым. В других случаях будет выброшена типичная ошибка
   компиляции о несовместимости.
   Познакомиться со списком новых методов и свойств можно
   в разделах <link linkend="migration83.new-features.dom">список новой функциональности</link>
   и <link linkend="migration83.new-functions.dom">новые функции</link>.
  </para>
 </sect2>

 <sect2 xml:id="migration83.incompatible.ffi">
  <title>Класс FFI</title>

  <para>
   Функции языка Си, для которых задан возвращаемый тип <type>void</type>, теперь возвращают значение &null; вместо
   вместо объекта <literal>object(FFI\CData:void) { }</literal>.
  </para>
 </sect2>

 <sect2 xml:id="migration83.incompatible.opcache">
  <title>Модуль Opcache</title>

  <para>
   Настройка INI-директивы <link linkend="ini.opcache.consistency-checks">opcache.consistency_checks</link>
   была удалена. Эта функция не работала при трассировке JIT,
   а также с кешем наследования, и была отключена в PHP 8.1.18 и PHP 8.2.5;
   теперь её невозможно включить.
   И трассирующий JIT, и кеш наследования могут изменить разделяемую память (shm) после
   сохранения скрипта путём аннулирования его контрольной суммы. Были попытки исправить
   пропуски через модифицируемые указатели, но была отклонена из-за сложности.
   Из-за этого решили удалить эту функцию.
  </para>
 </sect2>

 <sect2 xml:id="migration83.incompatible.phar">
  <title>Модуль Phar</title>

  <para>
   Тип констант класса <classname>Phar</classname> теперь объявлен.
  </para>
 </sect2>

 <sect2 xml:id="migration83.incompatible.standard">
  <title>Стандартные функции</title>

  <para>
   В функцию <function>range</function> был внесён ряд изменений:
   <simplelist>
    <member>Теперь выбрасывается исключение <classname>TypeError</classname>, когда объекты (<type>object</type>),
    ресурсы (<type>resource</type>) или массивы (<type>array</type>) передаются в качестве граничных значений.</member>
    <member>Теперь при передаче в параметр <parameter>$step</parameter> значения <literal>0</literal>
    выбрасывается подробнее описанное исключение <classname>ValueError</classname>.</member>
    <member>Теперь выбрасывается исключение <classname>ValueError</classname>, когда
    в параметр <parameter>$step</parameter> передаются отрицательные значения для увеличения диапазонов.</member>
    <member>Если в параметр <parameter>$step</parameter> передаётся число с плавающей точкой,
    которое может быть интерпретировано как целое число, то оно так и оценивается.</member>
    <member>Теперь выбрасывается исключение <classname>ValueError</classname>, если любой аргумент
    представляет бесконечное число или нечисло (NAN).</member>
    <member>Теперь вызвается ошибка уровня <constant>E_WARNING</constant>,
    если параметр <parameter>$start</parameter> или <parameter>$end</parameter>
    принимает значение пустой строки. Значение продолжает приводиться к значению <literal>0</literal>.</member>
    <member>Теперь вызвается ошибка уровня <constant>E_WARNING</constant>,
    если параметр <parameter>$start</parameter> или <parameter>$end</parameter> принимает
    нечисловую строку размером более одного байта.</member>
    <member>Теперь вызвается ошибка уровня <constant>E_WARNING</constant>,
    если значение, переданное в параметр <parameter>$start</parameter> или <parameter>$end</parameter>,
    приводится к целому числу из-за того, что другое значение — число
    (например, <code>range(5, 'z');</code>).</member>
    <member>Теперь при попытке сгенерировать диапазон символов вызвается ошибка уровня <constant>E_WARNING</constant>,
    если значение параметра <parameter>$step</parameter> — это число с плавающей точкой,
    кроме случаев, когда оба входных значения — числовые строки (например,
    <code>range('5', '9', 0.5);</code> не вызовет предупреждения).</member>
    <member>Теперь вместо приведения одного из значений к целому числу
    функция <function>range</function> создаёт список символов, если одно
    из них — это числовая строка (например, <code>range('9', 'A');</code>).</member>
   </simplelist>

   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php

range('9', 'A');  // ["9", ":", ";", "<", "=", ">", "?", "@", "A"], начиная с PHP 8.3.0
range('9', 'A');  // [9, 8, 7, 6, 5, 4, 3, 2, 1, 0], до PHP 8.3.0

]]>
    </programlisting>
   </informalexample>
  </para>

  <para>
   Флаги проверки ошибок в функции <function>file</function> теперь перехватывает все недопустимые флаги.
   Константа <constant>FILE_APPEND</constant> ранее молча принималась.
  </para>
 </sect2>

 <sect2 xml:id="migration83.incompatible.SNMP">
  <title>SNMP</title>

  <para>
   Тип констант класса <classname>SNMP</classname> теперь объявлен.
  </para>
 </sect2>

</sect1>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
