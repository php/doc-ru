<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 307ee0078a4c33f4766e3f467612be7c528327ec Maintainer: sergey Status: ready -->
<!-- Reviewed: no -->
<sect1 xml:id="migration83.other-changes" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>Другие изменения</title>

 <sect2 xml:id="migration83.other-changes.core">
  <title>Изменения в ядре</title>

  <sect3 xml:id="migration83.other-changes.core.ffi">
   <title>Класс FFI</title>

   <para>
    Метод <methodname>FFI::load</methodname> теперь разрешён в режиме предварительной загрузки,
    когда опция <link linkend="ini.opcache.preload-user">opcache.preload_user</link> —
    это текущий пользователь системы. Ранее
    вызов метода <methodname>FFI::load</methodname> не был возможен
    во время предзагрузки, если
    настройка директивы <link linkend="ini.opcache.preload-user">opcache.preload_user</link>
    была установлена.
   </para>
  </sect3>

  <sect3 xml:id="migration83.other-changes.core.fpm">
   <title>Менеджер процессов FPM</title>

   <para>
    Проверка FPM CLI теперь завершается неудачей, если путь к сокету длиннее, чем поддерживает операционная система.
   </para>
  </sect3>

  <sect3 xml:id="migration83.other-changes.core.opcache">
   <title>Модуль Opcache</title>

   <para>
    В CLI и phpdbg SAPIs предварительная загрузка больше не требует
    настройки директивы <link linkend="ini.opcache.preload-user">opcache.preload_user</link>
    при запуске от имени пользователя root.
    В других SAPIs эта директива нужна при запуске от имени пользователя root,
    потому что предзагрузка выполнялась до того, как SAPI переключится на непривилегированного пользователя.
   </para>
  </sect3>

  <sect3 xml:id="migration83.other-changes.core.streams">
   <title>Потоки</title>

   <para>
    Блокировка функцией <function>fread</function> при подключении к сокету возвращается немедленно,
    если есть любые буферизованные данные, вместо ожидания дополнительных данных.
   </para>

   <para>
    Поток памяти больше не завершается сбоем, если смещение поиска превысило конечное значение.
    Вместо этого память будет увеличена при следующей записи, а данные между
    старым концом и смещением заполнятся нулевыми байтами, аналогично работе файлов.
   </para>

   <para>
    Операции доступа функции <function>stat</function>
    наподобие функции <function>file_exists</function> и похожие теперь пользуются реальным
    путём вместо фактического пути потока. Это соответствует открытию
    потока.
   </para>
  </sect3>
 </sect2>

 <sect2 xml:id="migration83.other-changes.sapi">
  <title>Изменения в модулях SAPI</title>

  <sect3 xml:id="migration83.other-changes.sapi.cli">
   <title>Командная строка (CLI)</title>

   <para>
    Потоки <constant>STDOUT</constant>, <constant>STDERR</constant>
    и <constant>STDIN</constant> больше не закрываются при уничтожении ресурсов,
    что обычно случается при завершении работы CLI.
    Однако всё ещё можно явно закрыть эти потоки
    через функцию <function>fclose</function> и похожие.
   </para>
  </sect3>
 </sect2>

 <sect2 xml:id="migration83.other-changes.functions">
  <title>Изменённые функции</title>

  <sect3 xml:id="migration83.other-changes.functions.core">
   <title>Ядро</title>

   <para>
    В функцию <function>gc_status</function> добавлено 8 следующих полей:

    <simplelist>
     <member><literal>running</literal> => bool</member>
     <member><literal>protected</literal> => bool</member>
     <member><literal>full</literal> => bool</member>
     <member><literal>buffer_size</literal> => int</member>
     <member><literal>application_time</literal> => float: Полное время
     работы приложения в секундах (включая время, затраченное полем collector_time)</member>
     <member><literal>collector_time</literal> => float: Время в секундах,
     затраченное циклами сборки (включая время, затраченное полями destructor_time и free_time)</member>
     <member><literal>destructor_time</literal> => float: Время в секундах, затраченное
     деструкторами в течение цикла сборки</member>
     <member><literal>free_time</literal> => float: Время в секундах, затраченное на освобождение значений
     во время цикла сборки</member>
    </simplelist>
   </para>

   <para>
    Функция <function>class_alias</function> теперь поддерживает создание псевдонимов
    внутреннего класса.
   </para>

   <para>
    Настройка <link linkend="ini.open-basedir">open_basedir</link> с вызовом
    во время выполнения функции <code>ini_set('open_basedir', ...);</code> больше не принимает пути,
    содержащие родительскую директорию (<literal>..</literal>). Ранее
    запрещались только пути, начинающиеся с <literal>..</literal>. Это можно
    легко обойти, добавив <literal>./</literal> к пути.
   </para>

   <para>
    Обработчики пользовательских исключений теперь перехватывают их во время завершения работы.
   </para>

   <para>
    Результирующий HTML в функциях <function>highlight_string</function>
    и <function>highlight_file</function> был изменён.
    Пробел между внешними HTML-тегами удалены. Новые строки и пробелы
    больше не преобразовываются в HTML-сущности. Полный HTML теперь обёрнут
    тегом <literal>&lt;pre&gt;</literal>. Внешний тег <literal>&lt;span&gt;</literal>
    был слит с тегом <literal>&lt;code&gt;</literal>.
   </para>

  </sect3>

  <sect3 xml:id="migration83.other-changes.functions.calendar">
   <title>Модуль Calendar</title>

   <para>
    Функция <function>easter_date</function> теперь поддерживает годы с 1970
    по 2 000 000 000 на 64-битных системах, ранее она поддерживала только годы
    в диапазоне 1970—2037.
   </para>
  </sect3>

  <sect3 xml:id="migration83.other-changes.functions.curl">
   <title>Модуль Curl</title>

   <para>
    Функция <function>curl_getinfo</function> теперь поддерживает две новых константы:
    <constant>CURLINFO_CAPATH</constant>
    и <constant>CURLINFO_CAINFO</constant>. Если параметр option принимает значение &null;,
    будут представлены два следующих дополнительных ключа:
    <literal>capath</literal> и <literal>cainfo</literal>.
   </para>
  </sect3>

  <sect3 xml:id="migration83.other-changes.functions.dom">
   <title>Модуль DOM</title>

   <para>
    У метода <methodname>DOMCharacterData::appendData</methodname> предопределённый тип
    возвращаемого значения изменился на <type>true</type>.
   </para>

   <para>
    У методов <methodname>DOMDocument::loadHTML</methodname>,
    <methodname>DOMDocument::loadHTMLFile</methodname>
    и <methodname>DOMDocument::loadXML</methodname> предварительный тип
    возвращаемого значения был изменён на <type>bool</type>. Раньше это было задокументировано
    как <code>DOMDocument|bool</code>, но начиная с PHP 8.0.0
    объект класса <classname>DOMDocument</classname>
    не может быть возвращён, поскольку он больше не может быть вызван статически.
   </para>

  </sect3>

  <sect3 xml:id="migration83.other-changes.functions.gd">
   <title>Модуль Gd</title>

   <para>
    Сигнатура функции <function>imagerotate</function> изменилась.
    Параметр <parameter>$ignore_transparent</parameter> был удалён,
    поскольку он игнорировался с версии PHP 5.5.0.
   </para>
  </sect3>

  <sect3 xml:id="migration83.other-changes.functions.intl">
   <title>Модуль интернационализации Intl</title>

   <para>
    Функция <function>datefmt_set_timezone</function> (и её псевдоним
    — метод <methodname>IntlDateformatter::setTimeZone</methodname>)
    теперь возвращают значение &true; при успешном выполнении, ранее они возвращали значение &null;.
   </para>

   <para>
    Метод <methodname>IntlBreakiterator::setText</methodname> теперь возвращает значение &false;
    при сбое, ранее он возвращал значение &null;.
    Теперь он возвращает значение &true; при успешном выполнении, ранее возвращалось значение &null;.
   </para>

   <para>
    Метод <methodname>IntlChar::enumCharNames</methodname> теперь возвращает логическое значение.
    Ранее он возвращал значение &null; при успешном выполнении и значение &false; при неудачном завершении.
   </para>

   <para>
    Метод <methodname>IntlDateFormatter::__construct</methodname> выбрасывает исключение <constant>U_ILLEGAL_ARGUMENT_ERROR</constant>
    при установке недопустимого языкового стандарта (локали).
   </para>
  </sect3>

  <sect3 xml:id="migration83.other-changes.functions.mbstring">
   <title>Модуль MBString</title>

   <para>
    Функции <function>mb_strtolower</function> и <function>mb_convert_case</function>
    соблюдают правила условного регистра для греческой буквы сигма (Σ → σ).
    В функции <function>mb_convert_case</function>
    условный регистр применяется только для режимов <constant>MB_CASE_LOWER</constant>
    и <constant>MB_CASE_TITLE</constant>, но не для
    <constant>MB_CASE_LOWER_SIMPLE</constant>
    и <constant>MB_CASE_TITLE_SIMPLE</constant>.
   </para>

   <para>
    Функция <function>mb_decode_mimeheader</function> интерпретирует подчёркивание
    в QPrint-кодированной MIME-кодировке слов так, как требует стандарт RFC 2047; они
    преобразовываются в пробелы.
    Подчёркивания должны быть закодированы в <literal>«=5F»</literal> с таких
    MIME-кодированных словах.
   </para>

   <para>
    В редких случаях функция <function>mb_encode_mimeheader</function> будет применять кодировку передачи
    к своей входной строке, чтобы она могла передать её как необработанный ASCII в PHP 8.2.
   </para>

   <para>
    Функция <function>mb_encode_mimeheader</function> больше не сбрасывает NUL-байты
    при QPrint-кодировании входной строки.
    Ранее это иногда приводило к повреждению функцией mb_encode_mimeheader
    строк в ряде текстовых кодировок,
    особенно UTF-16 и UTF-32.
   </para>

   <para>
    «Нестрогий» режим функции <function>mb_detect_encoding</function> теперь
    ведёт себя как описано в документации.
    Ранее она возвращала значение &false;, если тот же байт (например, первый)
    входной строки был недопустимым во всех проверяемых кодировках.
    В общем смысле, она исключала предложенные кодировки из рассмотрения,
    если был обнаружен недопустимый байт, и если тот же входной байт исключил
    все оставшиеся кодировки, всё ещё находящиеся на рассмотрении, она могла вернуть значение &false;.
    С другой стороны, если все предложенные кроме одной кодировки были исключены
    из рассмотрения, она возвращала последнюю оставшуюся, без учёта того,
    сколько ошибок кодирования может встретиться позже в строке.
    Это отличается от поведения, описанного в документации, которое
    говорило: «Если параметр strict установлен в значение false, будет возвращена
    первая совпадающая кодировка».
   </para>
  </sect3>

  <sect3 xml:id="migration83.other-changes.functions.mysqli">
   <title>Модуль mysqli</title>

   <para>
    Функция <function>mysqli_fetch_object</function> теперь выбрасывает исключение
    <classname>ValueError</classname> вместо исключения <classname>Exception</classname>,
    когда в параметр <parameter>$constructor_args</parameter> передан непустой аргумент,
    а в классе не определён конструктор.
   </para>

   <para>
    Функция <function>mysqli_poll</function> теперь выбрасывает исключение <classname>ValueError</classname>,
    когда не переданы ни аргументы параметра <parameter>$read</parameter>,
    ни аргументы параметра <parameter>$error</parameter>.
   </para>

   <para>
    В функции <function>mysqli_field_seek</function>
    и методе <methodname>mysqli_result::field_seek</methodname>
    возвращаемый тип теперь определён как <type>true</type> вместо <type>bool</type>.
   </para>
  </sect3>

  <sect3 xml:id="migration83.other-changes.functions.odbc">
   <title>Программный интерфейс ODBC</title>

   <para>
    Теперь для параметра <parameter>$enable</parameter>
    функция <function>odbc_autocommit</function> принимает значение &null;.
    При передаче значения &null; функция будет вести себя так же, как и при передаче значения только для одного параметра,
    то есть — укажет, включена ли автофиксация или нет.
   </para>
  </sect3>

  <sect3 xml:id="migration83.other-changes.functions.pgsql">
   <title>Модуль PGSQL</title>

   <para>
    Функция <function>pg_fetch_object</function> теперь выбрасывает исключение
    <classname>ValueError</classname> вместо исключения <classname>Exception</classname>,
    когда в параметр <parameter>$constructor_args</parameter> передаётся непустой аргумент,
    а в классе не определён конструктор.
   </para>

   <para>
    Функция <function>pg_insert</function> теперь выбрасывает исключение <classname>ValueError</classname>
    вместо ошибки уровня <constant>E_WARNING</constant>, когда указанная таблица недопустима.
   </para>

   <para>
    Функции <function>pg_insert</function> и <function>pg_convert</function> выбрасывают исключения
    <classname>ValueError</classname> или <classname>TypeError</classname>
    вместо ошибки уровня <constant>E_WARNING</constant>, когда значение/тип поля
    правильно не совпадает с типом PostgreSQL.
   </para>

   <para>
    Параметр <parameter>$row</parameter>
    функций <function>pg_fetch_result</function>,
    <function>pg_field_prtlen</function>
    и <function>pg_field_is_null</function> теперь может принимать значение &null;.
   </para>
  </sect3>

  <sect3 xml:id="migration83.other-changes.functions.random">
   <title>Модуль Random</title>

   <para>
    Изменены функции <function>mt_srand</function> и <function>srand</function>,
    чтобы не проверять количество аргументов для определения, надо ли использовать случайное начальное число.
    Передача значения &null; сгенерирует случайное начальное число, при передаче значения <literal>0</literal>
    оно и будет выбрано случайным числом. Работа функции теперь согласована с методом
    <methodname>Random\Engine\Mt19937::__construct</methodname>.
   </para>

  </sect3>

  <sect3 xml:id="migration83.other-changes.functions.reflection">
   <title>Класс Reflection</title>

   <para>
    Возвращаемый тип метода <methodname>ReflectionClass::getStaticProperties</methodname>
    больше не может принимать значение &null;.
   </para>
  </sect3>

  <sect3 xml:id="migration83.other-changes.functions.standard">
   <title>Стандартные функции</title>

   <para>
    Вызов ошибки уровня <constant>E_NOTICE</constant> в функции <function>unserialize</function>
    был повышен до <constant>E_WARNING</constant>.
    <!-- RFC: https://wiki.php.net/rfc/improve_unserialize_error_handling -->
   </para>

   <para>
    Функция <function>unserialize</function> теперь выдаёт ошибку уровня <constant>E_WARNING</constant>,
    если входные данные содержат неиспользованные байты.
    <!-- RFC: https://wiki.php.net/rfc/unserialize_warn_on_trailing_data -->
   </para>

   <para>
    Функция <function>array_pad</function> теперь ограничена только максимальным количеством
    элементов, которые может содержать массив. Раньше за один раз она могла добавить
    только 1 048 576 элементов.
   </para>

   <para>
    Функция <function>strtok</function> выдаёт ошибку уровня <constant>E_WARNING</constant>,
    если токен не предоставлен при запуске токенизации.
   </para>

   <para>
    Функция <function>password_hash</function> теперь будет связывать в цепочку базовое
    исключение <classname>Random\RandomException</classname>
    как исключение <classname>Exception</classname> свойства <parameter>$previous</parameter>
    исключения <classname>ValueError</classname>,
    когда генерация соли завершится неудачей.
   </para>

   <para>
    Передаваемый в параметр <parameter>$command</parameter>
    функции <function>proc_open</function> массив теперь должен содержать хотя бы один
    непустой элемент. Или будет выброшено исключение <classname>ValueError</classname>.
   </para>

   <para>
    Функция <function>proc_open</function> возвращает значение &false;, если
    переданный в параметр <parameter>$command</parameter> массив — это не допустимая команда,
    а объект ресурса, который выдаёт предупреждение позже.
    Это уже было в Windows, но теперь это также имеет место,
    если выбрана реализация posix_spawn (бо́льшая часть платформ Linux, BSD и MacOS).
    Всё ещё существуют старые платформы, на которых это поведение не изменено, поскольку posix_spawn
    на них не поддерживается.
   </para>

   <para>
    Функции <function>array_sum</function> и <function>array_product</function> теперь
    предупреждают, когда значения в массиве не могут быть преобразованы в целое число/число с плавающей точкой.
    Раньше массивы и объекты игнорировались, тогда как все остальные значения приводились к целым числам (&integer;).
    Больше того, объекты, определяющие числовое приведение (например,
    <link linkend="book.gmp">GMP</link>), теперь приводятся, а не игнорируются.
    <!-- RFC: https://wiki.php.net/rfc/saner-array-sum-product -->
   </para>

   <para>
    Параметр <parameter>$decimal</parameter> функции <function>number_format</function>
    теперь правильно обрабатывает отрицательные целые числа.
    Округление с отрицательным значением для параметра <parameter>$decimal</parameter> означает,
    что значение параметра <parameter>$num</parameter> округляется до установленных в параметре <parameter>$decimals</parameter>
    значащих цифр перед десятичной точкой.
    Ранее отрицательные значения параметра <parameter>$decimals</parameter>
    молча игнорировались и число округлялось до нуля десятичных знаков.
   </para>

   <para>
    Новый параметр <parameter>$before_needle</parameter> был добавлен
    в функцию <function>strrchr</function>. Он ведет себя так же, как его аналог
    в функциях <function>strstr</function> или <function>stristr</function>.
   </para>

   <para>
    Функции <function>str_getcsv</function> и <function>fgetcsv</function> теперь возвращают
    пустую строку вместо строки с одним нулевым байтом для последнего поля,
    которое содержит только незавершенное вложение.
   </para>
  </sect3>

 </sect2>

 <sect2 xml:id="migration83.other-changes.extensions">
  <title>Другие изменения в модулях</title>

  <sect3 xml:id="migration83.other-changes.extensions.core">
   <title>Ядро</title>

   <para>
    Указание <link linkend="language.operators.increment">операторов инкремента/декремента</link>
    (<literal>++</literal>/<literal>--</literal>) на логических
    значениях (<type>bool</type>) теперь выдаёт предупреждения.
    Это потому, что пока это не даёт эффекта, но в будущем будет вести себя как
    <code>$bool += 1</code>.
   </para>

   <para>
    Указание <link linkend="language.operators.increment">оператора декремента</link>
    (<literal>--</literal>) на значения <type>null</type> теперь выдаёт предупреждения.
    Это потому, что пока это не даёт эффекта, но в будущем будет вести себя как
    <code>$null -= 1</code>.
   </para>

   <para>
    Внутренние объекты, которые реализуют приведение _IS_NUMBER, но не обработчик do_operator,
    который переопределяет сложение и вычитание, теперь можно увеличивать или уменьшать на единицу,
    как если бы выполнялись выражения <code>$o += 1</code> или <code>$o -= 1</code>.
   </para>
  </sect3>

  <sect3 xml:id="migration83.other-changes.extensions.dom">
   <title>Модуль DOM</title>

   <para>
    Механизм жизненного цикла модуля DOM был переработан так, чтобы неявно удалённые
    узлы по-прежнему можно было получить. Ранее это приводило к исключению.
   </para>
  </sect3>

  <sect3 xml:id="migration83.other-changes.extensions.sqlite3">
   <title>Класс SQLite3</title>

   <para>
    Класс <classname>SQLite3</classname> теперь вместо исключения <classname>Exception</classname>
    выбрасывает исключение <classname>SQLite3Exception</classname> (расширяя
    класс исключения <classname>Exception</classname>).
   </para>

   <para>
    Код ошибки класса SQLite теперь передаётся в коде ошибки исключения, а не
    включается в сообщение об ошибке.
   </para>

  </sect3>
 </sect2>

 <sect2 xml:id="migration83.other-changes.ini">
  <title>Изменения обработки INI-файла</title>

  <itemizedlist>
   <listitem>
    <para>
     INI-директивы <literal>assert.*</literal> устарели для настроек конфигурации.
     Сюда входят следующие настройки INI:
     <simplelist>
      <member><link linkend="ini.assert.active">assert.active</link></member>
      <member><link linkend="ini.assert.bail">assert.bail</link></member>
      <member><link linkend="ini.assert.callback">assert.callback</link></member>
      <member><link linkend="ini.assert.exception">assert.exception</link></member>
      <member><link linkend="ini.assert.warning">assert.warning</link></member>
     </simplelist>
     Если значение настройки равно значению по умолчанию,
     уведомления об устаревании не будет выдано.
     Вместо них нужно пользоваться INI-директивой <link linkend="ini.zend.assertions">zend.assertions</link>.
    </para>
   </listitem>
   <listitem>
    <para>
     <!--<link linkend="ini.zend.max_allowed_stack_size">-->zend.max_allowed_stack_size<!--</link>--> —
    это новая INI-директива, которая устанавливает максимальный размер стека.
    Возможные значения — это <literal>0</literal> (определяет максимальный размер стека процессов или потоков),
    <literal>-1</literal> (без ограничений) или положительное целое число байтов.
    Значение по умолчанию — <literal>0</literal>.
    Когда она не может определить  максимальный размер стека процессов
    или потоков, будет выбрано известное системное значение по умолчанию.
    Установка чрезмерно большого значения даст тот же эффект, что и отключение ограничения размера стека.
    Максимальный размер стека для файберов устанавливают директивой
    <!-- link TODO -->fiber.stack_size<!-- /link -->.
    Выбрасывается ошибка <classname>Error</classname> когда стек вызовов процессов превышает установленный директивой
    <!-- link TODO -->zend.max_allowed_stack_size-zend.reserved_stack_size<!-- /link-->
    размер байтов, для предотвращения ошибок сегментации, вызванных переполнением стека,
    для упрощения процесса отладки.
    Размер стека увеличивается во время неконтролируемых рекурсий с участием внутренних функций,
    или магических методов
    <link linkend="object.tostring">__toString()</link>,
    <link linkend="object.clone">__clone()</link>,
    <link linkend="object.sleep">__sleep()</link>,
    <link linkend="object.destruct">__destruct()</link>.
    Это не связано с переполнением буфера стека и не связано с безопасностью.
    </para>
   </listitem>
   <listitem>
    <para>
     <!--<link linkend="ini.zend.reserved_stack_size">-->zend.reserved_stack_size<!--</link>-->
     — это новая INI-директива, которая устанавливает зарезервированный размер стека в байтах.
     Это значение вычитается из максимального размера стека
     в качестве буфера при проверке размера стека.
    </para>
   </listitem>
   </itemizedlist>
 </sect2>

 <sect2 xml:id="migration83.other-changes.performance">
  <title>Производительность</title>

  <sect3 xml:id="migration83.other-changes.performance.dom">
   <title>Модуль DOM</title>

   <para>
    При циклическом просмотре списка узлов в объекте <classname>DOMNodeList</classname> теперь работает кеширование.
    Поэтому запрос элементов по умолчанию больше не занимает квадратичное время.
   </para>

   <para>
    Получение текстового содержимого из узлов теперь избегает выделения памяти,
    что даёт прирост производительности.
   </para>

   <para>
    Метод <methodname>DOMChildNode::remove</methodname> теперь работает с производительностью O(1).
   </para>
  </sect3>

  <sect3 xml:id="migration83.other-changes.performance.standard">
   <title>Standard</title>

   <para>
    Проверка ошибок флагов в функции <function>file</function> теперь примерно на 7 % быстрее.
   </para>
  </sect3>

  <sect3 xml:id="migration83.other-changes.performance.spl">
   <title>Библиотека SPL</title>

   <para>
    Класс <classname>RecursiveDirectoryIterator</classname> теперь выполняет
    меньше операций ввода-вывода при циклическом переборе каталога.
   </para>
  </sect3>
 </sect2>

</sect1>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
