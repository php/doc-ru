<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: ca9dbbbd2dcac26d56bbbb87539297e4589bd709 Maintainer: sergey Status: ready -->
<!-- Reviewed: no -->
<sect1 xml:id="migration80.deprecated">
 <title>Функциональность, объявленная устаревшей в PHP 8.0.x</title>

 <sect2 xml:id="migration80.deprecated.core">
  <title>Ядро PHP</title>

  <itemizedlist>
   <listitem>
    <para>
     Если за параметром со значением по умолчанию следует обязательный параметр, то значение по умолчанию
     не имеет смысла. С PHP 8.0.0 подобный порядок параметров объявлен устаревшим и может быть исправлен путём
     удаления значения по умолчанию:
    </para>
    <para>
     <programlisting role="php">
<![CDATA[
<?php
function test($a = [], $b) {} // До
function test($a, $b) {}      // После
?>
]]>
     </programlisting>
    </para>
    <para>
     Одним из исключений из этого правила являются параметры вида <code>Type $param = null</code>, где
     значение по умолчанию null делает тип неявно обнуляемым. Это пока что ещё разрешено, но вместо
     этого лучше рекомендуется использовать явный тип nullable:
    </para>
    <para>
     <programlisting role="php">
<![CDATA[
<?php
function test(A $a = null, $b) {} // По-прежнему разрешено
function test(?A $a, $b) {}       // Рекомендуется
?>
]]>
     </programlisting>
    </para>
   </listitem>
   <listitem>
    <para>
     Вызов <function>get_defined_functions</function> с явно заданным значением &false;
     в <parameter>exclude_disabled</parameter> устарел и больше не имеет смысла.
     <function>get_defined_functions</function> никогда не будет возвращать отключённые функции.
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration80.deprecated.enchant">
  <title>Enchant</title>

  <itemizedlist>
   <listitem>
    <para>
     <function>enchant_broker_set_dict_path</function> и
     <function>enchant_broker_get_dict_path</function>
     объявлены устаревшими, поскольку они недоступны ни в libenchant &lt; 1.5 ни в
     libenchant-2.
    </para>
   </listitem>
   <listitem>
    <para>
     <function>enchant_dict_add_to_personal</function> объявлена устаревшей; используйте
     вместо неё <function>enchant_dict_add</function>.
    </para>
   </listitem>
   <listitem>
    <para>
     <function>enchant_dict_is_in_session</function> объявлена устаревшей; используйте
     вместо неё <function>enchant_dict_is_added</function>.
    </para>
   </listitem>
   <listitem>
    <para>
     <function>enchant_broker_free</function> и <function>enchant_broker_free_dict</function> объявлены
     устаревшими; вместо неё примените к объекту функцию unset.
    </para>
   </listitem>
   <listitem>
    <para>
     Константа <constant>ENCHANT_MYSPELL</constant> и <constant>ENCHANT_ISPELL</constant> объявлены
     устаревшими.
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration80.deprecated.libxml">
  <title>LibXML</title>

  <para>
   <function>libxml_disable_entity_loader</function> объявлена устаревшей. Поскольку теперь используется libxml 2.9.0,
   в котором загрузка внешних объектов по умолчанию отключена, поэтому использование этой функции
   больше не требуется для защиты от XXE-атак, если не используется (все ещё уязвимая) <constant>LIBXML_NOENT</constant>.
   В этом случае рекомендуется провести рефакторинг кода с помощью
   <function>libxml_set_external_entity_loader</function>, чтобы подавить загрузку внешних сущностей.
  </para>
 </sect2>

 <sect2 xml:id="migration80.deprecated.pgsql">
  <title>PGSQL / PDO PGSQL</title>

  <itemizedlist>
   <listitem>
    <para>
     Константа <constant>PGSQL_LIBPQ_VERSION_STR</constant> теперь имеет то же значение,
     что и <constant>PGSQL_LIBPQ_VERSION</constant> и поэтому объявлена устаревшей.
    </para>
   </listitem>
   <listitem>
    <para>
     Псевдонимы функций в модуле pgsql объявлены устаревшими.
     Смотрите в следующем списке, какие функции следует использовать вместо них:
    </para>
    <para>
     <simplelist>
      <member><function>pg_errormessage</function> → <function>pg_last_error</function></member>
      <member><function>pg_numrows</function> → <function>pg_num_rows</function></member>
      <member><function>pg_numfields</function> → <function>pg_num_fields</function></member>
      <member><function>pg_cmdtuples</function> → <function>pg_affected_rows</function></member>
      <member><function>pg_fieldname</function> → <function>pg_field_name</function></member>
      <member><function>pg_fieldsize</function> → <function>pg_field_size</function></member>
      <member><function>pg_fieldtype</function> → <function>pg_field_type</function></member>
      <member><function>pg_fieldnum</function> → <function>pg_field_num</function></member>
      <member><function>pg_result</function> → <function>pg_fetch_result</function></member>
      <member><function>pg_fieldprtlen</function> → <function>pg_field_prtlen</function></member>
      <member><function>pg_fieldisnull</function> → <function>pg_field_is_null</function></member>
      <member><function>pg_freeresult</function> → <function>pg_free_result</function></member>
      <member><function>pg_getlastoid</function> → <function>pg_last_oid</function></member>
      <member><function>pg_locreate</function> → <function>pg_lo_create</function></member>
      <member><function>pg_lounlink</function> → <function>pg_lo_unlink</function></member>
      <member><function>pg_loopen</function> → <function>pg_lo_open</function></member>
      <member><function>pg_loclose</function> → <function>pg_lo_close</function></member>
      <member><function>pg_loread</function> → <function>pg_lo_read</function></member>
      <member><function>pg_lowrite</function> → <function>pg_lo_write</function></member>
      <member><function>pg_loreadall</function> → <function>pg_lo_read_all</function></member>
      <member><function>pg_loimport</function> → <function>pg_lo_import</function></member>
      <member><function>pg_loexport</function> → <function>pg_lo_export</function></member>
      <member><function>pg_setclientencoding</function> → <function>pg_set_client_encoding</function></member>
      <member><function>pg_clientencoding</function> -> <function>pg_client_encoding</function></member>
     </simplelist>
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration80.deprecated.standard">
  <title>Библиотека стандартных функций</title>

  <itemizedlist>
   <listitem>
    <para>
     Функции сравнения сортировки, возвращающие &true; или &false; теперь сгенерирует предупреждение об устаревшей возможности,
     поэтому их следует переписать, чтобы они возвращали целое число меньше, равное или
     больше нуля.
    </para>
    <para>
     <programlisting role="php">
<![CDATA[
<?php
// Заменить подобный код:
usort($array, fn($a, $b) => $a > $b);
// На этот:
usort($array, fn($a, $b) => $a <=> $b);
?>
]]>
     </programlisting>
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration80.deprecated.zip">
  <title>Zip</title>

  <itemizedlist>
   <listitem>
    <para>
     Использование пустого файла в ZipArchive объявлено устаревшим. Libzip 1.6.0 больше не работает с
     пустыми zip-архивами. Существующее обходное решение будет удалено в следующей версии.
    </para>
   </listitem>
   <listitem>
    <para>
     Процедурный API Zip объявлен устаревшим. Вместо него используйте <classname>ZipArchive</classname>.
     Итерацию по всем записям можно выполнить с помощью <methodname>ZipArchive::statIndex</methodname>
     и цикла <link linkend="control-structures.for">for</link>:
    </para>
    <para>
     <programlisting role="php">
<![CDATA[
<?php
// итерация с использованием процедурного API
assert(is_resource($zip));
while ($entry = zip_read($zip)) {
    echo zip_entry_name($entry);
}

// итерация с использованием объектно-ориентированного API
assert($zip instanceof ZipArchive);
for ($i = 0; $entry = $zip->statIndex($i); $i++) {
    echo $entry['name'];
}
?>
]]>
     </programlisting>
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration80.deprecated.reflection">
  <title>Reflection</title>

  <itemizedlist>
   <listitem>
    <para>
     <methodname>ReflectionFunction::isDisabled</methodname> объявлен устаревшим, так как больше
     невозможно создать <classname>ReflectionFunction</classname> для отключённой функции. Этот
     метод теперь всегда возвращает &false;.
    </para>
   </listitem>
   <listitem>
    <para>
     <methodname>ReflectionParameter::getClass</methodname>,
     <methodname>ReflectionParameter::isArray</methodname> и
     <methodname>ReflectionParameter::isCallable</methodname> объявлены устаревшими.
     Вместо них следует использовать <methodname>ReflectionParameter::getType</methodname> и
     API <classname>ReflectionType</classname>.
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

</sect1><!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
