<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 12b1d4704ea448b55ec155619be1e50c0e67e9f9 Maintainer: sergey Status: ready -->
<!-- Reviewed: no -->
<sect1 xml:id="migration80.incompatible" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>Изменения, ломающие обратную совместимость</title>

 <sect2 xml:id="migration80.incompatible.core">
  <title>Ядро PHP</title>

  <sect3 xml:id="migration80.incompatible.core.string-number-comparision">
   <title>Сравнение строк с числами</title>

   <para>
    Нестрогие сравнения чисел и нечисловых строк теперь работают, как преобразование числа
    в строку с последующим сравнением строк. Сравнение чисел и числовых строк работает,
    как и раньше. В частности, это означает, что <code>0 == "not-a-number"</code> теперь
    выдаст false.
    <informaltable>
     <tgroup cols="3">
      <thead>
       <row>
        <entry>Сравнение</entry>
        <entry>До</entry>
        <entry>После</entry>
       </row>
      </thead>
      <tbody>
       <row>
        <entry><code>0 == "0"</code></entry>
        <entry>&true;</entry>
        <entry>&true;</entry>
       </row>
       <row>
        <entry><code>0 == "0.0"</code></entry>
        <entry>&true;</entry>
        <entry>&true;</entry>
       </row>
       <row>
        <entry><code>0 == "foo"</code></entry>
        <entry>&true;</entry>
        <entry>&false;</entry>
       </row>
       <row>
        <entry><code>0 == ""</code></entry>
        <entry>&true;</entry>
        <entry>&false;</entry>
       </row>
       <row>
        <entry><code>42 == "   42"</code></entry>
        <entry>&true;</entry>
        <entry>&true;</entry>
       </row>
       <row>
        <entry><code>42 == "42foo"</code></entry>
        <entry>&true;</entry>
        <entry>&false;</entry>
       </row>
      </tbody>
     </tgroup>
    </informaltable>
    <!-- RFC: https://wiki.php.net/rfc/string_to_number_comparison -->
   </para>
  </sect3>

  <sect3 xml:id="migration80.incompatible.core.other">
   <title>Другие изменения, ломающие обратную совместимость</title>

   <itemizedlist>
    <listitem>
     <para>
      <literal>match</literal> теперь зарезервированное ключевое слово.
     </para>
    </listitem>
    <listitem>
     <para>
      Ошибки утверждений (assertions) теперь выбрасываются по умолчанию. Если предпочтительнее старое поведение,
      <code>assert.exception=0</code> можно установить в INI-настройках.
     </para>
    </listitem>
    <listitem>
     <para>
      Методы с тем же именем, что и класс, больше не интерпретируются как конструкторы.
      Вместо этого следует использовать метод <link linkend="object.construct">__construct()</link>.
     </para>
    </listitem>
    <listitem>
     <para>
      Возможность статического вызова нестатических методов удалена. Таким образом,
      <function>is_callable</function> завершится ошибкой при проверке нестатического метода с именем класса
      (необходимо проверять с экземпляром объекта).
     </para>
    </listitem>
    <listitem>
     <para>
      Приведения типов <code>(real)</code> и <code>(unset)</code> удалены.
     </para>
    </listitem>
    <listitem>
     <para>
      INI-директива <link linkend="ini.track-errors">track_errors</link> удалена. Это означает,
      что <varname>php_errormsg</varname> больше не актуален. Вместо него можно использовать функцию
      <function>error_get_last</function>.
     </para>
    </listitem>
    <listitem>
     <para>
      Возможность определять константы без учёта регистра была удалена. Третий аргумент
      <function>define</function> больше не может быть &true;.
     </para>
    </listitem>
    <listitem>
     <para>
      Возможность указывать автозагрузчик с помощью функции <function>__autoload</function> была удалена.
      Вместо этого следует использовать <function>spl_autoload_register</function>.
     </para>
    </listitem>
    <listitem>
     <para>
      Аргумент <parameter>errcontext</parameter> больше не передаётся в пользовательские
      обработчики ошибок, заданных с помощью <function>set_error_handler</function>.
     </para>
    </listitem>
    <listitem>
     <para>
      <function>create_function</function> была удалена. Вместо неё можно использовать анонимные функции.
     </para>
    </listitem>
    <listitem>
     <para>
      <function>each</function> была удалена. Вместо неё можно использовать &foreach;
      или <classname>ArrayIterator</classname>.
     </para>
    </listitem>
    <listitem>
     <para>
      Возможность отвязать <varname>this</varname> от замыканий, которые были созданы из метода
      с использованием <methodname>Closure::fromCallable</methodname> или
      <methodname>ReflectionMethod::getClosure</methodname>, была удалена.
     </para>
    </listitem>
    <listitem>
     <para>
      Возможность отвязать <varname>this</varname> от надлежащих замыканий, содержащих использование
      <varname>this</varname>, также была удалена.
     </para>
    </listitem>
    <listitem>
     <para>
      Возможность использования <function>array_key_exists</function> с объектами была удалена.
      Вместо этого можно использовать <function>isset</function> или <function>property_exists</function>.
     </para>
    </listitem>
    <listitem>
     <para>
      Работа параметра <parameter>key</parameter> в функции <function>array_key_exists</function>
      теперь приведена в соответствии с <function>isset</function> и
      обычным доступом к массиву. Все типы ключей теперь используют обычное приведение типов,
      массив/объект к ключе приведёт к выбрасыванию <classname>TypeError</classname>.
     </para>
    </listitem>
    <listitem>
     <para>
      Любой массив, у которого в качестве первого числового ключа указано число <replaceable>n</replaceable>,
      будет использовать <replaceable>n+1</replaceable> для своего следующего неявного ключа, даже если <replaceable>n</replaceable>
      отрицательно.
      <!-- RFC: https://wiki.php.net/rfc/negative_array_index -->
     </para>
    </listitem>
    <listitem>
     <para>
      Уровень error_reporting по умолчанию теперь <constant>E_ALL</constant>. Ранее он исключал
      <constant>E_NOTICE</constant> и <constant>E_DEPRECATED</constant>.
     </para>
    </listitem>
    <listitem>
     <para>
      <link linkend="ini.display-startup-errors">display_startup_errors</link> теперь включён
      по умолчанию.
     </para>
    </listitem>
    <listitem>
     <para>
      Использование <type>parent</type> внутри класса, у которого нет родителя, теперь приведёт
      к фатальной ошибке во время компиляции.
     </para>
    </listitem>
    <listitem>
     <para>
      Оператор <literal>@</literal> больше не подавляет фатальные ошибки
      (<constant>E_ERROR</constant>, <constant>E_CORE_ERROR</constant>,
      <constant>E_COMPILE_ERROR</constant>, <constant>E_USER_ERROR</constant>,
      <constant>E_RECOVERABLE_ERROR</constant>, <constant>E_PARSE</constant>). Обработчики ошибок,
      которые ожидают, что error_reporting будет иметь значение <literal>0</literal> при использовании оператора <literal>@</literal>,
      должны делать такие проверки через битовую маску:
     </para>
     <para>
      <programlisting role="php">
<![CDATA[
<?php
// Замените это
function my_error_handler($err_no, $err_msg, $filename, $linenum) {
    if (error_reporting() == 0) {
        return false; // Ошибка проигнорирована
    }
    // ...
}

// На это
function my_error_handler($err_no, $err_msg, $filename, $linenum) {
    if (!(error_reporting() & $err_no)) {
        return false; // Ошибка проигнорирована
    }
    // ...
}
?>
]]>
      </programlisting>
     </para>
     <para>
      Кроме этого, обязательно следует скрыть отображение сообщений об ошибках в производственной среде,
      которые могут привести к утечке информации. Проверьте, что <code>display_errors=Off</code>
      используется вместе с включённой записью журнала ошибок.
     </para>
    </listitem>
    <listitem>
     <para>
      <literal>#[</literal> больше не интерпретируется как начало комментария,
      так как этот синтаксис теперь используется для атрибутов.
      <!-- RFC: https://wiki.php.net/rfc/shorter_attribute_syntax_change -->
     </para>
    </listitem>
    <listitem>
     <para>
      Ошибки наследования из-за несовместимых сигнатур методов (нарушения LSP) теперь всегда
      вызывают фатальную ошибку. Ранее в некоторых случаях выдавалось предупреждение.
      <!-- RFC: https://wiki.php.net/rfc/lsp_errors -->
     </para>
    </listitem>
    <listitem>
     <para>
      Приоритет оператора конкатенации изменился относительно сдвигов битов и сложения,
      а также вычитания.
     </para>
     <para>
      <programlisting role="php">
<![CDATA[
<?php
echo "Сумма: " . $a + $b;
// ранее интерпретировалось как:
echo ("Сумма: " . $a) + $b;
// сейчас интерпретируется как:
echo "Сумма:" . ($a + $b);
?>
]]>
      </programlisting>
      <!-- RFC: https://wiki.php.net/rfc/concatenation_precedence -->
     </para>
    </listitem>
    <listitem>
     <para>
      Аргументы со значением по умолчанию, которые преобразуется в &null; во время выполнения, больше не будут неявно помечать
      тип аргумента как nullable. Вместо этого должно использоваться либо явный тип, допускающий значение null,
      либо явное значение &null; по умолчанию.
     </para>
     <para>
      <programlisting role="php">
<![CDATA[
<?php
// Замените этот код:
function test(int $arg = CONST_RESOLVING_TO_NULL) {}
// На этот:
function test(?int $arg = CONST_RESOLVING_TO_NULL) {}
// На этот (альтернативный вариант):
function test(int $arg = null) {}
?>
]]>
      </programlisting>
     </para>
    </listitem>
    <listitem>
     <para>
      Ряд предупреждений преобразован в исключения <classname>Error</classname>:
     </para>
     <para>
      <simplelist>
       <member>
        Попытка записи в свойство несуществующего объекта. Ранее это
        неявно создавало объект stdClass в случае null, false и пустых строк.
       </member>
       <member>
        Попытка добавить элемент в массив, для которого
        уже используется ключ PHP_INT_MAX.
       </member>
       <member>
        Попытка использовать недопустимый тип (массив или объект) в качестве ключа массива или
        смещения строки.
       </member>
       <member>Попытка записать в индекс массива скалярное значение.</member>
       <member>Попытка распаковать значение, не являющее массивом/Traversable.</member>
       <member>
        Попытка получить доступ к неквалифицированным константам, которые не определены.
        Ранее неквалифицированный доступ к константам приводил к предупреждению и интерпретировался как строка.
       </member>
      </simplelist>
     </para>
     <para>
      Ряд уведомлений преобразован в предупреждения:
     </para>
     <para>
      <simplelist>
       <member>Попытка прочитать неопределённую переменную.</member>
       <member>Попытка прочитать неопределённое свойство.</member>
       <member>Попытка прочитать неопределённый ключ массива.</member>
       <member>Попытка прочитать свойство не-объекта.</member>
       <member>Попытка получить доступ к индексу массива не-массива.</member>
       <member>Попытка преобразовать массив в строку.</member>
       <member>Попытка использовать ресурс в качестве ключа массива.</member>
       <member>Попытка использовать null, логическое значение или число с плавающей точкой в качестве строкового смещения.</member>
       <member>Попытка прочитать смещение строки за пределами допустимой границы.</member>
       <member>Попытка присвоить смещению строки пустую строку.</member>
      </simplelist>
      <!-- RFC: https://wiki.php.net/rfc/engine_warnings -->
     </para>
    </listitem>
    <listitem>
     <para>
      При попытке назначить несколько байтов смещению строки теперь будет выдано предупреждение.
     </para>
    </listitem>
    <listitem>
     <para>
      Неожиданные символы в исходных файлах (например, байты NUL за пределами строк) теперь будут приводить к исключению
      <classname>ParseError</classname> вместо предупреждения при компиляции.
     </para>
    </listitem>
    <listitem>
     <para>
      Неперехваченные исключения теперь проходят процедуру "чистого завершения", это означает, что после неперехваченного исключения
      будут вызываться деструкторы.
     </para>
    </listitem>
    <listitem>
     <para>
      Фатальная ошибка времени компиляции "Only variables can be passed by reference" была отложена
      до времени выполнения и преобразована в исключение <classname>Error</classname>
      "Argument cannot be passed by reference".
     </para>
    </listitem>
    <listitem>
     <para>
      Некоторые уведомления "Only variables can be passed by reference" были преобразованы
      в исключение "Argument cannot be passed by reference".
     </para>
    </listitem>
    <listitem>
     <para>
      Сгенерированное имя для анонимных классов изменилось. Теперь он будет включать имя
      первого родителя или интерфейса:
     </para>
     <para>
      <programlisting role="php">
<![CDATA[
<?php
new class extends ParentClass {};
// -> ParentClass@anonymous
new class implements FirstInterface, SecondInterface {};
// -> FirstInterface@anonymous
new class {};
// -> class@anonymous
?>
]]>
      </programlisting>
     </para>
     <para>
      За новыми именами по-прежнему будет следовать NUL-байт и уникальный суффикс.
     </para>
    </listitem>
    <listitem>
     <para>
      Ссылки на неабсолютные трейты методов в адаптациях псевдонимов трейтов теперь должны быть
      однозначными:
     </para>
     <para>
      <programlisting role="php">
<![CDATA[
<?php
class X {
    use T1, T2 {
        func as otherFunc;
    }
    function func() {}
}
?>
]]>
      </programlisting>
     </para>
     <para>
      Если существуют и <code>T1::func()</code>, и <code>T2::func()</code>, этот код ранее
      принимался без уведомления, и предполагалось, что func ссылается на <code>T1::func</code>. Теперь вместо этого будет
      выброшена фатальная ошибка: необходимо явно указать <code>T1::func</code> или <code>T2::func</code>.
     </para>
    </listitem>
    <listitem>
     <para>
      Сигнатура абстрактных методов, определённых в трейтах, теперь проверяется по методу
      реализующего класса:
     </para>
     <para>
      <programlisting role="php">
<![CDATA[
<?php
trait MyTrait {
    abstract private function neededByTrait(): string;
}

class MyClass {
    use MyTrait;

    // Ошибка из-за несоответствия типа возвращаемого значения.
    private function neededByTrait(): int { return 42; }
}
?>
]]>
      </programlisting>
      <!-- RFC: https://wiki.php.net/rfc/abstract_trait_method_validation -->
     </para>
    </listitem>
    <listitem>
     <para>
      Отключённые функции теперь обрабатываются точно так же, как несуществующие функции. Вызов отключённой
      функции сообщит, что нет такой функции, это даёт возможность переопределить отключённую функцию.
     </para>
    </listitem>
    <listitem>
     <para>
      Оболочки потока <literal>data://</literal> больше не доступны для записи, что соответствует документированному
      поведению.
     </para>
    </listitem>
    <listitem>
     <para>
      Арифметические и побитовые операторы <literal>+</literal>, <literal>-</literal>,
      <literal>*</literal>, <literal>/</literal>, <literal>**</literal>, <literal>%</literal>,
      <literal>&lt;&lt;</literal>, <literal>&gt;&gt;</literal>, <literal>&amp;</literal>,
      <literal>|</literal>, <literal>^</literal>, <literal>~</literal>, <literal>++</literal>,
      <literal>--</literal> теперь будут последовательно выдавать <classname>TypeError</classname>, когда одним
      из операндов является массив (&array;), ресурс (&resource;) или не перегруженный объект (&object;). Единственным исключением
      из этого правила является операция слияния массивов <literal>+</literal>, которая по-прежнему поддерживается.
      <!-- RFC: https://wiki.php.net/rfc/arithmetic_operator_type_checks -->
     </para>
    </listitem>
    <listitem>
     <para>
      Приведение с плавающей точкой в строку теперь всегда будет вести себя независимо от локали.
     </para>
     <para>
      <programlisting role="php">
<![CDATA[
<?php
setlocale(LC_ALL, "de_DE");
// Ранее:  3,14
// Теперь: 3.14
?>
]]>
      </programlisting>
     </para>
     <para>
      Смотрите <function>printf</function>, <function>number_format</function> и
      <methodname>NumberFormatter</methodname> для получения информации о способах настройки форматирования чисел.
      <!-- RFC: https://wiki.php.net/rfc/locale_independent_float_to_string -->
     </para>
    </listitem>
    <listitem>
     <para>
      Удалена поддержка устаревших фигурных скобок для доступа к смещению.
     </para>
     <para>
      <programlisting role="php">
<![CDATA[
<?php
// Вместо:
$array{0};
$array{"key"};
// Используйте:
$array[0];
$array["key"];
?>
]]>
      </programlisting>
      <!-- RFC: https://wiki.php.net/rfc/deprecate_curly_braces_array_access -->
     </para>
    </listitem>
    <listitem>
     <para>
      Применение модификатора final к закрытому методу теперь приведёт к предупреждению, если этот метод
      не является конструктором.
      <!-- FC: https://wiki.php.net/rfc/inheritance_private_methods -->
     </para>
    </listitem>
    <listitem>
     <para>
      Если в конструкторе объекта используется <function>exit</function>, то деструктор объекта больше
      не будет вызываться. Это соответствует поведению, когда конструктор выбрасывает исключение.
     </para>
    </listitem>
    <listitem>
     <para>
      Имена в пространстве имён больше не могут содержать пробелы: <code>Foo\Bar</code> будет распознаваться
      как имя в пространстве имён, <code>Foo \ Bar</code> - нет. И наоборот, зарезервированные ключевые слова теперь
      разрешены в качестве сегментов пространства имён, что также может изменить интерпретацию кода:
      <code>new\x</code> теперь совпадает с <code>constant('new\x')</code>,
      но не с <code>new \x()</code>.
      <!-- RFC: https://wiki.php.net/rfc/namespaced_names_as_token -->
     </para>
    </listitem>
    <listitem>
     <para>
      Для вложенных тернарных операторов теперь требуется явное указание скобок.
      <!-- RFC: https://wiki.php.net/rfc/ternary_associativity -->
     </para>
    </listitem>
    <listitem>
     <para>
      <function>debug_backtrace</function> и <methodname>Exception::getTrace</methodname> больше не будут
      предоставлять ссылки на аргументы. Невозможно изменить аргументы функции
      через трассировку.
     </para>
    </listitem>
    <listitem>
     <para>
      Обработка числовых строк была изменена, чтобы сделать её более понятной и менее подверженной ошибкам.
      Завершающие пробелы теперь разрешены в числовых строках для согласованности с тем, как обрабатываются начальные
      пробелы. В основном это влияет на:
     </para>
     <para>
      <simplelist>
       <member>Функцию <function>is_numeric</function></member>
       <member>Сравнение строк со строками</member>
       <member>Объявления типов</member>
       <member>Операции увеличения и уменьшения</member>
      </simplelist>
     </para>
     <para>
      Понятие "ведущая числовая строка" в основном было отброшено; случаи, когда это осталось, существуют
      для облегчения миграции. Строки, которые выдавали <constant>E_NOTICE</constant> "A non well-formed numeric value encountered",
      теперь будут выдавать <constant>E_WARNING</constant> "A non-numeric value encountered",
      а все строки, которые выдавали <constant>E_WARNING</constant> "A non-numeric value encountered"
      теперь будет выдавать <classname>TypeError</classname>. В основном это влияет на:
     </para>
     <para>
      <simplelist>
       <member>Арифметические операции</member>
       <member>Побитовые операции</member>
      </simplelist>
     </para>
     <para>
      Это изменение <constant>E_WARNING</constant> на <classname>TypeError</classname> также влияет на
      <constant>E_WARNING</constant> "Illegal string offset 'string'" для недопустимых смещений строки.
      Поведение явных приведений к int/float из строк не изменилось.
      <!-- RFC: https://wiki.php.net/rfc/saner-numeric-strings -->
     </para>
    </listitem>
    <listitem>
     <para>
      Теперь у магических методов будут проверяться аргументы и возвращаемые типы, если они объявлены.
      Сигнатура должна соответствовать следующему списку:
     </para>
     <para>
      <simplelist>
       <member><code>__call(string $name, array $arguments): mixed</code></member>
       <member><code>__callStatic(string $name, array $arguments): mixed</code></member>
       <member><code>__clone(): void</code></member>
       <member><code>__debugInfo(): ?array</code></member>
       <member><code>__get(string $name): mixed</code></member>
       <member><code>__invoke(mixed $arguments): mixed</code></member>
       <member><code>__isset(string $name): bool</code></member>
       <member><code>__serialize(): array</code></member>
       <member><code>__set(string $name, mixed $value): void</code></member>
       <member><code>__set_state(array $properties): object</code></member>
       <member><code>__sleep(): array</code></member>
       <member><code>__unserialize(array $data): void</code></member>
       <member><code>__unset(string $name): void</code></member>
       <member><code>__wakeup(): void</code></member>
      </simplelist>
      <!-- RFC: https://wiki.php.net/rfc/magic-methods-signature -->
     </para>
    </listitem>
    <listitem>
     <para>
      Ключи массива <function>call_user_func_array</function> теперь будут интерпретироваться как имена параметров,
      а не игнорироваться.
     </para>
    </listitem>
    <listitem>
     <para>
      Объявление функции с именем <literal>assert()</literal> внутри пространства имён больше
      не допускается и вызывает <constant>E_COMPILE_ERROR</constant>.
      Функция <function>assert</function> подвергается специальной обработке со стороны движка,
      что может привести к несогласованному поведению при определении одноимённой функции в пространстве имён.
     </para>
    </listitem>
   </itemizedlist>
  </sect3>
 </sect2>

 <sect2 xml:id="migration80.incompatible.resource2object">
  <title>Преобразование ресурсов в объекты</title>

  <para>
   Несколько ресурсов (&resource;) были преобразованы в объекты (&object;).
   Проверки возвращаемого значения с использованием <function>is_resource</function> следует заменить проверками на &false;.
  </para>
  <itemizedlist>
   <listitem>
    <para>
     <function>curl_init</function> теперь возвращает объект <classname>CurlHandle</classname>
     вместо ресурса (&resource;). Функция <function>curl_close</function> больше не имеет смысла,
     вместо этого экземпляр <classname>CurlHandle</classname> автоматически уничтожается, если на него
     больше нет ссылки.
    </para>
   </listitem>
   <listitem>
    <para>
     <function>curl_multi_init</function> теперь возвращает объект <classname>CurlMultiHandle</classname>
     вместо ресурса (&resource;). Функция <function>curl_multi_close</function> больше не имеет смысла,
     вместо этого экземпляр <classname>CurlMultiHandle</classname> автоматически уничтожается, если на него
     больше нет ссылки.
    </para>
   </listitem>
   <listitem>
    <para>
     <function>curl_share_init</function> теперь возвращает объект <classname>CurlShareHandle</classname>
     вместо ресурса (&resource;). Функция <function>curl_share_close</function> больше не имеет смысла,
     вместо этого экземпляр <classname>CurlShareHandle</classname> автоматически уничтожается, если на него
     больше нет ссылки.
    </para>
   </listitem>
   <listitem>
    <para>
     <function>enchant_broker_init</function> теперь возвращает объект <classname>EnchantBroker</classname>
     вместо ресурса (&resource;).
    </para>
   </listitem>
   <listitem>
    <para>
     <function>enchant_broker_request_dict</function> и
     <function>enchant_broker_request_pwl_dict</function> теперь возвращают
     <classname>EnchantDictionary</classname> объект вместо ресурса (&resource;).
    </para>
   </listitem>
   <listitem>
    <para>
     Модуль GD теперь использует объекты <classname>GdImage</classname> в качестве базовой структуры данных
     для изображений, а не ресурсы (&resource;).
     Функция <function>imagedestroy</function> больше не имеет смысла; вместо этого экземпляр
     <classname>GdImage</classname> автоматически уничтожается, если на него больше нет ссылки.
    </para>
   </listitem>
   <listitem>
    <para>
     <function>openssl_x509_read</function> и <function>openssl_csr_sign</function> теперь возвращают
     объект <classname>OpenSSLCertificate</classname> вместо ресурса (&resource;).
     Функция <function>openssl_x509_free</function> объявлена устаревшей и больше не имеет смысла, вместо этого экземпляр
     <classname>OpenSSLCertificate</classname> автоматически уничтожается, если на него
     больше не ссылаются.
    </para>
   </listitem>
   <listitem>
    <para>
     <function>openssl_csr_new</function> теперь возвращает объект
     <classname>OpenSSLCertificateSigningRequest</classname> вместо ресурса (&resource;).
    </para>
   </listitem>
   <listitem>
    <para>
     <function>openssl_pkey_new</function> теперь возвращает объект
     <classname>OpenSSLAsymmetricKey</classname> вместо ресурса (&resource;).
     Функция <function>openssl_pkey_free</function> объявлена устаревшей и больше не имеет смысла, вместо этого экземпляр
     <classname>OpenSSLAsymmetricKey</classname> автоматически уничтожается, если на него
     больше не ссылаются.
    </para>
   </listitem>
   <listitem>
    <para>
     <function>shmop_open</function> теперь возвращает объект <classname>Shmop</classname> вместо
     ресурса (&resource;). Функция <function>shmop_close</function> больше не имеет смысла и объявлена устаревшей;
     вместо этого экземпляр <classname>Shmop</classname> автоматически уничтожается, если на него
     больше не ссылаются.
    </para>
   </listitem>
   <listitem>
    <para>
     <function>socket_create</function>, <function>socket_create_listen</function>,
     <function>socket_accept</function>, <function>socket_import_stream</function>,
     <function>socket_addrinfo_connect</function>, <function>socket_addrinfo_bind</function> и
     <function>socket_wsaprotocol_info_import</function> теперь возвращают объект
     <classname>Socket</classname> вместо ресурса (&resource;).
     <function>socket_addrinfo_lookup</function> теперь возвращает массив объектов
     <classname>AddressInfo</classname> вместо массива ресурсов (&resource;).
    </para>
   </listitem>
   <listitem>
    <para>
     <function>msg_get_queue</function> теперь возвращают объект <classname>SysvMessageQueue</classname>
     вместо ресурса (&resource;).
    </para>
   </listitem>
   <listitem>
    <para>
     <function>sem_get</function> теперь возвращают объект <classname>SysvSemaphore</classname>
     вместо ресурса (&resource;).
    </para>
   </listitem>
   <listitem>
    <para>
     <function>shm_attach</function> теперь возвращают объект <classname>SysvSharedMemory</classname>
     вместо ресурса (&resource;).
    </para>
   </listitem>
   <listitem>
    <para>
     <function>xml_parser_create</function> и <function>xml_parser_create_ns</function> теперь возвращают
     объект <classname>XMLParser</classname> вместо ресурса (&resource;).
     Функция <function>xml_parser_free</function> больше не имеет смысла, вместо этого экземпляр XMLParser
     автоматически уничтожается, если на него больше не ссылаются.
    </para>
   </listitem>
   <listitem>
    <para>
     Функции <link linkend="book.xmlwriter">XMLWriter</link> теперь принимают и возвращают, соответственно,
     объекты <classname>XMLWriter</classname> вместо ресурсов (&resource;).
    </para>
   </listitem>
   <listitem>
    <para>
     <function>inflate_init</function> теперь возвращает объект <classname>InflateContext</classname>
     вместо ресурса (&resource;).
    </para>
   </listitem>
   <listitem>
    <para>
     <function>deflate_init</function> теперь возвращает объект <classname>DeflateContext</classname>
     вместо ресурса (&resource;).
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration80.incompatible.com">
  <title>COM и .Net (Windows)</title>

  <para>
   Возможность импорта констант без учёта регистра из библиотек типов была удалена.
   Второй аргумент <function>com_load_typelib</function> больше не может быть false;
   <link linkend="ini.com.autoregister-casesensitive">com.autoregister_casesensitive</link>
   больше нельзя отключить; Маркеры без учёта регистра в
   <link linkend="ini.com.typelib-file">com.typelib_file</link> игнорируются.
  </para>
 </sect2>

 <sect2 xml:id="migration80.incompatible.curl">
  <title>CURL</title>

  <para>
   <constant>CURLOPT_POSTFIELDS</constant> больше не принимает объекты как массивы.
   Чтобы интерпретировать объект как массив, выполните явное приведение <code>(array)</code>.
   То же самое относится и к другим параметрам, принимающим массивы.
  </para>
 </sect2>

 <sect2 xml:id="migration80.incompatible.datetime">
  <title>Дата и время</title>

  <para>
   Для работы функций <function>mktime</function> и <function>gmmktime</function> теперь требуется
   хотя бы один аргумент. <function>time</function> может использоваться для получения текущей отметки времени.
  </para>
 </sect2>

 <sect2 xml:id="migration80.incompatible.dom">
  <title>DOM</title>

  <para>
   Были удалены нереализованные классы из модуля DOM, которые не имели обработчика и содержали
   тестовые данные. Эти классы также были удалены в последней версии
   стандарта DOM:
  </para>
  <para>
   <simplelist>
    <member>DOMNameList</member>
    <member>DomImplementationList</member>
    <member>DOMConfiguration</member>
    <member>DomError</member>
    <member>DomErrorHandler</member>
    <member>DOMImplementationSource</member>
    <member>DOMLocator</member>
    <member>DOMUserDataHandler</member>
    <member>DOMTypeInfo</member>
   </simplelist>
  </para>
 </sect2>

 <sect2 xml:id="migration80.incompatible.enchant">
  <title>Enchant</title>

  <itemizedlist>
   <listitem>
    <para>
     <function>enchant_broker_list_dicts</function>, <function>enchant_broker_describe</function> и
     <function>enchant_dict_suggest</function> теперь возвращают пустой массив вместо &null;.
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration80.incompatible.exif">
  <title>Exif</title>

  <para>
   <function>read_exif_data</function> была удалена; Вместо неё следует
   использовать <function>exif_read_data</function>.
  </para>
 </sect2>

 <sect2 xml:id="migration80.incompatible.filter">
  <title>Фильтрация данных</title>

  <itemizedlist>
   <listitem>
    <para>
     Флаги <constant>FILTER_FLAG_SCHEME_REQUIRED</constant> и
     <constant>FILTER_FLAG_HOST_REQUIRED</constant> для фильтра
     <constant>FILTER_VALIDATE_URL</constant> были удалены. <literal>scheme</literal>
     и <literal>host</literal> необходимы (и всегда были).
    </para>
   </listitem>
   <listitem>
    <para>
     Типы <constant>INPUT_REQUEST</constant> и <constant>INPUT_SESSION</constant> для
     <function>filter_input</function> и ей производных были удалены. Они никогда не были реализованы,
     а попытка их использования всегда приводила к вызову предупреждения.
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration80.incompatible.gd">
  <title>GD</title>

  <itemizedlist>
   <listitem>
    <para>
     Устаревшие функции <function>image2wbmp</function> были удалены.
     <!-- RFC: https://wiki.php.net/rfc/image2wbmp -->
    </para>
   </listitem>
   <listitem>
    <para>
     Устаревшие функции <function>png2wbmp</function> и <function>jpeg2wbmp</function>
     были удалены.
     <!-- RFC: https://wiki.php.net/rfc/deprecate-png-jpeg-2wbmp -->
    </para>
   </listitem>
   <listitem>
    <para>
     Параметр <parameter>mode</parameter> по умолчанию для функции <function>imagecropauto</function> больше
     не принимает значение <literal>-1</literal>. Вместо этого следует использовать <constant>IMG_CROP_DEFAULT</constant>.
    </para>
   </listitem>
   <listitem>
    <para>
     В Windows, <filename>php_gd2.dll</filename> переименован в <filename>php_gd.dll</filename>.
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration80.incompatible.gmp">
  <title>GMP</title>

  <para>
   <function>gmp_random</function> была удалена. Вместо неё следует использовать
   <function>gmp_random_range</function> или
   <function>gmp_random_bits</function>.
  </para>
 </sect2>

 <sect2 xml:id="migration80.incompatible.iconv">
  <title>Iconv</title>

  <para>
   Реализации iconv, которые неправильно устанавливают <varname>errno</varname> в случае возникновения ошибок,
   больше не поддерживаются.
  </para>
 </sect2>

 <sect2 xml:id="migration80.incompatible.imap">
  <title>IMAP</title>

  <itemizedlist>
   <listitem>
    <para>
     Неиспользуемый аргумент <parameter>default_host</parameter> функции
     <function>imap_headerinfo</function> был удалён.
    </para>
   </listitem>
   <listitem>
    <para>
     Функция <function>imap_header</function>, которая является псевдонимом
     <function>imap_headerinfo</function>, была удалена.
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration80.incompatible.intl">
  <title>Функции интернационализации</title>

  <itemizedlist>
   <listitem>
    <para>
     Устаревшая константа <constant>INTL_IDNA_VARIANT_2003</constant> удалена.
     <!-- RFC: https://wiki.php.net/rfc/deprecate-and-remove-intl_idna_variant_2003 -->
    </para>
   </listitem>
   <listitem>
    <para>
     Устаревшая константа <constant>Normalizer::NONE</constant> удалена.
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration80.incompatible.ldap">
  <title>LDAP</title>

  <itemizedlist>
   <listitem>
    <para>
     Устаревшие функции <function>ldap_sort</function>,
     <function>ldap_control_paged_result</function> и
     <function>ldap_control_paged_result_response</function> удалены.
    </para>
   </listitem>
   <listitem>
    <para>
     Изменился интерфейс <function>ldap_set_rebind_proc</function>;
     параметр <parameter>callback</parameter> больше не принимает пустые строки; вместо этого
     следует указывать &null;.
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration80.incompatible.mbstring">
  <title>MBString</title>

  <itemizedlist>
   <listitem>
    <para>
     Директива <link linkend="ini.mbstring.func-overload">mbstring.func_overload</link> была удалена.
     Связанные константы <constant>MB_OVERLOAD_MAIL</constant>,
     <constant>MB_OVERLOAD_STRING</constant> и <constant>MB_OVERLOAD_REGEX</constant>
     также были удалены. Наконец, записи <literal>"func_overload"</literal> и
     <literal>"func_overload_list"</literal> в <function>mb_get_info</function> были удалены.
    </para>
   </listitem>
   <listitem>
    <para>
     <function>mb_parse_str</function> больше нельзя использовать без передачи массива результатов.
    </para>
   </listitem>
   <listitem>
    <para>
     Удалён ряд устаревших псевдонимов mbregex. В следующем списке указано,
     какие функции следует использовать вместо них:
    </para>
    <para>
     <simplelist>
      <member><function>mbregex_encoding</function> → <function>mb_regex_encoding</function></member>
      <member><function>mbereg</function> → <function>mb_ereg</function></member>
      <member><function>mberegi</function> → <function>mb_eregi</function></member>
      <member><function>mbereg_replace</function> → <function>mb_ereg_replace</function></member>
      <member><function>mberegi_replace</function> → <function>mb_eregi_replace</function></member>
      <member><function>mbsplit</function> → <function>mb_split</function></member>
      <member><function>mbereg_match</function> → <function>mb_ereg_match</function></member>
      <member><function>mbereg_search</function> → <function>mb_ereg_search</function></member>
      <member><function>mbereg_search_pos</function> → <function>mb_ereg_search_pos</function></member>
      <member><function>mbereg_search_regs</function> → <function>mb_ereg_search_regs</function></member>
      <member><function>mbereg_search_init</function> → <function>mb_ereg_search_init</function></member>
      <member><function>mbereg_search_getregs</function> → <function>mb_ereg_search_getregs</function></member>
      <member><function>mbereg_search_getpos</function> → <function>mb_ereg_search_getpos</function></member>
      <member><function>mbereg_search_setpos</function> → <function>mb_ereg_search_setpos</function></member>
     </simplelist>
    </para>
   </listitem>
   <listitem>
    <para>
     Модификатор <literal>e</literal> для <function>mb_ereg_replace</function> был удалён.
     Вместо него следует использовать<function>mb_ereg_replace_callback</function>.
    </para>
   </listitem>
   <listitem>
    <para>
     Аргумент нестрокового шаблона для <function>mb_ereg_replace</function> теперь будет интерпретироваться как
     строка вместо кодовой точки ASCII. Предыдущее поведение можно восстановить явным
     вызовом <function>chr</function>.
    </para>
   </listitem>
   <listitem>
    <para>
     Аргумент <parameter>needle</parameter> для функций <function>mb_strpos</function>,
     <function>mb_strrpos</function>, <function>mb_stripos</function>,
     <function>mb_strripos</function>, <function>mb_strstr</function>,
     <function>mb_stristr</function>, <function>mb_strrchr</function> и
     <function>mb_strrichr</function> теперь может быть пустым.
    </para>
   </listitem>
   <listitem>
    <para>
     Параметр <parameter>is_hex</parameter>, который не использовался для внутренних целей, был удалён из
     <function>mb_decode_numericentity</function>.
    </para>
   </listitem>
   <listitem>
    <para>
     Устаревшее поведение передачи кодировки в качестве третьего аргумента вместо смещения для функции
     <function>mb_strrpos</function> было удалено; вместо этого в качестве четвёртого аргумента
     следует указать явное смещение <literal>0</literal> с кодировкой.
    </para>
   </listitem>
   <listitem>
    <para>
     Псевдонимы кодировки символов <literal>ISO_8859-*</literal> были заменены на псевдонимы
     <literal>ISO8859-*</literal> для лучшей совместимости с модулем iconv.
     Псевдонимы mbregex ISO 8859 с подчёркиванием (<literal>ISO_8859_*</literal> и
     <literal>ISO8859_*</literal>) также были удалены.
    </para>
   </listitem>
   <listitem>
    <para>
     <function>mb_ereg</function> и <function>mb_eregi</function> теперь будут возвращать
     логическое значение &true;, в случае найденного совпадения.
     Ранее они возвращали целое число <literal>1</literal>, если
     аргумент <parameter>matches</parameter> не был передан, или <code>max(1, strlen($matches[0]))</code>, если
     <parameter>matches</parameter> был не пустой.
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration80.incompatible.oci8">
  <title>OCI8</title>

  <itemizedlist>
   <listitem>
    <para>
     Класс <classname>OCI-Lob</classname> переименован в <classname>OCILob</classname>, а класс
     <classname>OCI-Collection</classname> - в <classname>OCICollection</classname> для имени
     совместимость обеспечивается средствами аннотации типа arginfo PHP 8.
    </para>
   </listitem>
   <listitem>
    <para>
     Некоторые функции псевдонимов объявлены устаревшим.
    </para>
   </listitem>
   <listitem>
    <para>
     <function>oci_internal_debug</function> и её псевдоним <function>ociinternaldebug</function>
     были удалены.
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration80.incompatible.odbc">
  <title>ODBC</title>

  <itemizedlist>
   <listitem>
    <para>
     <function>odbc_connect</function> больше не использует соединения повторно.
    </para>
   </listitem>
   <listitem>
    <para>
     Неиспользуемый параметр <parameter>flags</parameter> функции <function>odbc_exec</function>
     был удалён.
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration80.incompatible.openssl">
  <title>OpenSSL</title>

  <itemizedlist>
   <listitem>
    <para>
     <function>openssl_seal</function> и <function>openssl_open</function> теперь требуют передачи
     <parameter>method</parameter>, так как предыдущее значение по умолчанию <literal>"RC4"</literal>
     считается небезопасным.
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration80.incompatible.pcre">
  <title>Регулярные выражения (совместимые с Perl)</title>

  <para>
   При передаче недопустимых управляющих последовательностей они больше не интерпретируются как литералы. Такое поведение
   ранее требовало модификатора <literal>X</literal>, который теперь игнорируется.
  </para>
 </sect2>

 <sect2 xml:id="migration80.incompatible.pdo">
  <title>Объекты данных PHP</title>

  <itemizedlist>
   <listitem>
    <para>
     Режим обработки ошибок по умолчанию был изменён с "тихого" (silent) на "исключения" (exceptions).
     Подробнее смотрите <link linkend="pdo.error-handling">Ошибки и обработка ошибок</link>.
     <!-- RFC: https://wiki.php.net/rfc/pdo_default_errmode -->
    </para>
   </listitem>
   <listitem>
    <para>
     Изменились сигнатуры некоторых методов PDO:
    </para>
    <para>
     <simplelist>
      <member><code>PDO::query(string $query, ?int $fetchMode  = null, mixed  ...$fetchModeArgs)</code></member>
      <member><code>PDOStatement::setFetchMode(int $mode, mixed ...$args)</code></member>
     </simplelist>
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration80.incompatible.pdo-odbc">
  <title>PDO ODBC</title>

  <para>
   Директива &php.ini;
   <link linkend="ini.pdo-odbc.db2-instance-name">pdo_odbc.db2_instance_name</link>
   была удалена.
  </para>
 </sect2>

 <sect2 xml:id="migration80.incompatible.pdo-mysql">
  <title>PDO MySQL</title>

  <para>
   <methodname>PDO::inTransaction</methodname> теперь сообщает о фактическом состоянии транзакции
   подключения, а не о приблизительном от PDO. Если запрос,
   при условии "неявной фиксации", выполняется, то <methodname>PDO::inTransaction</methodname>
   впоследствии вернёт &false;, так как транзакция будет неактивной.
  </para>
 </sect2>

 <sect2 xml:id="migration80.incompatible.pgsql">
  <title>PostgreSQL</title>

  <itemizedlist>
   <listitem>
    <para>
     Устаревший синтаксис <function>pg_connect</function> с использованием нескольких параметров
     вместо строки подключения больше не поддерживается.
    </para>
   </listitem>
   <listitem>
    <para>
     Устаревшие сигнатуры <function>pg_lo_import</function> и <function>pg_lo_export</function>,
     передающие соединение в качестве последнего аргумента, больше не поддерживаются. Вместо этого соединение должно
     быть передано первым аргументом.
    </para>
   </listitem>
   <listitem>
    <para>
     <function>pg_fetch_all</function> теперь будет возвращать пустой массив вместо &false; для наборов
     результатов с отсутствующими строками.
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration80.incompatible.phar">
  <title>Phar</title>

  <para>
   Метаданные, связанные с phar, больше не будут автоматически десериализоваться, чтобы исправить потенциальные
   уязвимости безопасности из-за создания экземпляров объекта, автозагрузки и т.д.
   <!-- RFC: https://wiki.php.net/rfc/phar_stop_autoloading_metadata -->
  </para>
 </sect2>

 <sect2 xml:id="migration80.incompatible.reflection">
  <title>Reflection</title>

  <itemizedlist>
   <listitem>
    <para>
     Сигнатуры методов
    </para>
    <para>
     <simplelist>
      <member><code>ReflectionClass::newInstance($args)</code></member>
      <member><code>ReflectionFunction::invoke($args)</code></member>
      <member><code>ReflectionMethod::invoke($object, $args)</code></member>
     </simplelist>
    </para>
    <para>
     были изменены на:
    </para>
    <para>
     <simplelist>
      <member><code>ReflectionClass::newInstance(...$args)</code></member>
      <member><code>ReflectionFunction::invoke(...$args)</code></member>
      <member><code>ReflectionMethod::invoke($object, ...$args)</code></member>
     </simplelist>
    </para>
    <para>
     Код, который должен быть совместим как с PHP 7, так и с PHP 8, может использовать следующие сигнатуры:
    </para>
    <para>
     <simplelist>
      <member><code>ReflectionClass::newInstance($arg = null, ...$args)</code></member>
      <member><code>ReflectionFunction::invoke($arg = null, ...$args)</code></member>
      <member><code>ReflectionMethod::invoke($object, $arg = null, ...$args)</code></member>
     </simplelist>
    </para>
   </listitem>
   <listitem>
    <para>
     Метод <methodname>ReflectionType::__toString</methodname> теперь будет возвращать полное отладочное
     представление типа и больше не является устаревшим. В частности, результат будет включать
     индикатор допустимости значений NULL для типов, допускающих значение NULL. Формат возвращаемого значения
     нестабилен и может меняться в зависимости от версии PHP.
    </para>
   </listitem>
   <listitem>
    <para>
     Методы Reflection export() были удалены.
     Вместо этого объекты reflection могут быть преобразованы в строку.
    </para>
   </listitem>
   <listitem>
    <para>
     <methodname>ReflectionMethod::isConstructor</methodname> и
     <methodname>ReflectionMethod::isDestructor</methodname> теперь также возвращают &true; для
     методов интерфейсов <link linkend="object.construct">__construct()</link> и
     <link linkend="object.destruct">__destruct()</link>.
     Раньше это было верно только для методов классов и трейтов.
    </para>
   </listitem>
   <listitem>
    <para>
     Метод <methodname>ReflectionType::isBuiltin</methodname> перемещён в
     <classname>ReflectionNamedType</classname>. У <classname>ReflectionUnionType</classname>
     этого метода нет.
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration80.incompatible.sockets">
  <title>Сокеты</title>

  <itemizedlist>
   <listitem>
    <para>
     Устаревшие <parameter>flags</parameter> <constant>AI_IDN_ALLOW_UNASSIGNED</constant> и
     <constant>AI_IDN_USE_STD3_ASCII_RULES</constant> для
     <function>socket_addrinfo_lookup</function> были удалены.
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration80.incompatible.spl">
  <title>Стандартная библиотека PHP (SPL)</title>

  <itemizedlist>
   <listitem>
    <para>
     <methodname>SplFileObject::fgetss</methodname> был удалён.
    </para>
   </listitem>
   <listitem>
    <para>
     <methodname>SplFileObject::seek</methodname> теперь всегда перемещается на начало
     строки.
     Ранее, позиция <literal>=1</literal> перемещала к началу следующие строки.
    </para>
   </listitem>
   <listitem>
    <para>
     <methodname>SplHeap::compare</methodname> теперь указывает сигнатуру метода. Наследующие классы,
     реализующие этот метод, теперь должны будут использовать совместимую сигнатуру метода.
    </para>
   </listitem>
   <listitem>
    <para>
     <methodname>SplDoublyLinkedList::push</methodname>,
     <methodname>SplDoublyLinkedList::unshift</methodname> и
     <methodname>SplQueue::enqueue</methodname> теперь возвращают <type>void</type> вместо &true;.
    </para>
   </listitem>
   <listitem>
    <para>
     <function>spl_autoload_register</function> теперь всегда будет выбрасывать
     <classname>TypeError</classname> для недопустимых аргументов, поэтому второй аргумент
     <parameter>do_throw</parameter> игнорируется, если для него установлено значение &false;.
    </para>
   </listitem>
   <listitem>
    <para>
     <classname>SplFixedArray</classname> теперь является <interfacename>IteratorAggregate</interfacename>,
     а не <interfacename>Iterator</interfacename>.
     <methodname>SplFixedArray::rewind</methodname>, <methodname>SplFixedArray::current</methodname>,
     <methodname>SplFixedArray::key</methodname>, <methodname>SplFixedArray::next</methodname> и
     <methodname>SplFixedArray::valid</methodname> были удалены. Вместо них был добавлен
     <methodname>SplFixedArray::getIterator</methodname>. Любой код, который использует явную
     итерацию над SplFixedArray, теперь должен получить
     <interfacename>Iterator</interfacename> с помощью
     <methodname>SplFixedArray::getIterator</methodname>. Это означает, что
     <classname>SplFixedArray</classname> теперь безопасно использовать во вложенных циклах.
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration80.incompatible.standard">
  <title>Библиотека стандартных функций</title>

  <itemizedlist>
   <listitem>
    <para>
     <function>assert</function> больше не будет выполнять строковые аргументы, вместо этого они будут
     обрабатываться как любые обычные аргументы. Таким образом, вместо <code>assert('$a == $b')</code> следует использовать
     <code>assert($a == $b)</code>. INI-директива <link
     linkend="ini.assert.quiet-eval">assert.quiet_eval</link> и константа <constant>ASSERT_QUIET_EVAL</constant>
     были удалены, так как они больше не имеют смысла.
    </para>
   </listitem>
   <listitem>
    <para>
     <function>parse_str</function> больше нельзя использовать без указания массива результатов.
    </para>
   </listitem>
   <listitem>
    <para>
     Фильтр <link linkend="filters.string.strip_tags">string.strip_tags</link> удалён.
    </para>
   </listitem>
   <listitem>
    <para>
     Аргумент <parameter>needle</parameter> функций <function>strpos</function>,
     <function>strrpos</function>, <function>stripos</function>, <function>strripos</function>,
     <function>strstr</function>, <function>strchr</function>, <function>strrchr</function> и
     <function>stristr</function> теперь всегда будет интерпретироваться как строка. Раньше нестрочные needles
     интерпретировались как кодовая точка ASCII. Явный вызов <function>chr</function> может
     использоваться для восстановления предыдущего поведения.
    </para>
   </listitem>
   <listitem>
    <para>
     Аргумент <parameter>needle</parameter> функций <function>strpos</function>,
     <function>strrpos</function>, <function>stripos</function>, <function>strripos</function>,
     <function>strstr</function>, <function>stristr</function> и <function>strrchr</function>
     теперь может быть пустым.
    </para>
   </listitem>
   <listitem>
    <para>
     Аргумент <parameter>length</parameter> функций <function>substr</function>,
     <function>substr_count</function>, <function>substr_compare</function> и
     <function>iconv_substr</function> теперь может быть &null;. Значения &null; означает
     отсутствие аргумента длины, и поэтому функции вернут остаток строки
     вместо пустой строки.
    </para>
   </listitem>
   <listitem>
    <para>
     Аргумент <parameter>length</parameter> функции <function>array_splice</function> теперь может быть
     &null;. Передача значения &null; означает отсутствие аргумента, поэтому функция удалить все, начиная
     от <parameter>offset</parameter> до конца массива.
    </para>
   </listitem>
   <listitem>
    <para>
     Аргумент <parameter>args</parameter> функций <function>vsprintf</function>,
     <function>vfprintf</function> и <function>vprintf</function> теперь должен быть массивом.
     Раньше принимался любой тип.
    </para>
   </listitem>
   <listitem>
    <para>
     Параметр <literal>'salt'</literal> функции <function>password_hash</function> больше не
     поддерживается. Если используется опция <literal>'salt'</literal>, генерируется предупреждение, переданная
     соль игнорируется, а вместо неё используется сгенерированная соль.
    </para>
   </listitem>
   <listitem>
    <para>
     Функция <function>quotemeta</function> теперь будет возвращать пустую строку, если была
     передана пустая строка. Ранее возвращалось &false;.
    </para>
   </listitem>
   <listitem>
    <para>
     Удалены следующие функции:
    </para>
    <para>
     <simplelist>
      <member><function>hebrevc</function></member>
      <member><function>convert_cyr_string</function></member>
      <member><function>money_format</function></member>
      <member><function>ezmlm_hash</function></member>
      <member><function>restore_include_path</function></member>
      <member><function>get_magic_quotes_gpc</function></member>
      <member><function>get_magic_quotes_runtime</function></member>
      <member><function>fgetss</function></member>
     </simplelist>
    </para>
   </listitem>
   <listitem>
    <para>
     <constant>FILTER_SANITIZE_MAGIC_QUOTES</constant> удалена.
    </para>
   </listitem>
   <listitem>
    <para>
     Вызов <function>implode</function> с параметрами в обратном порядке <code>($pieces,
     $glue)</code> больше не поддерживается.
    </para>
   </listitem>
   <listitem>
    <para>
     <function>parse_url</function> теперь будет различать отсутствующие и пустые запросы и фрагменты:
    </para>
    <para>
     <simplelist>
      <member><code>http://example.com/foo → query = null, fragment = null</code></member>
      <member><code>http://example.com/foo? → query = "",   fragment = null</code></member>
      <member><code>http://example.com/foo# → query = null, fragment = ""</code></member>
      <member><code>http://example.com/foo?# → query = "",   fragment = ""</code></member>
     </simplelist>
     Ранее во всех случаях query и fragment были &null;.
    </para>
   </listitem>
   <listitem>
    <para>
     <function>var_dump</function> и <function>debug_zval_dump</function> теперь будут печатать
     числа с плавающей точкой, используя <link linkend="ini.serialize-precision">serialize_precision</link>,
     а не <link linkend="ini.precision">precision</link>. В конфигурации по умолчанию это означает,
     что числа с плавающей точкой теперь печатаются с полной точностью
     этими функциями отладки.
    </para>
   </listitem>
   <listitem>
    <para>
     Если массив, возвращаемый <link linkend="object.sleep">__sleep()</link>, содержит несуществующие
     свойства, теперь они автоматически проигнорируются. Ранее такие свойства были бы
     сериализованы, как если бы они имели значение &null;.
    </para>
   </listitem>
   <listitem>
    <para>
     Локаль по умолчанию при запуске теперь всегда будет определена как <literal>"C"</literal>. По умолчанию локали
     не наследуются из окружения. Ранее для <constant>LC_ALL</constant> было задано значение
     <literal>"C"</literal>, в то время как <constant>LC_CTYPE</constant> наследовался от окружения.
     Однако некоторые функции не учитывали унаследованную локаль без явного вызова <function>setlocale</function>.
     Явный вызов <function>setlocale</function> теперь требуется всегда, если компонент локали должен
     быть изменён с значения по умолчанию.
    </para>
   </listitem>
   <listitem>
    <para>
     Устаревший резервный вариант DES в <function>crypt</function> был удалён. Если
     в <function>crypt</function> передаётся неизвестный формат соли,
     функция завершится ошибкой с <literal>*0</literal>
     вместо возврата к слабому хешу DES.
    </para>
   </listitem>
   <listitem>
    <para>
     При указании значений вне допустимого диапазона для SHA256/SHA512 <function>crypt</function>
     теперь будет выдана ошибка <literal>*0</literal> вместо ограничения до ближайшего предела.
     Это соответствует поведению glibc.
    </para>
   </listitem>
   <listitem>
    <para>
     Результат функций сортировки мог измениться, если в массиве есть одинаковые элементы.
    </para>
   </listitem>
   <listitem>
    <para>
     Любые функции, принимающие callback-функции, которые явно не указаны для приёма параметров
     по ссылке, теперь будут предупреждать, если используется callback-функция со ссылочными параметрами. Например,
     <function>array_filter</function> и <function>array_reduce</function>. Ранее так было у большинства функций,
     но не у всех.
    </para>
   </listitem>
   <listitem>
    <para>
     Обёртка HTTP-потока, используемая такими функциями, как <function>file_get_contents</function>,
     теперь по умолчанию объявляет HTTP/1.1, а не HTTP/1.0. Это не меняет поведения
     клиента, но может заставить серверы реагировать по-другому. Чтобы сохранить старое поведение, установите
     параметр контекста потока <literal>'protocol_version'</literal>, например:
    </para>
    <para>
     <programlisting role="php">
<![CDATA[
<?php
$ctx = stream_context_create(['http' => ['protocol_version' => '1.0']]);
echo file_get_contents('http://example.org', false, $ctx);
?>
]]>
     </programlisting>
    </para>
   </listitem>
   <listitem>
    <para>
     Вызов <function>crypt</function> без явной передачи соли больше не поддерживается. Если вы хотите
     создать надёжный хеш с автоматически сгенерированной солью,
     используйте вместо этого <function>password_hash</function>.
    </para>
   </listitem>
   <listitem>
    <para>
     <function>substr</function>, <function>mb_substr</function>, <function>iconv_substr</function> и
     <function>grapheme_substr</function> теперь последовательно фиксируют смещения за пределы
     границы строки. Ранее, в некоторых случаях, вместо пустой строки возвращался &false;.
    </para>
   </listitem>
   <listitem>
    <para>
     В Windows функции выполнения программ (<function>proc_open</function>, <function>exec</function>,
     <function>popen</function> и т.д.) с использованием оболочки теперь последовательно выполняют <command>%comspec% /s
     /c "$commandline"</command>, которая делает то же самое, что и выполнение
     <command>$commandline</command> (без дополнительных кавычек).
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration80.incompatible.sysvsem">
  <title>Sysvsem</title>

  <itemizedlist>
   <listitem>
    <para>
     Параметр <parameter>auto_release</parameter> в <function>sem_get</function> был изменён,
     чтобы принимать логические значения (bool), а не целые числа (int).
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration80.incompatible.tidy">
  <title>Tidy</title>

  <itemizedlist>
   <listitem>
    <para>
     Параметр <parameter>use_include_path</parameter>, который не использовался внутренне, был удалён
     из <function>tidy_repair_string</function>.
    </para>
   </listitem>
   <listitem>
    <para>
     <methodname>tidy::repairString</methodname> и <methodname>tidy::repairFile</methodname> стали
     статическими методами.
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration80.incompatible.tokenizer">
  <title>PHP-лексер (Tokenizer)</title>

  <itemizedlist>
   <listitem>
    <para>
     В лексемах <literal>T_COMMENT</literal> больше не будет символа новой строки в конце. Вместо этого новая строка будет
     частью следующий лексемы <literal>T_WHITESPACE</literal>. Следует отметить, что за
     <literal>T_COMMENT</literal> не всегда следует пробел, за ним также может быть
     <literal>T_CLOSE_TAG</literal> или конец файла.
    </para>
   </listitem>
   <listitem>
    <para>
     Имена в пространствах имён теперь представлены с помощью <literal>T_NAME_QUALIFIED</literal> (<code>Foo\Bar</code>),
     <literal>T_NAME_FULLY_QUALIFIED</literal> (<code>\Foo\Bar</code>) и лексемы
     <literal>T_NAME_RELATIVE</literal> (<code>namespace\Foo\Bar</code>)).
     <literal>T_NS_SEPARATOR</literal> используется только для автономных разделителей пространства имён и только
     синтаксически действителен в сочетании с объявлениями группового использования.
     <!-- RFC: https://wiki.php.net/rfc/namespaced_names_as_token -->
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration80.incompatible.xmlreader">
  <title>XMLReader</title>

  <para>
   <methodname>XMLReader::open</methodname> и <methodname>XMLReader::xml</methodname> теперь являются
   статическими методами. Их по-прежнему можно вызывать как методы экземпляра, но наследующие классы должны объявлять
   их как статические, если они переопределяют эти методы.
  </para>
 </sect2>

 <sect2 xml:id="migration80.incompatible.xmlrpc">
  <title>XML-RPC</title>

  <para>
   Модуль XML-RPC был перемещён в PECL и больше не является частью
   дистрибутива PHP.
  </para>
 </sect2>

 <sect2 xml:id="migration80.incompatible.zip">
  <title>Zip</title>

  <para>
   <constant>ZipArchive::OPSYS_Z_CPM</constant> была удалена (в этом имени была опечатка). Используйте
   вместо неё <constant>ZipArchive::OPSYS_CPM</constant>.
  </para>
 </sect2>

 <sect2 xml:id="migration80.incompatible.zlib">
  <title>Zlib</title>

  <itemizedlist>
   <listitem>
    <para>
     <function>gzgetss</function> удалена.
    </para>
   </listitem>
   <listitem>
    <para>
     <link linkend="ini.zlib.output-compression">zlib.output_compression</link> больше не
     отключается автоматически для <literal>Content-Type: image/*</literal>.
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration80.incompatible.php-test-packs">
  <title>Пакеты тестов PHP для Windows</title>

  <para>
   Скрипт выполнения тестов был переименован из <filename>run-test.php</filename>
   в <filename>run-tests.php</filename>, чтобы соответствовать его имени в php-src.
  </para>
 </sect2>
</sect1><!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
