<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: b8e1b1357def73f310c9f7405035b3acc0cb1eaf Maintainer: shein Status: ready -->
<!-- Reviewed: yes Maintainer: rjhdby -->
<!-- $Revision$ -->
 <chapter xml:id="tutorial" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
  <info><title>Простой учебник</title></info>

  <para>
   В этом кратком и простом учебнике мы бы хотели показать самые
   основы PHP. Этот текст включает в себя только создание динамических
   Web-страниц с помощью PHP, однако реальная область применения PHP
   гораздо шире. В разделе "<link linkend="intro-whatcando">Что может
   PHP</link>" приведена дополнительная информация.
  </para>
  <para>
   Web-страницы, созданные с использованием PHP, обрабатываются как обычные
   HTML-страницы. Их можно создавать и изменять точно таким же образом,
   как и обычные страницы на HTML.
  </para>

  <section xml:id="tutorial.requirements">
   <info><title>Что мне потребуется?</title></info>
   <para>
    В данном руководстве мы предполагаем, что ваш сервер имеет
    поддержку PHP и что все файлы, заканчивающиеся на <filename>.php</filename>,
    обрабатываются PHP. В большинстве серверов обычно используется это расширение
    для PHP-файлов, но всё-таки не лишним будет уточнить это у вашего
    администратора сервера. Итак, если ваш сервер поддерживает PHP, то у вас есть
    все, что требуется. Просто создавайте файлы <filename>.php</filename>
    и размещайте их в вашем каталоге Web-сервера - они будут обрабатываться
    автоматически. Не нужно ничего компилировать, не нужно никаких
    дополнительных программ. Считайте файлы PHP обычными файлами HTML с
    набором новых "волшебных" тегов, которые могут делать кучу разных вещей.
   </para>
   <para>
    Например, вы хотите сэкономить на интернет-канале и вести разработку локально.
    В этом случае вам нужно будет установить веб-сервер, такой как <link
    xlink:href="&url.apache;">Apache</link>, и, разумеется, <link
    xlink:href="&url.php.downloads;">PHP</link>. Скорее всего, вы также захотите
    установить базу данных, например, <link xlink:href="&url.mysql.docs;">MySQL</link>.
   </para>
   <para>
    Все это может быть установлено как отдельно друг от друга, так и более простым способом.
    В нашем руководстве есть <link linkend="install">инструкции по установке PHP</link>
    (предполагается, что вы уже установили веб-сервер). Если у вас возникли проблемы
    при установке PHP, мы предлагаем вам задать вопросы в нашем
    <link xlink:href="&url.php.mailing-lists;">списке рассылки по вопросам
    установки</link>. Если же вы выбрали более простой способ, то
    <link xlink:href="&url.installkits;">найдите уже настроенный пакет</link>
    для вашей операционной системы, который автоматически установит все
    вышеперечисленное несколькими кликами мыши. Устанавливать веб-сервер с
    поддержкой PHP довольно легко на любой операционной системе, включая
    MacOSX, Linux и Windows.
    На Linux вам, возможно, пригодятся <link xlink:href="&url.rpmfind;">rpmfind</link> и
    <link xlink:href="&url.rpmfind.pbone;">PBone</link> при поиске RPM-пакетов.
    Можно также использовать <link xlink:href="&url.apt-get;">apt-get</link>
    для поиска пакетов под Debian.
   </para>
  </section>

  <section xml:id="tutorial.firstpage">
   <info><title>Первая страница на PHP</title></info>
   <para>
    Создайте файл с именем <filename>hello.php</filename> в корневом каталоге веб-сервера
    (<varname>DOCUMENT_ROOT</varname>) и запишите в него следующее:
   </para>
   <para>
    <example>
     <title>Первый скрипт на PHP: <filename>hello.php</filename></title>
     <programlisting role="php">
<![CDATA[
<html>
 <head>
  <title>Тестируем PHP</title>
 </head>
 <body>
 <?php echo '<p>Привет, мир!</p>'; ?>
 </body>
</html>
]]>
     </programlisting>
     <simpara>
      Откройте данный файл в браузере, набрав имя вашего веб-сервера и
      <literal>/hello.php</literal>. При локальной разработке эта ссылка
      может быть чем-то вроде <literal>http://localhost/hello.php</literal>
      или <literal>http://127.0.0.1/hello.php</literal>, но это зависит от
      настроек вашего сервера. Если всё настроено правильно, этот файл
      будет обработан PHP и браузер выведет следующий текст:
     </simpara>
     <screen role="html">
<![CDATA[
<html>
 <head>
  <title>PHP Test</title>
 </head>
 <body>
 <p>Hello World</p>
 </body>
</html>
]]>
     </screen>
    </example>
   </para>
   <para>
    Эта программа чрезвычайно проста, и для создания настолько простой
    странички даже необязательно использовать PHP. Все, что она делает,
    это вывод <literal>Hello World</literal>, используя инструкцию
    PHP <function>echo</function>. Заметьте, что файл <emphasis>не обязан быть
    выполняемым</emphasis> или ещё как-то отличаться от других файлов.
    Сервер знает, что этот файл должен быть обработан PHP, так как файл обладает
    расширением ".php", о котором в настройках сервера сказано, что подобные
    файлы должны передаваться PHP. Рассматривайте его как обычный HTML-файл,
    которому посчастливилось заполучить набор специальных тегов (доступных также и вам),
    способных на кучу интересных вещей.
   </para>
   <para>
    Если у вас этот пример не отображает ничего или выводит окно загрузки,
    или если вы видите весь этот файл в текстовом виде, то, скорее всего,
    ваш веб-сервер не имеет поддержки PHP или был сконфигурирован неправильно.
    Попросите вашего администратора сервера включить такую поддержку.
    Предложите ему инструкцию по установке: раздел <link linkend="install">Установка</link>
    данной документации. Если же вы разрабатываете скрипты на PHP дома (локально),
    то также прочтите эту главу, чтобы убедиться, что вы все настроили верно.
    Убедитесь также, что вы запрашиваете файл у сервера через протокол http.
    Если вы просто откроете файл из вашей файловой системы, он не будет
    обработан PHP. Если проблемы всё же остались, не стесняйтесь попросить
    помощи одним из <link xlink:href="&url.php.support;">множества доступных способов</link>
    получения поддержки по PHP.
   </para>
   <para>
    Цель примера - показать формат специальных тегов PHP. В этом примере
    мы использовали <literal>&lt;?php</literal> в качестве открывающего
    тега, затем шли команды PHP, завершающиеся закрывающим тегом
    <literal>?&gt;</literal>. Таким образом можно где угодно "запрыгивать"
    и "выпрыгивать" из режима PHP в HTML файле. Подробнее об этом можно прочесть
    в разделе руководства <link linkend="language.basic-syntax">
    Основной синтаксис</link>.
   </para>

   <note>
    <info><title>Замечание о переводах строк</title></info>
    <para>
     Переводы строк немногое означают в HTML, однако считается хорошей идеей
     поддерживать HTML в удобочитаемом виде, перенося его на новую строку.
     PHP автоматически удаляет перевод строки, идущий сразу после закрывающего
     тега <literal>?&gt;</literal>. Это может быть чрезвычайно полезно,
     если вы используете множество блоков PHP-кода или подключаете PHP-файлы,
     которые не должны ничего выводить. В то же время, это может приводить в
     недоумение. Можно поставить пробел после закрывающего тега
     <literal>?&gt;</literal> и тогда пробел будет выведен вместе с переводом строки,
     или же вы можете специально добавить перевод строки в последний вызов
     echo/print из блока PHP-кода.
    </para>
   </note>

   <note>
    <info><title>Пара слов о текстовых редакторах</title></info>
    <para>
     Существует множество текстовых редакторов и интегрированных сред
     разработки (IDE), в которых вы можете создавать и редактировать файлы
     PHP. Список некоторых редакторов содержится в разделе
     <link xlink:href="&url.phpeditorlist;">Список редакторов PHP</link>.
     Если вы хотите порекомендовать какой-либо редактор, посетите данную
     страницу и попросите добавить редактор в список. Использование редактора
     с подсветкой синтаксиса может быть очень большим подспорьем в вашей работе.
    </para>
   </note>

   <note>
    <info><title>Пара слов о текстовых процессорах</title></info>
    <para>
     Текстовые процессоры (StarOffice Writer, Microsoft Word, Abiword и др.) в большинстве
     случаев не подходят для редактирования файлов PHP. Если вы всё же хотите использовать
     какой-либо из них для тестового скрипта, убедитесь, что сохраняете файл как
     <emphasis>простой текст</emphasis> (plain text), иначе PHP будет не в состоянии
     прочесть и запустить ваш скрипт.
    </para>
   </note>

   <note>
    <info><title>Пара слов о Блокноте Windows</title></info>
    <para>
     При написании скриптов PHP с использованием встроенного Блокнота Windows необходимо
     сохранять файлы с расширением <filename>.php</filename>. (Блокнот автоматически
     добавит расширение <filename>.txt</filename>, если вы не предпримете указанные ниже
     меры.) Когда во время сохранения файла вас попросят указать его имя, введите имя файла
     в двойных кавычках (например, "<filename>hello.php</filename>"). Кроме этого, можно
     кликнуть на выпадающее меню "Текстовые документы" в диалоговом окне сохранения
     файла и выбрать в нем пункт "Все файлы". После этого можно вводить имя файла без
     кавычек.
    </para>
   </note>

   <para>
    Теперь, когда вы успешно создали работающий PHP-скрипт, самое время создать самый
    знаменитый PHP-скрипт! Вызовите функцию <function>phpinfo</function> и вы увидите
    множество полезной информации о вашей системе и настройке, такой как доступные
    <link linkend="language.variables.predefined">предопределённые переменные</link>,
    загруженные PHP-модули и <link linkend="configuration">параметры настройки</link>.
    Уделите некоторое время изучению этой важной информации.
   </para>
   <para>
    <example>
     <info><title>Получение информации о системе из PHP</title></info>
     <programlisting role="php">
<![CDATA[
<?php phpinfo(); ?>
]]>
     </programlisting>
    </example>
   </para>
  </section>

  <section xml:id="tutorial.useful">
   <info><title>Делаем что-нибудь полезное</title></info>
   <para>
    Давайте сделаем что-нибудь полезное. К примеру, определим, какой браузер использует
    тот, кто смотрит в данный момент нашу страницу. Для этого мы проверим строку с именем
    браузера, посылаемую нам в HTTP-запросе. Эта информация хранится в <link
    linkend="language.variables">переменной</link>. Переменные в PHP всегда
    предваряются знаком доллара. Интересующая нас в данный момент переменная
    называется <varname>$_SERVER['HTTP_USER_AGENT']</varname>.
   </para>
   <note>
    <para>
     <varname>$_SERVER</varname> - специальная зарезервированная переменная PHP,
     которая содержит всю информацию, полученную от Web-сервера. Её также называют
     суперглобальной. Для более подробной информации смотрите раздел <link
     linkend="language.variables.superglobals">Суперглобальные переменные</link>.
    </para>
   </note>
   <para>
    Для вывода данной переменной мы сделаем так:
   </para>
   <para>
    <example>
     <info><title>Вывод значения переменной (элемента массива)</title></info>
    <programlisting role="php">
<![CDATA[
<?php
echo $_SERVER['HTTP_USER_AGENT'];
?>
]]>
    </programlisting>
    <para>
     Пример вывода данной программы:
    </para>
    <screen role="html">
Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1)
    </screen>
   </example>
   </para>
   <para>
    В PHP существует огромное количество <link linkend="language.types">типов</link>
    переменных. В предыдущем примере мы печатали элемент
    <link linkend="language.types.array">массива</link>. Массивы
    могут быть очень полезны.
   </para>
   <para>
    <varname>$_SERVER</varname> - это просто одна из переменных, которые
    предоставляются вам языком PHP. Список таких переменных можно посмотреть в разделе
    "<link linkend="reserved.variables">Зарезервированные переменные</link>" или
    просмотрев вывод функции <function>phpinfo</function>, используемой в
    примере в предыдущем разделе.
   </para>
   <para>
    Внутрь PHP-тегов можно помещать несколько выражений и создавать
    маленькие блоки кода, делающие больше, чем простой вызов echo.
    Например, если вы хотите добавить проверку для Internet Explorer,
    можно сделать так:
   </para>
   <para>
    <example>
     <info><title>Пример использования <link linkend="language.control-structures">управляющих
     структур</link> и <link linkend="language.functions">функций</link></title></info>
     <programlisting role="php">
<![CDATA[
<?php
if (strpos($_SERVER['HTTP_USER_AGENT'], 'MSIE') !== FALSE) {
    echo 'Вы используете Internet Explorer.<br />';
}
?>
]]>
     </programlisting>
     <para>
      Пример вывода данной программы:
     </para>
     <screen role="html">
<![CDATA[
Вы используете Internet Explorer.<br />
]]>
     </screen>
    </example>
   </para>
   <para>
    Здесь мы показали несколько новых элементов. Во-первых, здесь есть конструкция
    <link linkend="control-structures.if">if</link>. Если вы знакомы с основами синтаксиса
    языка C, то вы уже заметили что-то схожее. Если же вы не знаете C или подобного по
    синтаксису языка, то лучший вариант - взять какую-либо вводную книжку по PHP и
    прочитать первые пару глав. Другой вариант - почитать раздел <link
    linkend="langref">Описание языка</link> данного руководства.
   </para>
   <para>
    Кроме этого, здесь присутствует вызов функции <function>strpos</function>.
    <function>strpos</function> - встроенная в PHP функция, которая ищет
    одну строку в другой. В данном случае мы ищем строку
    <literal>'MSIE'</literal> (так называемую "иголку" - needle)
    в <varname>$_SERVER['HTTP_USER_AGENT']</varname> (в так называемом "сене"
    - haystack). Если "иголка" найдена внутри "сена", функция возвращает
    позицию "иголки" относительно начала "сена". В противном случае она возвращает &false;.
    Если она не вернёт &false;, то условие в
    <link linkend="control-structures.if">if</link> окажется истинным (&true;), и
    код в фигурных скобках ({ }) выполнится. В противном случае этот код
    не выполняется. Попробуйте создать аналогичные примеры с использованием
    команд <link linkend="control-structures.if">if</link>,
    <link linkend="control-structures.else">else</link> и других функций,
    таких, как <function>strtoupper</function> и <function>strlen</function>.
    Также подобные примеры содержатся во многих описаниях функций в данном руководстве.
    Если вы не знаете, как использовать функции, возможно, вам стоит
    прочесть страницу руководства о том, <link linkend="about.prototypes">
    как читать определения функций</link> и раздел о
    <link linkend="language.functions">функциях в PHP</link>.
   </para>
   <para>
    Продемонстрируем, как можно входить в режим кода PHP и выходить из
    него даже прямо посередине блока с кодом:
   </para>
   <para>
    <example>
     <title>Смешение режимов HTML и PHP</title>
     <programlisting role="php">
<![CDATA[
<?php
if (strpos($_SERVER['HTTP_USER_AGENT'], 'MSIE') !== FALSE) {
?>
<h3>strpos(), должно быть, вернул не false</h3>
<p>Вы используете Internet Explorer</p>
<?php
} else {
?>
<h3>strpos() вернул false</h3>
<p>Вы не используете Internet Explorer</p>
<?php
}
?>
]]>
     </programlisting>
     <para>
      Пример вывода данной программы:
     </para>
     <screen role="html">
<![CDATA[
<h3>strpos(), должно быть, вернул не false</h3>
<p>Вы используете Internet Explorer</p>
]]>
     </screen>
    </example>
   </para>
   <para>
    Вместо использования команды PHP echo для вывода, мы вышли из режима
    кода и просто послали содержимое HTML. Важный момент здесь то, что логическая
    структура кода PHP при этом не теряется. Только одна HTML-часть будет
    послана клиенту в зависимости от результата функции
    <function>strpos</function> (другими словами, в зависимости от того,
    найдена была строка <literal>MSIE</literal> или нет).
   </para>
  </section>

  <section xml:id="tutorial.forms">
   <info><title>Работа с формами</title></info>
   <para>
    Одно из главнейших достоинств PHP - то, как он работает с формами HTML.
    Здесь основным является то, что каждый элемент формы автоматически
    становится доступным вашим программам на PHP. Для подробной информации об
    использовании форм в PHP читайте раздел <link linkend="language.variables.external">
    Переменные из внешних источников</link>. Вот пример формы HTML:
   </para>
   <para>
    <example>
     <info><title>Простейшая форма HTML</title></info>
     <programlisting role="html">
<![CDATA[
<form action="action.php" method="post">
 <p>Ваше имя: <input type="text" name="name" /></p>
 <p>Ваш возраст: <input type="text" name="age" /></p>
 <p><input type="submit" /></p>
</form>
]]>
     </programlisting>
    </example>
   </para>
   <para>
    В этой форме нет ничего особенного. Это обычная форма HTML без каких-либо
    специальных тегов. Когда пользователь заполнит форму и нажмёт кнопку
    отправки, будет вызвана страница <filename>action.php</filename>. В
    этом файле может быть что-то вроде:
   </para>
   <para>
    <example>
     <info><title>Выводим данные формы</title></info>
     <programlisting role="php">
<![CDATA[
Здравствуйте, <?php echo htmlspecialchars($_POST['name']); ?>.
Вам <?php echo (int)$_POST['age']; ?> лет.
]]>
     </programlisting>
     <para>
      Пример вывода данной программы:
     </para>
     <screen role="html">
<![CDATA[
Здравствуйте, Сергей.
Вам 30 лет.
]]>
     </screen>
    </example>
   </para>
   <para>
    Если не принимать во внимание куски кода с <function>htmlspecialchars</function> и
    <literal>(int)</literal>, принцип работы данного кода должен быть прост и понятен.
    <function>htmlspecialchars</function> обеспечивает правильную кодировку "особых"
    HTML-символов так, чтобы вредоносный HTML или Javascript не был вставлен на вашу
    страницу. Поле age, о котором нам известно, что оно должно быть число, мы можем просто
    <link linkend="language.types.typecasting">преобразовать</link> в <type>int</type>,
    что автоматически избавит нас от нежелательных символов. PHP также может сделать это
    автоматически с помощью модуля <link linkend="ref.filter">filter</link>. Переменные
    <varname>$_POST['name']</varname> и <varname>$_POST['age']</varname>
    автоматически установлены для вас средствами PHP. Ранее мы использовали
    суперглобальную переменную <varname>$_SERVER</varname>, здесь же мы точно так же
    используем суперглобальную переменную <varname>$_POST</varname>, которая содержит
    все POST-данные. Заметим, что <emphasis>метод отправки</emphasis> (method) нашей
    формы - POST.  Если бы мы использовали метод <emphasis>GET</emphasis>, то
    информация нашей формы была бы в суперглобальной переменной
    <varname>$_GET</varname>.
    Кроме этого, можно использовать переменную <varname>$_REQUEST</varname>, если
    источник данных не имеет значения. Эта переменная содержит смесь данных GET, POST,
    COOKIE.
   </para>
   <para>
    В PHP можно также работать и с XForms, хотя вы найдёте работу с обычными HTML-формами
    довольно комфортной уже через некоторое время. Несмотря на то, что работа с XForms не
    для новичков, они могут показаться вам интересными. В разделе возможностей PHP
    у нас также есть <link linkend="features.xforms">короткое введение в обработку данных
    из XForms</link>.
   </para>
  </section>

  <section xml:id="tutorial.whatsnext">
   <info><title>Что дальше?</title></info>
   <para>
    То, что вы узнали, поможет вам понять большую часть руководства и
    разобраться в большинстве приведённых примеров программ.
   </para>
   <para>
    Если вы хотите посмотреть различные презентации и слайды, шире
    раскрывающие возможности PHP, вы можете посетить сайт
    с материалами PHP конференций:
    <link xlink:href="&url.php.talks;">&url.php.talks;</link>
   </para>
  </section>
 </chapter>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
