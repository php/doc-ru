<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: f0b0e5bb633b40536bda7141b85674441a62aa95 Maintainer: shein Status: ready -->
<!-- Reviewed: yes Maintainer: rjhdby -->
<!-- $Revision$ -->
<chapter xml:id="introduction" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <info><title>Введение</title></info>

 <section xml:id="intro-whatis">
  <title>Что такое PHP?</title>
  <para>
   <acronym>PHP</acronym> (рекурсивный акроним словосочетания
   <literal>PHP: Hypertext Preprocessor</literal>) - это распространённый
   язык программирования общего назначения с открытым исходным кодом.
   PHP специально сконструирован для веб-разработок и
   его код может внедряться непосредственно в HTML.
  </para>
  <para>
   Простой ответ, но что он может означать? Вот пример кода:
  </para>
  <para>
   <example>
    <info><title>Пример программирования на PHP</title></info>
    <programlisting role="php">
<![CDATA[
<!DOCTYPE html>
<html>
    <head>
        <title>Пример</title>
    </head>
    <body>

        <?php
        echo "Привет, я - скрипт PHP!";
        ?>

    </body>
</html>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   Вместо рутинного вывода HTML-кода командами языка
   (как это происходит, например, в Perl или C),
   скрипт PHP содержит HTML с встроенным кодом (в нашем
   случае, это вывод текста "Привет, я - скрипт PHP!").
   Код PHP  отделяется специальными <link
   linkend="language.basic-syntax.phpmode">начальным и конечным тегами
   <code>&lt;?php</code> и <code>?&gt;</code></link>,
   которые позволяют "переключаться" в "PHP-режим" и выходить из него.
  </para>
  <para>
   PHP отличается от JavaScript тем, что
   PHP-скрипты выполняются на сервере и генерируют HTML, который
   посылается клиенту. Если бы у вас на сервере
   был размещён скрипт, подобный вышеприведённому, клиент
   получил бы только результат его выполнения, но не
   смог бы выяснить, какой именно код его произвёл. Вы даже
   можете настроить свой сервер таким образом, чтобы
   обычные HTML-файлы обрабатывались процессором PHP, так что клиенты
   даже не смогут узнать, получают ли они обычный HTML-файл или
   результат выполнения скрипта.
  </para>
  <para>
   PHP крайне прост для освоения, но вместе с тем способен
   удовлетворить запросы профессиональных программистов.
   Не пугайтесь длинного списка возможностей PHP.
   Вы можете быстро начать, и уже в течение нескольких часов сможете
   создавать простые PHP-скрипты.
  </para>
  <para>
   Хотя PHP, главным образом, предназначен для работы в
   среде веб-серверов, область его применения не ограничивается
   только этим. Читайте дальше и не пропустите главу
   <link linkend="intro-whatcando">Возможности PHP</link> либо, начните непосредственно
   с <link linkend="tutorial">Вводного руководства</link>, если вас интересует
   исключительно веб-программирование.
  </para>
 </section>

 <section xml:id="intro-whatcando">
  <info><title>Возможности PHP</title></info>
  <para>
   PHP может все. Главная область применения PHP
   - написание скриптов, работающих на стороне сервера;
   таким образом, PHP способен выполнять все то, что выполняет любая другая программа CGI,
   например, обрабатывать данные форм, генерировать динамические
   страницы или отсылать и принимать cookies.
   Но PHP способен выполнять намного больше.
  </para>
  <para>
   Существуют три основных области применения PHP.
   <itemizedlist>
    <listitem>
     <simpara>
      Создание скриптов для выполнения на стороне сервера.
      PHP традиционно и наиболее широко используется именно таким
      образом. Для этого вам будут необходимы три вещи.
      Интерпретатор PHP (в виде программы CGI или серверного модуля),
      веб-сервер и браузер. Для того чтобы можно было просматривать результаты
      выполнения PHP-скриптов в браузере, нужен
      работающий веб-сервер и установленный PHP. Просмотреть вывод
      PHP-программы можно в браузере, получив PHP-страницу, сгенерированную
      сервером. В случае, если вы просто экспериментируете, вы вполне
      можете использовать свой домашний компьютер вместо сервера.
      За более подробными сведениями обратитесь к главе
      <link linkend="install">Советы по установке</link>.
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      Создание скриптов для выполнения в командной строке.
      Вы можете создать PHP-скрипт, способный запускаться
      без сервера или браузера. Все, что
      вам потребуется - парсер PHP. Такой способ использования
      PHP идеально подходит для скриптов, которые должны
      выполняться регулярно, например, с помощью
      cron (на платформах *nix или Linux) или с помощью
      планировщика задач (Task Scheduler) на платформах
      Windows. Эти скрипты также могут быть использованы
      в задачах простой обработки текстов. За дополнительной
      информацией обращайтесь к главе
      <link linkend="features.commandline">Использование PHP в среде
       командной строки</link>.
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      Создание оконных приложений, выполняющихся на стороне
      клиента. Возможно, PHP является не самым лучшим
      языком для создания подобных приложений, но,
      если вы очень хорошо знаете PHP и хотели бы
      использовать некоторые его возможности в своих
      клиентских приложениях, вы можете использовать
      PHP-GTK для создания таких приложений. Подобным
      образом вы можете создавать и кросс-платформенные
      приложения. PHP-GTK является модулем PHP
      и не поставляется вместе с основным дистрибутивом PHP. Если
      вы заинтересованы, посетите <link xlink:href="&url.php.gtk;">сайт
      PHP-GTK</link>.
     </simpara>
    </listitem>
   </itemizedlist>
  </para>
  <para>
   PHP <link linkend="install">доступен</link> для большинства операционных систем, включая
   Linux, многие модификации Unix (такие как HP-UX, Solaris и OpenBSD),
   Microsoft Windows, macOS, RISC OS и многие другие.
   Также в PHP включена поддержка большинства современных
   веб-серверов, таких как Apache, IIS и многих других.
   В принципе, подойдёт любой веб-сервер, способный использовать
   бинарный файл FastCGI PHP, например, lighttpd или nginx.
   PHP может работать в качестве модуля или функционировать
   в качестве процессора CGI.
  </para>
  <para>
   Таким образом, выбирая PHP, вы получаете свободу выбора
   операционной системы и веб-сервера. Более того, у вас
   появляется выбор между использованием процедурного
   или объектно-ориентированного программирования (ООП) или
   же их сочетания.
  </para>
  <para>
   PHP способен генерировать не только HTML. Доступно
   формирование изображений, файлов PDF и даже роликов Flash
   (с использованием libswf и Ming), создаваемых «на лету».
   PHP также способен генерировать любые текстовые
   данные, такие, как XHTML и другие XML-файлы. PHP может
   осуществлять автоматическую генерацию таких файлов
   и сохранять их в файловой системе вашего сервера вместо
   того, чтобы отдавать клиенту, организуя, таким образом,
   серверный кеш для вашего динамического контента.
  </para>
  <para>
   Одним из значительных преимуществ PHP является поддержка
   <link linkend="refs.database">широкого круга баз данных</link>.
   Создать скрипт, использующий базы данных, - невероятно просто.
   Можно воспользоваться модулем, специфичным для отдельной базы данных
   (таким как <link linkend="book.mysqli">mysql</link>) или использовать
   уровень абстракции от базы данных, такой как <link linkend="book.pdo">PDO</link>,
   или подсоединиться к любой базе данных, поддерживающей Открытый Стандарт
   Соединения Баз Данных (ODBC), с помощью одноимённого модуля <link linkend="book.uodbc">ODBC</link>.
   Для других баз данных, таких как CouchDB, можно воспользоваться <link linkend="book.curl">cURL</link>
   или <link linkend="book.sockets">сокетами</link>.
  </para>
  <para>
   PHP также поддерживает взаимодействие с другими сервисами
   через такие протоколы, как LDAP, IMAP, SNMP, NNTP, POP3, HTTP,
   COM (на платформах Windows) и многих других. Кроме того, вы
   получаете возможность работать с сетевыми сокетами напрямую.
   PHP поддерживает стандарт обмена сложными структурами
   данных WDDX практически между всеми языками веб-программирования.
   Обращая внимание на взаимодействие между различными
   языками, следует упомянуть о поддержке объектов Java и возможности
   их использования в качестве объектов PHP.
  </para>
  <para>
   PHP имеет много возможностей по <link linkend="refs.basic.text">обработке текста</link>,
   включая регулярные выражения Perl (<link linkend="book.pcre">PCRE</link>) и
   много других модулей и инструментов <link linkend="refs.xml">для обработки и доступа к
   XML-документам</link>. В PHP обработка XML-документов стандартизирована и происходит
   на базе мощной библиотеки <link linkend="book.libxml">libxml2</link>,
   расширив возможности обработки XML добавлением новых модулей
   <link linkend="book.simplexml">SimpleXML</link>, <link linkend="book.xmlreader">XMLReader</link> и <link linkend="book.xmlwriter">XMLWriter</link>.
  </para>
  <para>
   Есть ещё много других интересных модулей, которые можно просмотреть
   как в <link linkend="extensions">алфавитном порядке</link>, так и
   <link linkend="funcref">по категориям</link>.
   Есть ещё много дополнительных модулей PECL, которые также могут (а могут и нет)
   быть документированы в данном руководстве, такие как <link xlink:href="&url.xdebug;">XDebug</link>.
  </para>
  <para>
   Как вы видите, этой страницы не хватит для того,
   чтобы перечислить все, что может предложить вам PHP.
   Читайте следующую главу, <link linkend="install">Установка
   PHP</link> и обратитесь к главе <link linkend="funcref">Справочник
   по функциям</link> за более подробными сведениями о
   перечисленных выше модулях.
  </para>
 </section>

</chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
