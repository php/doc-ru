<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 52407313885d27a4e891e08dd2e2481bcc39e244 Maintainer: sergey Status: ready -->
<!-- Reviewed: no -->
<sect1 xml:id="language.operators.bitwise">
 <title>Побитовые операторы</title>
 <simpara>
  Побитовые операторы разрешают считывать и устанавливать конкретные биты
  целых чисел.
 </simpara>
 <table>
  <title>Побитовые операторы</title>
  <tgroup cols="3">
   <thead>
    <row>
     <entry>Пример</entry>
     <entry>Название</entry>
     <entry>Результат</entry>
    </row>
   </thead>
   <tbody>
    <row>
     <entry>
      <userinput>$a &amp; $b</userinput>
     </entry>
     <entry>И</entry>
     <entry>Устанавливаются только те биты, которые установлены и в <varname>$a</varname>, и в <varname>$b</varname>.</entry>
    </row>
    <row>
     <entry>
      <userinput>$a | $b</userinput>
     </entry>
     <entry>Или</entry>
     <entry>Устанавливаются те биты, которые установлены в <varname>$a</varname> или в <varname>$b</varname>.</entry>
    </row>
    <row>
     <entry>
      <userinput>$a ^ $b</userinput>
     </entry>
     <entry>Исключающее или</entry>
     <entry>
    Устанавливаются только те биты, которые установлены либо только в <varname>$a</varname>,
    либо только в <varname>$b</varname>, но не в обоих одновременно.
   </entry>
    </row>
    <row>
     <entry>
      <userinput>~ $a</userinput>
     </entry>
     <entry>Отрицание</entry>
     <entry>
    Устанавливаются те биты, которые не установлены в <varname>$a</varname>, и наоборот.
   </entry>
    </row>
    <row>
     <entry>
      <userinput>$a &lt;&lt; $b</userinput>
     </entry>
     <entry>Сдвиг влево</entry>
     <entry>
    Все биты переменной <varname>$a</varname> сдвигаются на <varname>$b</varname>
    позиций влево (каждая позиция подразумевает «умножение на 2»)
   </entry>
    </row>
    <row>
     <entry>
      <userinput>$a &gt;&gt; $b</userinput>
     </entry>
     <entry>Сдвиг вправо</entry>
     <entry>
    Все биты переменной <varname>$a</varname> сдвигаются на <varname>$b</varname> позиций вправо
    (каждая позиция подразумевает «деление на 2»)
   </entry>
    </row>
   </tbody>
  </tgroup>
 </table>
 <para>
  Побитовый сдвиг в PHP — это арифметическая операция.
  Биты, сдвинутые за границы числа, отбрасываются.
  Сдвиг влево дополняет число нулями справа, сдвигая в то же время знаковый бит числа
  влево, что означает что знак операнда не сохраняется.
  Сдвиг вправо сохраняет копию сдвинутого знакового бита слева, что означает
  что знак операнда сохраняется.
 </para>
 <para>
  Используйте скобки для обеспечения необходимого
  <link linkend="language.operators.precedence"> приоритета операторов</link>.
  Например, <literal>$a &amp; $b == true</literal> сначала проверяет
  на равенство, а потом выполняет побитовое и; тогда как
  <literal>($a &amp; $b) == true</literal> сначала выполняет побитовое и,
  а потом выполняет проверку на равенство.
 </para>
 <para>
  Если оба операнда для <literal>&amp;</literal>, <literal>|</literal> и
  <literal>^</literal> строки, то операция будет производиться с кодами ASCII всех
  символов строки и в результате вернёт строку. Во всех остальных случаях, оба операнда
  будут <link linkend="language.types.integer.casting">преобразованы к целому</link> и
  результатом будет целое число.
 </para>
 <para>
  Если операнд для <literal>~</literal> строка, то операция будет производиться с кодами
  ASCII всех символов строки и в результате вернёт строку, в ином случае как операнд,
  так и результат, будут считаться целыми.
 </para>
 <para>
  Оба операнда и результат выполнения <literal>&lt;&lt;</literal> и
  <literal>&gt;&gt;</literal> всегда считаются за целое.
 </para>
 <para>
  <informalexample>
   <para>
    <literallayout>
   Опция настроек PHP error_reporting использует побитовые значения, обеспечивая
   реальную демонстрацию удаления значений битов. Чтобы показать все ошибки, кроме
   замечаний, инструкции в файле php.ini предлагают использовать:
   <userinput>E_ALL &amp; ~E_NOTICE</userinput>
    </literallayout>
   </para>
   <para>
    <literallayout>
   Начинаем со значения E_ALL:
   <computeroutput>00000000000000000111011111111111</computeroutput>
   Затем берём значение E_NOTICE...
   <computeroutput>00000000000000000000000000001000</computeroutput>
   ... и инвертируем его с помощью <literal>~</literal>:
   <computeroutput>11111111111111111111111111110111</computeroutput>
   Наконец, используем побитовое И (&amp;), чтобы установить только те биты,
   которые установлены в единицу в обоих значениях:
   <computeroutput>00000000000000000111011111110111</computeroutput>
    </literallayout>
   </para>
   <para>
    <literallayout>
   Другой способ достичь этого  — использовать ИСКЛЮЧАЮЩЕЕ ИЛИ (XOR, <literal>^</literal>),
   чтобы получить только те биты, которые установлены в единицу
   либо только в одном, либо только в другом значении:
   <userinput>E_ALL ^ E_NOTICE</userinput>
    </literallayout>
   </para>
  </informalexample>
 </para>
 <para>
  <informalexample>
   <para>
    <literallayout>
   Опция error_reporting также может быть использована для демонстрации
   установки битов. Показать только ошибки и обрабатываемые ошибки можно
   следующим образом:
   <userinput>E_ERROR | E_RECOVERABLE_ERROR</userinput>
    </literallayout>
   </para>
   <para>
    <literallayout>
   Здесь мы комбинируем E_ERROR
   <computeroutput>00000000000000000000000000000001</computeroutput>
   и
   <computeroutput>00000000000000000001000000000000</computeroutput>
   с помощью оператора ИЛИ (<literal>|</literal>),
   чтобы получить биты, установленные хотя бы в одном операнде:
   <computeroutput>00000000000000000001000000000001</computeroutput>
    </literallayout>
   </para>
  </informalexample>
 </para>
 <para>
  <example>
   <title>Побитовыми операции И, ИЛИ и ИСКЛЮЧАЮЩЕЕ ИЛИ (AND, OR и XOR) над целыми числами</title>
   <programlisting role="php">
<![CDATA[
<?php
/*
 * Не обращайте внимания на этот верхний раздел кода,
 * это просто форматирование для более ясного вывода.
 */
$format = '(%1$2d = %1$04b) = (%2$2d = %2$04b)'
    . ' %3$s (%4$2d = %4$04b)' . "\n";
echo <<<EOH
 ----------  ----------- -- ----------
 результат   значение   оп тест
 ----------  ----------- -- ----------
EOH;
/*
 * Вот сами примеры.
 */
$values = array(0, 1, 2, 4, 8);
$test = 1 + 4;
echo "\n Побитовое И (AND) \n";
foreach ($values as $value) {
  $result = $value & $test;
  printf($format, $result, $value, '&', $test);
}
echo "\n Побитовое (включающее) ИЛИ (OR) \n";
foreach ($values as $value) {
  $result = $value | $test;
  printf($format, $result, $value, '|', $test);
}
echo "\n Побитовое ИСКЛЮЧАЮЩЕЕ ИЛИ (XOR) \n";
foreach ($values as $value) {
  $result = $value ^ $test;
  printf($format, $result, $value, '^', $test);
}
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
 ---------     ---------  -- ---------
 result        value      op test
 ---------     ---------  -- ---------
 Bitwise AND
( 0 = 0000) = ( 0 = 0000) & ( 5 = 0101)
( 1 = 0001) = ( 1 = 0001) & ( 5 = 0101)
( 0 = 0000) = ( 2 = 0010) & ( 5 = 0101)
( 4 = 0100) = ( 4 = 0100) & ( 5 = 0101)
( 0 = 0000) = ( 8 = 1000) & ( 5 = 0101)

 Bitwise Inclusive OR
( 5 = 0101) = ( 0 = 0000) | ( 5 = 0101)
( 5 = 0101) = ( 1 = 0001) | ( 5 = 0101)
( 7 = 0111) = ( 2 = 0010) | ( 5 = 0101)
( 5 = 0101) = ( 4 = 0100) | ( 5 = 0101)
(13 = 1101) = ( 8 = 1000) | ( 5 = 0101)

 Bitwise Exclusive OR (XOR)
( 5 = 0101) = ( 0 = 0000) ^ ( 5 = 0101)
( 4 = 0100) = ( 1 = 0001) ^ ( 5 = 0101)
( 7 = 0111) = ( 2 = 0010) ^ ( 5 = 0101)
( 1 = 0001) = ( 4 = 0100) ^ ( 5 = 0101)
(13 = 1101) = ( 8 = 1000) ^ ( 5 = 0101)
]]>
   </screen>
  </example>
 </para>
 <para>
  <example>
   <title>Побитовая операция ИСКЛЮЧАЮЩЕЕ ИЛИ (XOR) над строками</title>
   <programlisting role="php">
<![CDATA[
<?php
echo 12 ^ 9; // Выводит '5'

echo "12" ^ "9"; // Выводит символ Backspace (ascii 8)
                 // ('1' (ascii 49)) ^ ('9' (ascii 57)) = #8

echo "hallo" ^ "hello"; // Выводит ascii-значения #0 #4 #0 #0 #0
                        // 'a' ^ 'e' = #4

echo 2 ^ "3"; // Выводит 1
              // 2 ^ ((int)"3") == 1

echo "2" ^ 3; // Выводит 1
              // ((int)"2") ^ 3 == 1
?>
]]>
   </programlisting>
  </example>
 </para>
 <para>
  <example>
   <title>Bit shifting on integers</title>
   <programlisting role="php">
<![CDATA[
<?php
/*
 * Несколько примеров.
 */

echo "\n--- СДВИГ ВПРАВО НАД ПОЛОЖИТЕЛЬНЫМИ ЦЕЛЫМИ ЧИСЛАМИ ---\n";

$val = 4;
$places = 1;
$res = $val >> $places;
p($res, $val, '>>', $places, 'слева была вставлена копия знакового бита');

$val = 4;
$places = 2;
$res = $val >> $places;
p($res, $val, '>>', $places);

$val = 4;
$places = 3;
$res = $val >> $places;
p($res, $val, '>>', $places, 'биты были выдвинуты за правый край');

$val = 4;
$places = 4;
$res = $val >> $places;
p($res, $val, '>>', $places, 'то же, что и выше; нельзя сдвинуть дальше 0');

echo "\n--- СДВИГ ВПРАВО НАД ОТРИЦАТЕЛЬНЫМИ ЦЕЛЫМИ ЧИСЛАМИ ---\n";

$val = -4;
$places = 1;
$res = $val >> $places;
p($res, $val, '>>', $places, 'слева была вставлена копия знакового бита');

$val = -4;
$places = 2;
$res = $val >> $places;
p($res, $val, '>>', $places, 'биты были выдвинуты за правый край');

$val = -4;
$places = 3;
$res = $val >> $places;
p($res, $val, '>>', $places, 'то же, что и выше; нельзя сдвинуть дальше -1');

echo "\n--- СДВИГ ВЛЕВО НАД ПОЛОЖИТЕЛЬНЫМИ ЦЕЛЫМИ ЧИСЛАМИ ---\n";

$val = 4;
$places = 1;
$res = $val << $places;
p($res, $val, '<<', $places, 'правый край был дополнен нулями');

$val = 4;
$places = (PHP_INT_SIZE * 8) - 4;
$res = $val << $places;
p($res, $val, '<<', $places);

$val = 4;
$places = (PHP_INT_SIZE * 8) - 3;
$res = $val << $places;
p($res, $val, '<<', $places, 'знаковые биты были выдвинуты');

$val = 4;
$places = (PHP_INT_SIZE * 8) - 2;
$res = $val << $places;
p($res, $val, '<<', $places, 'биты были выдвинуты за левый край');

echo "\n--- СДВИГ ВЛЕВО НАД ОТРИЦАТЕЛЬНЫМИ ЦЕЛЫМИ ЧИСЛАМИ ---\n";

$val = -4;
$places = 1;
$res = $val << $places;
p($res, $val, '<<', $places, 'правый край был дополнен нулями');

$val = -4;
$places = (PHP_INT_SIZE * 8) - 3;
$res = $val << $places;
p($res, $val, '<<', $places);

$val = -4;
$places = (PHP_INT_SIZE * 8) - 2;
$res = $val << $places;
p($res, $val, '<<', $places, 'биты были выдвинуты за левый край, включая знаковый бит');

/*
 * Не обращайте внимания на этот нижний раздел кода,
 * это просто форматирование для более ясного вывода.
 */

function p($res, $val, $op, $places, $note = '') {
    $format = '%0' . (PHP_INT_SIZE * 8) . "b\n";

    printf("Выражение: %d = %d %s %d\n", $res, $val, $op, $places);

    echo " Десятичный вид:\n";
    printf(" val=%d\n", $val);
    printf(" res=%d\n", $res);

    echo " Двоичный вид:\n";
    printf(' val=' . $format, $val);
    printf(' res=' . $format, $res);

    if ($note) {
        echo " ЗАМЕЧАНИЕ: $note\n";
    }

    echo "\n";
}
?>
]]>
   </programlisting>
   &example.outputs.32bit;
   <screen>
<![CDATA[

--- СДВИГ ВПРАВО НАД ПОЛОЖИТЕЛЬНЫМИ ЦЕЛЫМИ ЧИСЛАМИ ---
Выражение: 2 = 4 >> 1
 Десятичный вид:
 val=4
 res=2
 Двоичный вид:
 val=00000000000000000000000000000100
 res=00000000000000000000000000000010
 ЗАМЕЧАНИЕ: слева была вставлена копия знакового бита

Выражение: 1 = 4 >> 2
 Десятичный вид:
 val=4
 res=1
 Двоичный вид:
 val=00000000000000000000000000000100
 res=00000000000000000000000000000001

Выражение: 0 = 4 >> 3
 Десятичный вид:
 val=4
 res=0
 Двоичный вид:
 val=00000000000000000000000000000100
 res=00000000000000000000000000000000
 ЗАМЕЧАНИЕ: биты были выдвинуты за правый край

Выражение: 0 = 4 >> 4
 Десятичный вид:
 val=4
 res=0
 Двоичный вид:
 val=00000000000000000000000000000100
 res=00000000000000000000000000000000
 ЗАМЕЧАНИЕ: то же, что и выше; нельзя сдвинуть дальше 0

--- СДВИГ ВПРАВО НА ОТРИЦАТЕЛЬНЫХ ЦЕЛЫХ ЧИСЛАХ ---
Выражение: -2 = -4 >> 1
 Десятичный вид:
 val=-4
 res=-2
 Двоичный вид:
 val=11111111111111111111111111111100
 res=11111111111111111111111111111110
 ЗАМЕЧАНИЕ: слева была вставлена копия знакового бита

Выражение: -1 = -4 >> 2
 Десятичный вид:
 val=-4
 res=-1
 Двоичный вид:
 val=11111111111111111111111111111100
 res=11111111111111111111111111111111
 ЗАМЕЧАНИЕ: биты были выдвинуты за правый край

Выражение: -1 = -4 >> 3
 Десятичный вид:
 val=-4
 res=-1
 Двоичный вид:
 val=11111111111111111111111111111100
 res=11111111111111111111111111111111
 ЗАМЕЧАНИЕ: то же, что и выше; нельзя сдвинуть дальше -1

--- СДВИГ ВЛЕВО НАД ПОЛОЖИТЕЛЬНЫМИ ЦЕЛЫМИ ЧИСЛАМИ ---
Выражение: 8 = 4 << 1
 Десятичный вид:
 val=4
 res=8
 Двоичный вид:
 val=00000000000000000000000000000100
 res=00000000000000000000000000001000
 ЗАМЕЧАНИЕ: правый край был дополнен нулями

Выражение: 1073741824 = 4 << 28
 Десятичный вид:
 val=4
 res=1073741824
 Двоичный вид:
 val=00000000000000000000000000000100
 res=01000000000000000000000000000000

Выражение: -2147483648 = 4 << 29
 Десятичный вид:
 val=4
 res=-2147483648
 Двоичный вид:
 val=00000000000000000000000000000100
 res=10000000000000000000000000000000
 ЗАМЕЧАНИЕ: знаковые биты были выдвинуты

Выражение: 0 = 4 << 30
 Десятичный вид:
 val=4
 res=0
 Двоичный вид:
 val=00000000000000000000000000000100
 res=00000000000000000000000000000000
 ЗАМЕЧАНИЕ: биты были выдвинуты за левый край

--- СДВИГ ВЛЕВО НАД ОТРИЦАТЕЛЬНЫМИ ЦЕЛЫМИ ЧИСЛАМИ ---
Выражение: -8 = -4 << 1
 Десятичный вид:
 val=-4
 res=-8
 Двоичный вид:
 val=11111111111111111111111111111100
 res=11111111111111111111111111111000
 ЗАМЕЧАНИЕ: правый край был дополнен нулями

Выражение: -2147483648 = -4 << 29
 Десятичный вид:
 val=-4
 res=-2147483648
 Двоичный вид:
 val=11111111111111111111111111111100
 res=10000000000000000000000000000000

Выражение: 0 = -4 << 30
 Десятичный вид:
 val=-4
 res=0
 Двоичный вид:
 val=11111111111111111111111111111100
 res=00000000000000000000000000000000
 ЗАМЕЧАНИЕ: биты были выдвинуты за левый край, включая знаковый бит
]]>
   </screen>
   &example.outputs.64bit;
   <screen>
<![CDATA[

--- СДВИГ ВПРАВО НАД ПОЛОЖИТЕЛЬНЫМИ ЦЕЛЫМИ ЧИСЛАМИ ---
Выражение: 2 = 4 >> 1
 Десятичный вид:
 val=4
 res=2
 Двоичный вид:
 val=0000000000000000000000000000000000000000000000000000000000000100
 res=0000000000000000000000000000000000000000000000000000000000000010
 ЗАМЕЧАНИЕ: слева была вставлена копия знакового бита

Выражение: 1 = 4 >> 2
 Десятичный вид:
 val=4
 res=1
 Двоичный вид:
 val=0000000000000000000000000000000000000000000000000000000000000100
 res=0000000000000000000000000000000000000000000000000000000000000001

Выражение: 0 = 4 >> 3
 Десятичный вид:
 val=4
 res=0
 Двоичный вид:
 val=0000000000000000000000000000000000000000000000000000000000000100
 res=0000000000000000000000000000000000000000000000000000000000000000
 ЗАМЕЧАНИЕ: биты были выдвинуты за правый край

Выражение: 0 = 4 >> 4
 Десятичный вид:
 val=4
 res=0
 Двоичный вид:
 val=0000000000000000000000000000000000000000000000000000000000000100
 res=0000000000000000000000000000000000000000000000000000000000000000
 ЗАМЕЧАНИЕ: то же, что и выше; нельзя сдвинуть дальше 0

--- СДВИГ ВПРАВО НАД ОТРИЦАТЕЛЬНЫМИ ЦЕЛЫМИ ЧИСЛАМИ ---
Выражение: -2 = -4 >> 1
 Десятичный вид:
 val=-4
 res=-2
 Двоичный вид:
 val=1111111111111111111111111111111111111111111111111111111111111100
 res=1111111111111111111111111111111111111111111111111111111111111110
 ЗАМЕЧАНИЕ: слева была вставлена копия знакового бита

Выражение: -1 = -4 >> 2
 Десятичный вид:
 val=-4
 res=-1
 Двоичный вид:
 val=1111111111111111111111111111111111111111111111111111111111111100
 res=1111111111111111111111111111111111111111111111111111111111111111
 ЗАМЕЧАНИЕ: биты были выдвинуты за правый край

Выражение: -1 = -4 >> 3
 Десятичный вид:
 val=-4
 res=-1
 Двоичный вид:
 val=1111111111111111111111111111111111111111111111111111111111111100
 res=1111111111111111111111111111111111111111111111111111111111111111
 ЗАМЕЧАНИЕ: то же, что и выше; нельзя сдвинуть дальше -1

--- СДВИГ ВЛЕВО НАД ПОЛОЖИТЕЛЬНЫМИ ЦЕЛЫМИ ЧИСЛАМИ ---
Выражение: 8 = 4 << 1
 Десятичный вид:
 val=4
 res=8
 Двоичный вид:
 val=0000000000000000000000000000000000000000000000000000000000000100
 res=0000000000000000000000000000000000000000000000000000000000001000
 ЗАМЕЧАНИЕ: правый край был дополнен нулями

Выражение: 4611686018427387904 = 4 << 60
 Десятичный вид:
 val=4
 res=4611686018427387904
 Двоичный вид:
 val=0000000000000000000000000000000000000000000000000000000000000100
 res=0100000000000000000000000000000000000000000000000000000000000000

Выражение: -9223372036854775808 = 4 << 61
 Десятичный вид:
 val=4
 res=-9223372036854775808
 Двоичный вид:
 val=0000000000000000000000000000000000000000000000000000000000000100
 res=1000000000000000000000000000000000000000000000000000000000000000
 ЗАМЕЧАНИЕ: знаковые биты были выдвинуты

Выражение: 0 = 4 << 62
 Десятичный вид:
 val=4
 res=0
 Двоичный вид:
 val=0000000000000000000000000000000000000000000000000000000000000100
 res=0000000000000000000000000000000000000000000000000000000000000000
 ЗАМЕЧАНИЕ: биты были выдвинуты за левый край

--- СДВИГ ВЛЕВО НАД ОТРИЦАТЕЛЬНЫМИ ЦЕЛЫМИ ЧИСЛАМИ ---
Выражение: -8 = -4 << 1
 Десятичный вид:
 val=-4
 res=-8
 Двоичный вид:
 val=1111111111111111111111111111111111111111111111111111111111111100
 res=1111111111111111111111111111111111111111111111111111111111111000
 ЗАМЕЧАНИЕ: правый край был дополнен нулями

Выражение: -9223372036854775808 = -4 << 61
 Десятичный вид:
 val=-4
 res=-9223372036854775808
 Двоичный вид:
 val=1111111111111111111111111111111111111111111111111111111111111100
 res=1000000000000000000000000000000000000000000000000000000000000000

Выражение: 0 = -4 << 62
 Десятичный вид:
 val=-4
 res=0
 Двоичный вид:
 val=1111111111111111111111111111111111111111111111111111111111111100
 res=0000000000000000000000000000000000000000000000000000000000000000
 ЗАМЕЧАНИЕ: биты были выдвинуты за левый край, включая знаковый бит
]]>
   </screen>
  </example>
 </para>
 <warning>
  <para>
  Используйте функции из модуля <link linkend="book.gmp">gmp</link> для побитовых
  операций над числами, большими чем <literal>PHP_INT_MAX</literal>.
  </para>
 </warning>
 <sect2 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <!-- <link linkend="language.oop5.basic.class.class">::class</link> -->
    <member><function>pack</function></member>
    <member><function>unpack</function></member>
    <member><function>gmp_and</function></member>
    <member><function>gmp_or</function></member>
    <member><function>gmp_xor</function></member>
    <member><function>gmp_testbit</function></member>
    <member><function>gmp_clrbit</function></member>
   </simplelist>
  </para>
 </sect2>
</sect1>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
