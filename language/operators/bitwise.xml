<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 16934048f79c6e117cd16a23c09c1b2ea502e284 Maintainer: sergey Status: ready -->
<!-- Reviewed: no -->
<sect1 xml:id="language.operators.bitwise">
 <title>Побитовые операторы</title>
 <titleabbrev>Побитовые операторы</titleabbrev>
 <simpara>
  Побитовые операторы вычисляют и управляют конкретными битами
  внутри целого числа.
 </simpara>
 <table>
  <title>Побитовые операторы</title>
  <tgroup cols="3">
   <thead>
    <row>
     <entry>Пример</entry>
     <entry>Название</entry>
     <entry>Результат</entry>
    </row>
   </thead>
   <tbody>
    <row>
     <entry>
      <userinput>$a &amp; $b</userinput>
     </entry>
     <entry>И</entry>
     <entry>
      Устанавливаются биты, которые установили и в переменной <varname>$a</varname>,
      и в переменной <varname>$b</varname>.
     </entry>
    </row>
    <row>
     <entry>
      <userinput>$a | $b</userinput>
     </entry>
     <entry>ИЛИ</entry>
     <entry>
      Устанавливаются биты, которые установили или в переменной <varname>$a</varname>,
      или в переменной <varname>$b</varname>.
     </entry>
    </row>
    <row>
     <entry>
      <userinput>$a ^ $b</userinput>
     </entry>
     <entry>Исключающее ИЛИ</entry>
     <entry>
      Устанавливаются биты, которые установили либо только в переменной <varname>$a</varname>,
      либо только в переменной <varname>$b</varname>, но не в обоих одновременно.
     </entry>
    </row>
    <row>
     <entry>
      <userinput>~ $a</userinput>
     </entry>
     <entry>Отрицание</entry>
     <entry>
      Устанавливаются биты, которые не установили в переменной <varname>$a</varname>, и наоборот.
     </entry>
    </row>
    <row>
     <entry>
      <userinput>$a &lt;&lt; $b</userinput>
     </entry>
     <entry>Сдвиг влево</entry>
     <entry>
      Каждый бит переменной <varname>$a</varname> сдвигается влево
      на количество позиций, которое указали в переменной <varname>$b</varname>
      (каждая позиция означает «умножить на 2»).
     </entry>
    </row>
    <row>
     <entry>
      <userinput>$a &gt;&gt; $b</userinput>
     </entry>
     <entry>Сдвиг вправо</entry>
     <entry>
      Каждый бит переменной <varname>$a</varname> сдвигается вправо
      на количество позиций, которое указали в переменной <varname>$b</varname>
      (каждая позиция означает «разделить на 2»).
     </entry>
    </row>
   </tbody>
  </tgroup>
 </table>
 <para>
  Побитовый сдвиг в PHP — арифметическая операция.
  Биты, которые сдвинулись за границы числа, отбрасываются.
  Сдвиг влево дополняет число нулями справа, при этом знаковый бит числа
  сдвигается влево, поэтому знак операнда не сохраняется.
  Сдвиг вправо сохраняет копию сдвинутого знакового бита слева, поэтому
  знак операнда сохраняется.
 </para>
 <para>
  <link linkend="language.operators.precedence">Приоритет операторов</link> изменяют скобками.
  Например, выражение <literal>$a &amp; $b == true</literal> сначала проверяет
  на равенство, а потом выполняет побитовое «И»; тогда как
  выражение <literal>($a &amp; $b) == true</literal> сначала выполняет побитовое «И»,
  а потом выполняет проверку на равенство.
 </para>
 <para>
  Операция проводится с ASCII-кодом каждого символа строки и возвращает строку,
  если оба операнда операторов <literal>&amp;</literal>, <literal>|</literal>
  и <literal>^</literal> — строки. В остальных случаях оба операнда
  <link linkend="language.types.integer.casting">преобразуются к целому числу</link>
  и результатом будет целое число.
 </para>
 <para>
  Операция выполняется с ASCII-кодом каждого символа строки и возвращает строку,
  если операнд оператора <literal>~</literal> — строка,
  иначе операнд и результат обрабатываются как целые числа.
 </para>
 <para>
  Операнды и результат выполнения операторов <literal>&lt;&lt;</literal>
  и <literal>&gt;&gt;</literal> обрабатываются как целые числа.
 </para>
 <para>
  В PHP ini-параметр error_reporting принимает побитовые значения,
  чем показывает практический пример сброса битов.
  Чтобы показать каждую ошибку, кроме уведомлений,
  инструкции файла php.ini говорят, что требуется указать:
  <userinput>E_ALL &amp; ~E_NOTICE</userinput>
 </para>
 <para>
  <informalexample>
   <para>
    <literallayout>
     Начинаем со значения E_ALL:
     <computeroutput>00000000000000000111011111111111</computeroutput>
     Затем берём значение E_NOTICE...
     <computeroutput>00000000000000000000000000001000</computeroutput>
     ... и инвертируем его оператором <literal>~</literal>:
     <computeroutput>11111111111111111111111111110111</computeroutput>
     Наконец, указываем побитовое И (&amp;), чтобы найти биты,
     которые установили в обоих значениях:
     <computeroutput>00000000000000000111011111110111</computeroutput>
    </literallayout>
   </para>
  </informalexample>
 </para>
 <para>
  Другой способ достичь этого  — указать «исключающее ИЛИ» (XOR, <literal>^</literal>),
  чтобы найти только те биты, которые установили
  либо только в одном, либо только в другом значении:
  <userinput>E_ALL ^ E_NOTICE</userinput>
 </para>
 <para>
  На примере директивы error_reporting получится показать и то,
  как устанавливают биты. Вот способ показа только неустранимых
  и исправимых ошибок:
  <userinput>E_ERROR | E_RECOVERABLE_ERROR</userinput>
 </para>
 <para>
  <informalexample>
   <para>
    <literallayout>
     Здесь процесс сочетает значение константы E_ERROR —
     <computeroutput>00000000000000000000000000000001</computeroutput> —
     со значением
     <computeroutput>00000000000000000001000000000000</computeroutput>
     через оператор ИЛИ (<literal>|</literal>),
     чтобы установить биты в заданных позициях:
     <computeroutput>00000000000000000001000000000001</computeroutput>
    </literallayout>
   </para>
  </informalexample>
 </para>
 <para>
  <example>
   <title>Пример побитовых операции И, ИЛИ и исключающее ИЛИ (AND, OR и XOR) над целыми числами</title>
   <programlisting role="php">
<![CDATA[
<?php

/*
 * Не обращайте внимания на верхний раздел кода,
 * это просто форматирование для более ясного вывода
 */
$format = '(%1$2d = %1$04b) = (%2$2d = %2$04b)'
    . ' %3$s (%4$2d = %4$04b)' . "\n";

echo <<<EOH
 ----------  ----------- -- ----------
 Результат   Значение    Тестовая операция
 ----------  ----------- -- ----------
EOH;


/*
 * Вот сами примеры
 */

$values = array(0, 1, 2, 4, 8);
$test = 1 + 4;

echo "\n Побитовое И (AND) \n";
foreach ($values as $value) {
    $result = $value & $test;
    printf($format, $result, $value, '&', $test);
}

echo "\n Побитовое (включающее) ИЛИ (OR) \n";
foreach ($values as $value) {
    $result = $value | $test;
    printf($format, $result, $value, '|', $test);
}

echo "\n Побитовое исключающее ИЛИ (XOR) \n";
foreach ($values as $value) {
    $result = $value ^ $test;
    printf($format, $result, $value, '^', $test);
}

?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
 ---------     ---------  -- ---------
 Результат     Значение   Тестовая операция
 ---------     ---------  -- ---------
 Побитовое И
( 0 = 0000) = ( 0 = 0000) & ( 5 = 0101)
( 1 = 0001) = ( 1 = 0001) & ( 5 = 0101)
( 0 = 0000) = ( 2 = 0010) & ( 5 = 0101)
( 4 = 0100) = ( 4 = 0100) & ( 5 = 0101)
( 0 = 0000) = ( 8 = 1000) & ( 5 = 0101)

 Побитовое ИЛИ
( 5 = 0101) = ( 0 = 0000) | ( 5 = 0101)
( 5 = 0101) = ( 1 = 0001) | ( 5 = 0101)
( 7 = 0111) = ( 2 = 0010) | ( 5 = 0101)
( 5 = 0101) = ( 4 = 0100) | ( 5 = 0101)
(13 = 1101) = ( 8 = 1000) | ( 5 = 0101)

 Побитовое исключающее ИЛИ (XOR)
( 5 = 0101) = ( 0 = 0000) ^ ( 5 = 0101)
( 4 = 0100) = ( 1 = 0001) ^ ( 5 = 0101)
( 7 = 0111) = ( 2 = 0010) ^ ( 5 = 0101)
( 1 = 0001) = ( 4 = 0100) ^ ( 5 = 0101)
(13 = 1101) = ( 8 = 1000) ^ ( 5 = 0101)
]]>
   </screen>
  </example>
 </para>
 <para>
  <example>
   <title>Пример побитовых операций «исключающее ИЛИ» (XOR) над строками</title>
   <programlisting role="php">
<![CDATA[
<?php

echo 12 ^ 9, PHP_EOL; // Выводит '5'

echo "12" ^ "9", PHP_EOL; // Выводит символ Backspace (ASCII-код 8)
                 // ('1' (ascii 49)) ^ ('9' (ASCII-код 57)) = #8

echo "hallo" ^ "hello", PHP_EOL; // Выводит ASCII-значения #0 #4 #0 #0 #0
                        // 'a' ^ 'e' = #4

echo 2 ^ "3", PHP_EOL; // Выводит 1
              // 2 ^ ((int) "3") == 1

echo "2" ^ 3, PHP_EOL; // Выводит 1
              // ((int) "2") ^ 3 == 1

?>

]]>
   </programlisting>
  </example>
 </para>
 <para>
  <example>
   <title>Пример сдвига битов в целых числах</title>
   <programlisting role="php">
<![CDATA[
<?php

/*
 * Несколько примеров
 */

echo "\n--- СДВИГ ВПРАВО НАД ПОЛОЖИТЕЛЬНЫМИ ЦЕЛЫМИ (НАТУРАЛЬНЫМИ) ЧИСЛАМИ ---\n";

$val = 4;
$places = 1;
$res = $val >> $places;
p($res, $val, '>>', $places, 'слева вставилась копия знакового бита');

$val = 4;
$places = 2;
$res = $val >> $places;
p($res, $val, '>>', $places);

$val = 4;
$places = 3;
$res = $val >> $places;
p($res, $val, '>>', $places, 'биты сдвинулись за правый край');

$val = 4;
$places = 4;
$res = $val >> $places;
p($res, $val, '>>', $places, 'то же, что и выше; нельзя сдвинуть дальше 0');

echo "\n--- СДВИГ ВПРАВО НАД ОТРИЦАТЕЛЬНЫМИ ЦЕЛЫМИ ЧИСЛАМИ ---\n";

$val = -4;
$places = 1;
$res = $val >> $places;
p($res, $val, '>>', $places, 'слева вставилась копия знакового бита');

$val = -4;
$places = 2;
$res = $val >> $places;
p($res, $val, '>>', $places, 'биты сдвинулись за правый край');

$val = -4;
$places = 3;
$res = $val >> $places;
p($res, $val, '>>', $places, 'то же, что и выше; нельзя сдвинуть дальше -1');

echo "\n--- СДВИГ ВЛЕВО НАД ПОЛОЖИТЕЛЬНЫМИ ЦЕЛЫМИ (НАТУРАЛЬНЫМИ) ЧИСЛАМИ ---\n";

$val = 4;
$places = 1;
$res = $val << $places;
p($res, $val, '<<', $places, 'правый край дополнился нулями');

$val = 4;
$places = (PHP_INT_SIZE * 8) - 4;
$res = $val << $places;
p($res, $val, '<<', $places);

$val = 4;
$places = (PHP_INT_SIZE * 8) - 3;
$res = $val << $places;
p($res, $val, '<<', $places, 'знаковые биты сдвинулись');

$val = 4;
$places = (PHP_INT_SIZE * 8) - 2;
$res = $val << $places;
p($res, $val, '<<', $places, 'биты сдвинулись за левый край');

echo "\n--- СДВИГ ВЛЕВО НАД ОТРИЦАТЕЛЬНЫМИ ЦЕЛЫМИ ЧИСЛАМИ ---\n";

$val = -4;
$places = 1;
$res = $val << $places;
p($res, $val, '<<', $places, 'правый дополнился нулями');

$val = -4;
$places = (PHP_INT_SIZE * 8) - 3;
$res = $val << $places;
p($res, $val, '<<', $places);

$val = -4;
$places = (PHP_INT_SIZE * 8) - 2;
$res = $val << $places;
p($res, $val, '<<', $places, 'биты сдвинулись за левый край, включая знаковый бит');

/*
 * Не обращайте внимания на нижний раздел кода,
 * это только форматирование для более ясного вывода
 */

function p($res, $val, $op, $places, $note = '')
{
    $format = '%0' . (PHP_INT_SIZE * 8) . "b\n";

    printf("Выражение: %d = %d %s %d\n", $res, $val, $op, $places);

    echo " Десятичный вид:\n";
    printf(" val=%d\n", $val);
    printf(" res=%d\n", $res);

    echo " Двоичный вид:\n";
    printf(' val=' . $format, $val);
    printf(' res=' . $format, $res);

    if ($note) {
        echo " ЗАМЕЧАНИЕ: $note\n";
    }

    echo "\n\n";
}

?>
]]>
   </programlisting>
   &example.outputs.32bit;
   <screen>
<![CDATA[

--- СДВИГ ВПРАВО НАД ПОЛОЖИТЕЛЬНЫМИ ЦЕЛЫМИ (НАТУРАЛЬНЫМИ) ЧИСЛАМИ ---
Выражение: 2 = 4 >> 1
 Десятичный вид:
  val=4
  res=2
 Двоичный вид:
  val=00000000000000000000000000000100
  res=00000000000000000000000000000010
 ЗАМЕЧАНИЕ: слева вставилась копия знакового бита

Выражение: 1 = 4 >> 2
 Десятичный вид:
  val=4
  res=1
 Двоичный вид:
  val=00000000000000000000000000000100
  res=00000000000000000000000000000001

Выражение: 0 = 4 >> 3
 Десятичный вид:
  val=4
  res=0
 Двоичный вид:
  val=00000000000000000000000000000100
  res=00000000000000000000000000000000
 ЗАМЕЧАНИЕ: биты сдвинулись за правый край

Выражение: 0 = 4 >> 4
 Десятичный вид:
  val=4
  res=0
 Двоичный вид:
  val=00000000000000000000000000000100
  res=00000000000000000000000000000000
 ЗАМЕЧАНИЕ: то же, что и выше; нельзя сдвинуть дальше 0

--- СДВИГ ВПРАВО НА ОТРИЦАТЕЛЬНЫХ ЦЕЛЫХ ЧИСЛАХ ---
Выражение: -2 = -4 >> 1
 Десятичный вид:
  val=-4
  res=-2
 Двоичный вид:
  val=11111111111111111111111111111100
  res=11111111111111111111111111111110
 ЗАМЕЧАНИЕ: слева вставилась копия знакового бита

Выражение: -1 = -4 >> 2
 Десятичный вид:
  val=-4
  res=-1
 Двоичный вид:
  val=11111111111111111111111111111100
  res=11111111111111111111111111111111
 ЗАМЕЧАНИЕ: биты сдвинулись за правый край

Выражение: -1 = -4 >> 3
 Десятичный вид:
  val=-4
  res=-1
 Двоичный вид:
  val=11111111111111111111111111111100
  res=11111111111111111111111111111111
 ЗАМЕЧАНИЕ: то же, что и выше; нельзя сдвинуть дальше -1

--- СДВИГ ВЛЕВО НАД ПОЛОЖИТЕЛЬНЫМИ ЦЕЛЫМИ (НАТУРАЛЬНЫМИ) ЧИСЛАМИ ---
Выражение: 8 = 4 << 1
 Десятичный вид:
  val=4
  res=8
 Двоичный вид:
  val=00000000000000000000000000000100
  res=00000000000000000000000000001000
 ЗАМЕЧАНИЕ: правый край дополнился нулями

Выражение: 1073741824 = 4 << 28
 Десятичный вид:
  val=4
  res=1073741824
 Двоичный вид:
  val=00000000000000000000000000000100
  res=01000000000000000000000000000000

Выражение: -2147483648 = 4 << 29
 Десятичный вид:
  val=4
  res=-2147483648
 Двоичный вид:
  val=00000000000000000000000000000100
  res=10000000000000000000000000000000
 ЗАМЕЧАНИЕ: знаковые биты сдвинулись

Выражение: 0 = 4 << 30
 Десятичный вид:
  val=4
  res=0
 Двоичный вид:
  val=00000000000000000000000000000100
  res=00000000000000000000000000000000
 ЗАМЕЧАНИЕ: биты сдвинулись за левый край

--- СДВИГ ВЛЕВО НАД ОТРИЦАТЕЛЬНЫМИ ЦЕЛЫМИ ЧИСЛАМИ ---
Выражение: -8 = -4 << 1
 Десятичный вид:
  val=-4
  res=-8
 Двоичный вид:
  val=11111111111111111111111111111100
  res=11111111111111111111111111111000
 ЗАМЕЧАНИЕ: правый край дополнился нулями

Выражение: -2147483648 = -4 << 29
 Десятичный вид:
  val=-4
  res=-2147483648
 Двоичный вид:
  val=11111111111111111111111111111100
  res=10000000000000000000000000000000

Выражение: 0 = -4 << 30
 Десятичный вид:
  val=-4
  res=0
 Двоичный вид:
  val=11111111111111111111111111111100
  res=00000000000000000000000000000000
 ЗАМЕЧАНИЕ: биты сдвинулись за левый край, включая знаковый бит
]]>
   </screen>
   &example.outputs.64bit;
   <screen>
<![CDATA[

--- СДВИГ ВПРАВО НАД ПОЛОЖИТЕЛЬНЫМИ ЦЕЛЫМИ (НАТУРАЛЬНЫМИ) ЧИСЛАМИ ---
Выражение: 2 = 4 >> 1
 Десятичный вид:
  val=4
  res=2
 Двоичный вид:
  val=0000000000000000000000000000000000000000000000000000000000000100
  res=0000000000000000000000000000000000000000000000000000000000000010
 ЗАМЕЧАНИЕ: слева вставилась копия знакового бита

Выражение: 1 = 4 >> 2
 Десятичный вид:
  val=4
  res=1
 Двоичный вид:
  val=0000000000000000000000000000000000000000000000000000000000000100
  res=0000000000000000000000000000000000000000000000000000000000000001

Выражение: 0 = 4 >> 3
 Десятичный вид:
  val=4
  res=0
 Двоичный вид:
  val=0000000000000000000000000000000000000000000000000000000000000100
  res=0000000000000000000000000000000000000000000000000000000000000000
 ЗАМЕЧАНИЕ: биты сдвинулись за правый край

Выражение: 0 = 4 >> 4
 Десятичный вид:
  val=4
  res=0
 Двоичный вид:
  val=0000000000000000000000000000000000000000000000000000000000000100
  res=0000000000000000000000000000000000000000000000000000000000000000
 ЗАМЕЧАНИЕ: то же, что и выше; нельзя сдвинуть дальше 0

--- СДВИГ ВПРАВО НАД ОТРИЦАТЕЛЬНЫМИ ЦЕЛЫМИ ЧИСЛАМИ ---
Выражение: -2 = -4 >> 1
 Десятичный вид:
  val=-4
  res=-2
 Двоичный вид:
  val=1111111111111111111111111111111111111111111111111111111111111100
  res=1111111111111111111111111111111111111111111111111111111111111110
 ЗАМЕЧАНИЕ: слева вставилась копия знакового бита

Выражение: -1 = -4 >> 2
 Десятичный вид:
  val=-4
  res=-1
 Двоичный вид:
  val=1111111111111111111111111111111111111111111111111111111111111100
  res=1111111111111111111111111111111111111111111111111111111111111111
 ЗАМЕЧАНИЕ: биты сдвинулись за правый край

Выражение: -1 = -4 >> 3
 Десятичный вид:
  val=-4
  res=-1
 Двоичный вид:
  val=1111111111111111111111111111111111111111111111111111111111111100
  res=1111111111111111111111111111111111111111111111111111111111111111
 ЗАМЕЧАНИЕ: то же, что и выше; нельзя сдвинуть дальше -1

--- СДВИГ ВЛЕВО НАД ПОЛОЖИТЕЛЬНЫМИ ЦЕЛЫМИ (НАТУРАЛЬНЫМИ) ЧИСЛАМИ ---
Выражение: 8 = 4 << 1
 Десятичный вид:
  val=4
  res=8
 Двоичный вид:
  val=0000000000000000000000000000000000000000000000000000000000000100
  res=0000000000000000000000000000000000000000000000000000000000001000
 ЗАМЕЧАНИЕ: правый край дополнился нулями

Выражение: 4611686018427387904 = 4 << 60
 Десятичный вид:
  val=4
  res=4611686018427387904
 Двоичный вид:
  val=0000000000000000000000000000000000000000000000000000000000000100
  res=0100000000000000000000000000000000000000000000000000000000000000

Выражение: -9223372036854775808 = 4 << 61
 Десятичный вид:
  val=4
  res=-9223372036854775808
 Двоичный вид:
  val=0000000000000000000000000000000000000000000000000000000000000100
  res=1000000000000000000000000000000000000000000000000000000000000000
 ЗАМЕЧАНИЕ: знаковые биты сдвинулись

Выражение: 0 = 4 << 62
 Десятичный вид:
  val=4
  res=0
 Двоичный вид:
  val=0000000000000000000000000000000000000000000000000000000000000100
  res=0000000000000000000000000000000000000000000000000000000000000000
 ЗАМЕЧАНИЕ: биты сдвинулись за левый край

--- СДВИГ ВЛЕВО НАД ОТРИЦАТЕЛЬНЫМИ ЦЕЛЫМИ ЧИСЛАМИ ---
Выражение: -8 = -4 << 1
 Десятичный вид:
  val=-4
  res=-8
 Двоичный вид:
  val=1111111111111111111111111111111111111111111111111111111111111100
  res=1111111111111111111111111111111111111111111111111111111111111000
 ЗАМЕЧАНИЕ: правый край дополнился нулями

Выражение: -9223372036854775808 = -4 << 61
 Десятичный вид:
  val=-4
  res=-9223372036854775808
 Двоичный вид:
  val=1111111111111111111111111111111111111111111111111111111111111100
  res=1000000000000000000000000000000000000000000000000000000000000000

Выражение: 0 = -4 << 62
 Десятичный вид:
  val=-4
  res=0
 Двоичный вид:
  val=1111111111111111111111111111111111111111111111111111111111111100
  res=0000000000000000000000000000000000000000000000000000000000000000
 ЗАМЕЧАНИЕ: биты сдвинулись за левый край, включая знаковый бит
]]>
   </screen>
  </example>
 </para>
 <warning>
  <para>
   Для побитовых операций над числами, которые превышают значение константы
   <constant>PHP_INT_MAX</constant>, вызывают функции модуля <link linkend="book.gmp">gmp</link>.
  </para>
 </warning>
 <sect2 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>pack</function></member>
    <member><function>unpack</function></member>
    <member><function>gmp_and</function></member>
    <member><function>gmp_or</function></member>
    <member><function>gmp_xor</function></member>
    <member><function>gmp_testbit</function></member>
    <member><function>gmp_clrbit</function></member>
   </simplelist>
  </para>
 </sect2>
</sect1>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
