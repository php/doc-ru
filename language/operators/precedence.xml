<?xml version="1.0" encoding="utf-8"?>
<!-- Reviewed: no -->
<sect1 xml:id="language.operators.precedence">
 <title>Приоритет оператора</title>
 <para>
  Приоритет оператора определяет, насколько «тесно» он связывает между собой два
  выражения. Например, выражение <literal>1 + 5 * 3</literal> вычисляется как
  <literal>16</literal>, а не <literal>18</literal>, поскольку оператор умножения ("*") имеет
  более высокий приоритет, чем оператор сложения ("+"). Круглые скобки могут
  использоваться для принудительного указания порядка выполнения операторов. Например,
  выражение <literal>(1 + 5) * 3</literal> вычисляется как <literal>18</literal>.
 </para>
 <para>
  Если операторы имеют равный приоритет, то будут ли они выполняться справа налево или
  слева направо определяется их ассоциативностью. К примеру, "-" является
  лево-ассоциативным оператором. Следовательно <literal>1 - 2 - 3</literal> сгруппируется
  как <literal>(1 - 2) - 3</literal> и пересчитается в <literal>-4</literal>. С другой стороны
  "=" — право-ассоциативный оператор, так что <literal>$a = $b = $c</literal> сгруппируется
  как <literal>$a = ($b = $c)</literal>.
 </para>
 <para>
  Неассоциативные операторы с одинаковым приоритетом не могут использоваться совместно.
  К примеру <literal>1 &lt; 2 &gt; 1</literal> не будет работать в PHP. Выражение
  <literal>1 &lt;= 1 == 1</literal>, с другой стороны, будет, поскольку <literal>==</literal>
  имеет более низкий приоритет чем <literal>&lt;=</literal>.
 </para>
 <para>
  Ассоциативность имеет смысл только для двоичных (и тернарных) операторов.
  Унарные операторы являются префиксными или постфиксными, поэтому это понятие не применимо.
  Например, <literal>!!$a</literal> можно сгруппировать только как <literal>!(!$a)</literal>.
 </para>
 <para>
  Использование скобок, кроме случаев когда они строго необходимы, может улучшить
  читаемость кода, группируя явно, а не полагаясь на приоритеты и ассоциативность.
 </para>
 <para>
  В следующей таблице приведён список операторов, отсортированный по
  убыванию их приоритетов. Операторы, размещённые в одной строке имеют
  одинаковый приоритет и порядок их выполнения определяется исходя из
  их ассоциативности.
  <table><title>Порядок выполнения операторов</title>
   <tgroup cols="2">
    <thead>
     <row>
      <entry>Ассоциативность</entry>
      <entry>Оператор</entry>
      <entry>Дополнительная информация</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry>(н/а)</entry>
      <entry>
       <literal>clone</literal>
       <literal>new</literal>
      </entry>
      <entry>
       <link linkend="language.oop5.cloning">clone</link> и <link linkend="language.oop5.basic.new">new</link>
      </entry>
     </row>
     <row>
      <entry>правая</entry>
      <entry>
       <literal>**</literal>
      </entry>
      <entry>
       <link linkend="language.operators.arithmetic">арифметические операторы</link>
      </entry>
     </row>
     <row>
      <entry>(н/а)</entry>
      <entry>
       <literal>+</literal>
       <literal>-</literal>
       <literal>++</literal>
       <literal>--</literal>
       <literal>~</literal>
       <literal>(int)</literal>
       <literal>(float)</literal>
       <literal>(string)</literal>
       <literal>(array)</literal>
       <literal>(object)</literal>
       <literal>(bool)</literal>
       <literal>@</literal>
      </entry>
      <entry>
       <link linkend="language.operators.arithmetic">арифметические операторы</link> (унарные <literal>+</literal> и <literal>-</literal>),
    <link linkend="language.operators.increment">инкремент/декремент</link>,
    <link linkend="language.operators.bitwise">побитовые операторы</link>,
    <link linkend="language.types.typecasting">приведение типов</link>&listendand;
    <link linkend="language.operators.errorcontrol">оператор управления ошибками</link>
      </entry>
     </row>
     <row>
      <entry>левая</entry>
      <entry>instanceof</entry>
      <entry>
       <link linkend="language.operators.type">типы</link>
      </entry>
     </row>
     <row>
      <entry>(н/а)</entry>
      <entry>!</entry>
      <entry>
       <link linkend="language.operators.logical">логические операторы</link>
      </entry>
     </row>
     <row>
      <entry>левая</entry>
      <entry>
       <literal>*</literal>
       <literal>/</literal>
       <literal>%</literal>
      </entry>
      <entry>
       <link linkend="language.operators.arithmetic">арифметические операторы</link>
      </entry>
     </row>
     <row>
      <entry>левая</entry>
      <entry>
       <literal>+</literal>
       <literal>-</literal>
       <literal>.</literal>
      </entry>
      <entry>
       <link linkend="language.operators.arithmetic">арифметические операторы</link> (бинарные <literal>+</literal> и <literal>-</literal>),
    <link linkend="language.operators.array">операторы, работающие с массивами</link>&listendand;
    <link linkend="language.operators.string">строковые операторы</link> (<literal>.</literal> до PHP 8.0.0)
    </entry>
     </row>
     <row>
      <entry>левая</entry>
      <entry>
       <literal>&lt;&lt;</literal>
       <literal>&gt;&gt;</literal>
      </entry>
      <entry>
       <link linkend="language.operators.bitwise">побитовые операторы</link>
      </entry>
     </row>
     <row>
      <entry>левая</entry>
      <entry>
       <literal>.</literal>
      </entry>
      <entry>
       <link linkend="language.operators.string">строковые операторы</link> (начиная с PHP 8.0.0)
    </entry>
     </row>
     <row>
      <entry>неассоциативна</entry>
      <entry>
       <literal>&lt;</literal>
       <literal>&lt;=</literal>
       <literal>&gt;</literal>
       <literal>&gt;=</literal>
      </entry>
      <entry>
       <link linkend="language.operators.comparison">операторы сравнения</link>
      </entry>
     </row>
     <row>
      <entry>неассоциативна</entry>
      <entry>
       <literal>==</literal>
       <literal>!=</literal>
       <literal>===</literal>
       <literal>!==</literal>
       <literal>&lt;&gt;</literal>
       <literal>&lt;=&gt;</literal>
      </entry>
      <entry>
       <link linkend="language.operators.comparison">операторы сравнения</link>
      </entry>
     </row>
     <row>
      <entry>левая</entry>
      <entry>
       <literal>&amp;</literal>
      </entry>
      <entry>
       <link linkend="language.operators.bitwise">побитовые операторы</link>&listendand;
    <link linkend="language.references">ссылки</link>
      </entry>
     </row>
     <row>
      <entry>левая</entry>
      <entry>
       <literal>^</literal>
      </entry>
      <entry>
       <link linkend="language.operators.bitwise">побитовые операторы</link>
      </entry>
     </row>
     <row>
      <entry>левая</entry>
      <entry>
       <literal>|</literal>
      </entry>
      <entry>
       <link linkend="language.operators.bitwise">побитовые операторы</link>
      </entry>
     </row>
     <row>
      <entry>левая</entry>
      <entry>
       <literal>&amp;&amp;</literal>
      </entry>
      <entry>
       <link linkend="language.operators.logical">логические операторы</link>
      </entry>
     </row>
     <row>
      <entry>левая</entry>
      <entry>
       <literal>||</literal>
      </entry>
      <entry>
       <link linkend="language.operators.logical">логические операторы</link>
      </entry>
     </row>
     <row>
      <entry>правая</entry>
      <entry>
       <literal>??</literal>
      </entry>
      <entry>
       <link linkend="language.operators.comparison.coalesce">операторы сравнения с null</link>
      </entry>
     </row>
     <row>
      <entry>неассоциативна</entry>
      <entry>
       <literal>? :</literal>
      </entry>
      <entry>
       <link linkend="language.operators.comparison.ternary">тернарный оператор</link>
    (лево-ассоциативный до PHP 8.0.0)
    </entry>
     </row>
     <row>
      <entry>правая</entry>
      <entry>
       <literal>=</literal>
       <literal>+=</literal>
       <literal>-=</literal>
       <literal>*=</literal>
       <literal>**=</literal>
       <literal>/=</literal>
       <literal>.=</literal>
       <literal>%=</literal>
       <literal>&amp;=</literal>
       <literal>|=</literal>
       <literal>^=</literal>
       <literal>&lt;&lt;=</literal>
       <literal>&gt;&gt;=</literal>
       <literal>??=</literal>
      </entry>
      <entry>
       <link linkend="language.operators.assignment">операторы присваивания</link>
      </entry>
     </row>
     <row>
      <entry>(н/а)</entry>
      <entry>
       <literal>yield from</literal>
      </entry>
      <entry>
       <link linkend="control-structures.yield.from">yield from</link>
      </entry>
     </row>
     <row>
      <entry>(н/а)</entry>
      <entry>
       <literal>yield</literal>
      </entry>
      <entry>
       <link linkend="control-structures.yield">yield</link>
      </entry>
     </row>
     <row>
      <entry>(н/а)</entry>
      <entry>
       <literal>print</literal>
      </entry>
      <entry>
       <function>print</function>
      </entry>
     </row>
     <row>
      <entry>левая</entry>
      <entry>
       <literal>and</literal>
      </entry>
      <entry>
       <link linkend="language.operators.logical">логические операторы</link>
      </entry>
     </row>
     <row>
      <entry>левая</entry>
      <entry>
       <literal>xor</literal>
      </entry>
      <entry>
       <link linkend="language.operators.logical">логические операторы</link>
      </entry>
     </row>
     <row>
      <entry>левая</entry>
      <entry>
       <literal>or</literal>
      </entry>
      <entry>
       <link linkend="language.operators.logical">логические операторы</link>
      </entry>
     </row>
    </tbody>
   </tgroup>
  </table>
 </para>
 <para>
  <example>
   <title>Ассоциативность</title>
   <programlisting role="php"><![CDATA[
<?php
$a = 3 * 3 % 5; // (3 * 3) % 5 = 4
// ассоциативность тернарных операторов отличается от C/C++
$a = true ? 0 : true ? 1 : 2; // (true ? 0 : true) ? 1 : 2 = 2 (до PHP 8.0.0)
$a = 1;
$b = 2;
$a = $b += 3; // $a = ($b += 3) -> $a = 5, $b = 5
?>
]]></programlisting>
  </example>
 </para>
 <para>
  Приоритет и ассоциативность оператора определяет только то, как группируется
  выражение, а не порядок его вычисления. Обычно PHP не указывает, в каком порядке
  вычисляются выражения и кода, который предполагает специфичный порядок вычисления
  следует избегать, потому, что поведение может меняться в разных версиях PHP или
  в зависимости от окружающего кода.

  <example><title>Неопределённый порядок вычисления</title>
   <programlisting role="php"><![CDATA[
<?php
$a = 1;
echo $a + $a++; // может вывести как 2 так и 3
$i = 1;
$array[$i] = $i++; // может установить индекс как 1, так 2
?>
]]></programlisting>
  </example>
  <example>
   <title>
    <literal>+</literal>, <literal>-</literal> и <literal>.</literal> имеют одинаковый приоритет (до PHP 8.0.0)</title>
   <programlisting role="php"><![CDATA[
<?php
$x = 4;
// следующий код может выдать неожиданный результат:
echo "x минус 1 равно " . $x-1 . ", ну я надеюсь\n";
// поскольку он вычисляется таким образом (до PHP 8.0.0):
echo (("x минус один равно " . $x) - 1) . ", ну я надеюсь\n";
// требуемый приоритет следует задать скобками:
echo "x минус 1 равно " . ($x-1) . ", ну я надеюсь\n";
?>
]]></programlisting>
  &example.outputs;
  <screen><![CDATA[
-1, ну я надеюсь
-1, ну я надеюсь
x минус один равно 3, ну я надеюсь
]]></screen>
  </example>
 </para>
 <note>
  <para>
  Несмотря на то, что <literal>=</literal> имеет более низкий приоритет, чем большинство
  других операторов, PHP всё же позволяет делать так: <literal>if (!$a = foo())</literal>,
  в этом примере результат выполнения <literal>foo()</literal> будет присвоен
  <varname>$a</varname>.
  </para>
 </note>
 <sect2 role="changelog">
  &reftitle.changelog;
  <informaltable><tgroup cols="2"><thead><row><entry>&Version;</entry>
      <entry>&Description;</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry>8.0.0</entry>
      <entry>
     Объединение строк (<literal>.</literal>) теперь имеет более низкий приоритет, чем
     арифметическое сложение/вычитание (<literal>+</literal> и <literal>-</literal>) и
     побитовый сдвиг влево/вправо (<literal>&lt;&lt;</literal> и <literal>&gt;&gt;</literal>);
     ранее он имел тот же приоритет, что и <literal>+</literal> и <literal>-</literal>,
     и более высокий приоритет, чем <literal>&lt;&lt;</literal> и <literal>&gt;&gt;</literal>.
    </entry>
     </row>
     <row>
      <entry>8.0.0</entry>
      <entry>
    Тернарный оператор (<literal>? :</literal>) теперь неассоциативен;
    ранее он был лево-ассоциативным.
    </entry>
     </row>
     <row>
      <entry>7.4.0</entry>
      <entry>
     Опираясь на приоритет конкатенации строк (<literal>.</literal>) относительно
     арифметического сложения/вычитания (<literal>+</literal> или <literal>-</literal>) или побитового
     сдвига влево/вправо (<literal>&lt;&lt;</literal> или <literal>&gt;&gt;</literal>),
     т. е. их совместное использование в выражении без скобок не рекомендуется.
    </entry>
     </row>
     <row>
      <entry>7.4.0</entry>
      <entry>
    Не рекомендуется полагаться на лево-ассоциативность тернарного оператора (<literal>? :</literal>),
    т. е. вложение нескольких тернарных операторов без скобок.
    </entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </sect2>
</sect1>
