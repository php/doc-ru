<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 16934048f79c6e117cd16a23c09c1b2ea502e284 Maintainer: sergey Status: ready -->
<!-- Reviewed: no -->
<sect1 xml:id="language.operators.type">
 <title>Оператор проверки принадлежности типу</title>
 <titleabbrev>Проверка типа</titleabbrev>
 <para>
  Оператор <literal>instanceof</literal> определяет,
  содержит ли PHP-переменная экземпляр объекта
  конкретного <link linkend="language.oop5.basic.class">класса</link>.
  <example>
   <title>Проверка принадлежности объекта классу оператором <literal>instanceof</literal></title>
   <programlisting role="php">
<![CDATA[
<?php

class MyClass {}

class NotMyClass {}

$a = new MyClass();

var_dump($a instanceof MyClass);
var_dump($a instanceof NotMyClass);

?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
bool(true)
bool(false)
]]>
   </screen>
  </example>
 </para>
 <para>
  Оператор <literal>instanceof</literal> также определяет,
  принадлежит ли объект, который хранит переменная, классу-наследнику:
  <example>
   <title>Проверка принадлежности объекта класса-наследника супертипу оператором <literal>instanceof</literal></title>
   <programlisting role="php">
<![CDATA[
<?php

class ParentClass {}

class MyClass extends ParentClass {}

$a = new MyClass();

var_dump($a instanceof MyClass);
var_dump($a instanceof ParentClass);

?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
bool(true)
bool(true)
]]>
   </screen>
  </example>
 </para>
 <para>
  Для проверки <emphasis>непринадлежности</emphasis> объекта классу
  указывают <link linkend="language.operators.logical">логический оператор <literal>not</literal></link>.
  <example>
   <title>
    Проверка непринадлежности объекта экземпляру класса оператором <literal>instanceof</literal> с оператором логического <emphasis>не</emphasis>
   </title>
   <programlisting role="php">
<![CDATA[
<?php

class MyClass {}

$a = new MyClass();
var_dump(!($a instanceof stdClass));

?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
bool(true)
]]>
   </screen>
  </example>
 </para>
 <para>
  Наконец, оператор <literal>instanceof</literal> также проверяет,
  реализует ли объект <link linkend="language.oop5.interfaces">интерфейс</link>:
  <example>
   <title>Проверка принадлежности типа объекта интерфейсу оператором <literal>instanceof</literal></title>
   <programlisting role="php">
<![CDATA[
<?php

interface MyInterface {}

class MyClass implements MyInterface {}

$a = new MyClass();

var_dump($a instanceof MyClass);
var_dump($a instanceof MyInterface);

?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
bool(true)
bool(true)
]]>
   </screen>
  </example>
 </para>
 <para>
  Оператор <literal>instanceof</literal> чаще указывают с буквальным названием класса,
  но оператор также работает с переменной объекта или строковой переменной:
  <example>
   <title>Проверка принадлежности объекта типу оператором <literal>instanceof</literal> с другими переменными</title>
<programlisting role="php">
<![CDATA[
<?php

interface MyInterface {}

class MyClass implements MyInterface {}

$a = new MyClass();
$b = new MyClass();
$c = 'MyClass';
$d = 'NotMyClass';

var_dump($a instanceof $b); // Переменная $b — объект класса MyClass
var_dump($a instanceof $c); // Переменная $c — строка 'MyClass'
var_dump($a instanceof $d); // Переменная $d — строка 'NotMyClass'

?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
bool(true)
bool(true)
bool(false)
]]>
   </screen>
  </example>
 </para>
 <para>
  Оператор instanceof не выбрасывает ошибок, если проверяемая переменная —
  не объект, оператор только вернёт значение &false;. Проверка принадлежности констант, однако,
  до PHP 7.3.0 выбрасывала фатальную ошибку.
  <example>
   <title>Проверка принадлежности классу переменных других типов оператором <literal>instanceof</literal></title>
   <programlisting role="php">
<![CDATA[
<?php

$a = 1;
$b = NULL;
$c = fopen('/tmp/', 'r');

var_dump($a instanceof stdClass); // Переменная $a — целое типа integer
var_dump($b instanceof stdClass); // Переменная $b — NULL
var_dump($c instanceof stdClass); // Переменная $c — значение с типом resource
var_dump(FALSE instanceof stdClass);

?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
bool(false)
bool(false)
bool(false)
PHP Fatal error:  instanceof expects an object instance, constant given
]]>
   </screen>
  </example>
 </para>
 <para>
  Начиная с PHP 7.3.0 константы в левой части оператора <literal>instanceof</literal> стали допустимыми.
  <example>
   <title>Проверка принадлежности типа константы классу оператором <literal>instanceof</literal></title>
   <programlisting role="php">
<![CDATA[
<?php

var_dump(FALSE instanceof stdClass);

?>
]]>
   </programlisting>
   &example.outputs.73;
   <screen>
<![CDATA[
bool(false)
]]>
   </screen>
  </example>
 </para>
 <para>
  Начиная с PHP 8.0.0 оператор <literal>instanceof</literal> разрешили
  указывать с произвольными выражениями.
  Требования к выражению: записывается в круглых скобках и возвращает значение с типом <type>string</type>.
  <example>
   <title>
    Пример работы оператора <literal>instanceof</literal> с произвольным выражением
   </title>
   <programlisting role="php">
<![CDATA[
<?php

class ClassA extends \stdClass {}
class ClassB extends \stdClass {}
class ClassC extends ClassB {}
class ClassD extends ClassA {}

function getSomeClass(): string
{
    return ClassA::class;
}

var_dump(new ClassA instanceof ('std' . 'Class'));
var_dump(new ClassB instanceof ('Class' . 'B'));
var_dump(new ClassC instanceof ('Class' . 'A'));
var_dump(new ClassD instanceof (getSomeClass()));

?>
]]>
   </programlisting>
   &example.outputs.8;
   <screen>
<![CDATA[
bool(true)
bool(true)
bool(false)
bool(true)
]]>
   </screen>
  </example>
 </para>
 <simpara>
  Оператор <literal>instanceof</literal> аналогичен функции <function>is_a</function>.
 </simpara>
 <sect2 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>get_class</function></member>
    <member><function>is_a</function></member>
   </simplelist>
  </para>
 </sect2>
</sect1>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
