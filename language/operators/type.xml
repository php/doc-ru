<?xml version="1.0" encoding="utf-8"?>
<!-- Reviewed: no -->
 <sect1 xml:id="language.operators.type">
 <title>Оператор проверки типа</title>
 <para>
  Оператор <literal>instanceof</literal> определяет,
  является ли текущий объект экземпляром указанного
  <link linkend="language.oop5.basic.class">класса</link>.
  <example>
  <title>Использование <literal>instanceof</literal> с классами</title>
  <programlisting role="php">
<![CDATA[
<?php
class MyClass
{
}
class NotMyClass
{
}
$a = new MyClass;
var_dump($a instanceof MyClass);
var_dump($a instanceof NotMyClass);
?>
]]>
  </programlisting>
  &example.outputs;
  <screen>
<![CDATA[
bool(true)
bool(false)
]]>
  </screen>
  </example>
 </para>
 <para>
  Оператор <literal>instanceof</literal> также может быть использован
  для определения, наследует ли определённый объект какой-либо класс:
  <example>
  <title>Использование <literal>instanceof</literal> с наследуемыми классами</title>
  <programlisting role="php">
<![CDATA[
<?php
class ParentClass
{
}
class MyClass extends ParentClass
{
}
$a = new MyClass;
var_dump($a instanceof MyClass);
var_dump($a instanceof ParentClass);
?>
]]>
  </programlisting>
  &example.outputs;
  <screen>
<![CDATA[
bool(true)
bool(true)
]]>
  </screen>
  </example>
 </para>
 <para>
  Для проверки <emphasis>непринадлежности</emphasis> объекта некоторому классу,
  используйте <link linkend="language.operators.logical">логический оператор
  <literal>not</literal></link>.
  <example>
  <title>Использование <literal>instanceof</literal> для проверки того, что объект
   <emphasis>не</emphasis> является экземпляром класса</title>
  <programlisting role="php">
<![CDATA[
<?php
class MyClass
{
}
$a = new MyClass;
var_dump(!($a instanceof stdClass));
?>
]]>
  </programlisting>
  &example.outputs;
  <screen>
<![CDATA[
bool(true)
]]>
  </screen>
  </example>
 </para>
 <para>
  Наконец, <literal>instanceof</literal> может быть также использован для проверки
  реализации объектом некоторого <link
  linkend="language.oop5.interfaces">интерфейса</link>:
  <example>
  <title>Использование <literal>instanceof</literal> с интерфейсами</title>
  <programlisting role="php">
<![CDATA[
<?php
interface MyInterface
{
}
class MyClass implements MyInterface
{
}
$a = new MyClass;
var_dump($a instanceof MyClass);
var_dump($a instanceof MyInterface);
?>
]]>
  </programlisting>
  &example.outputs;
  <screen>
<![CDATA[
bool(true)
bool(true)
]]>
  </screen>
  </example>
 </para>
 <para>
  Хотя <literal>instanceof</literal> обычно используется с прямо указанным именем класса,
  он также может быть использован с другим объектом или строковой переменной:
  <example>
  <title>Использование <literal>instanceof</literal> с другими переменными</title>
  <programlisting role="php">
<![CDATA[
<?php
interface MyInterface
{
}
class MyClass implements MyInterface
{
}
$a = new MyClass;
$b = new MyClass;
$c = 'MyClass';
$d = 'NotMyClass';
var_dump($a instanceof $b); // $b — объект класса MyClass
var_dump($a instanceof $c); // $c — строка 'MyClass'
var_dump($a instanceof $d); // $d — строка 'NotMyClass'
?>
]]>
  </programlisting>
  &example.outputs;
  <screen>
<![CDATA[
bool(true)
bool(true)
bool(false)
]]>
  </screen>
  </example>
 </para>
 <para>
  Оператор instanceof не генерирует никаких ошибок, если проверяемая переменная не
  является объектом. В этом случае он просто возвращает &false;. Константы, тем не менее,
  не допускались до PHP 7.3.0.
  <example>
  <title>Пример использования оператора <literal>instanceof</literal> для проверки других переменных</title>
  <programlisting role="php">
<![CDATA[
<?php
$a = 1;
$b = NULL;
$c = imagecreate(5, 5);
var_dump($a instanceof stdClass); // $a — целое типа integer
var_dump($b instanceof stdClass); // $b — NULL
var_dump($c instanceof stdClass); // $c — значение типа resource
var_dump(FALSE instanceof stdClass);
?>
]]>
  </programlisting>
  &example.outputs;
  <screen>
<![CDATA[
bool(false)
bool(false)
bool(false)
PHP Fatal error: instanceof expects an object instance, constant given
]]>
  </screen>
  </example>
 </para>
 <para>
  Начиная с PHP 7.3.0, константы разрешены в левой части оператора <literal>instanceof</literal>.
  <example>
  <title>Использование <literal>instanceof</literal> для проверки констант</title>
  <programlisting role="php">
<![CDATA[
<?php
var_dump(FALSE instanceof stdClass);
?>
]]>
  </programlisting>
  &example.outputs.73;
  <screen>
<![CDATA[
bool(false)
]]>
  </screen>
  </example>
 </para>
 <para>
  Начиная с PHP 8.0.0, <literal>instanceof</literal> теперь можно использовать с произвольными выражениями.
  Выражение должно быть заключено в круглые скобки и представлять собой строку (<type>string</type>).
  <example>
   <title>Пример использования <literal>instanceof</literal> с произвольным выражением</title>
   <programlisting role="php">
<![CDATA[
<?php
class ClassA extends \stdClass {}
class ClassB extends \stdClass {}
class ClassC extends ClassB {}
class ClassD extends ClassA {}
function getSomeClass(): string
{
  return ClassA::class;
}
var_dump(new ClassA instanceof ('std' . 'Class'));
var_dump(new ClassB instanceof ('Class' . 'B'));
var_dump(new ClassC instanceof ('Class' . 'A'));
var_dump(new ClassD instanceof (getSomeClass()));
?>
]]>
   </programlisting>
   &example.outputs.8;
   <screen>
<![CDATA[
bool(true)
bool(true)
bool(false)
bool(true)
]]>
   </screen>
  </example>
  </para>

 <simpara>
  Оператор <literal>instanceof</literal> аналогичен функции <function>is_a</function>.
 </simpara>

 <sect2 role="seealso">
  &reftitle.seealso;
  <para>
  <simplelist>
   <member><function>get_class</function></member>
   <member><function>is_a</function></member>
  </simplelist>
  </para>
 </sect2>
</sect1>
