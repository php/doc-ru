<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 22583751fbfdaa3eaa41aeb6470d1343f5cb2c78 Maintainer: rjhdby Status: ready -->
<!-- Reviewed: no -->
<sect1 xml:id="control-structures.match" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>match</title>
 <?phpdoc print-version-for="match"?>
 <para>
  Выражение <literal>match</literal> выбирает ветвь вычисления
  на основе проверки, которая показывает, идентично ли значение условного выражения
  значению входного условного выражения.
  Аналогично инструкции <literal>switch</literal> выражение
  <literal>match</literal> принимает на вход выражение, которое сравнивается
  с набором альтернатив. В отличие от инструкции <literal>switch</literal>,
  выражение сопоставления оценивает значение в стиле, который больше похож на тернарный оператор.
  Выражение выполняет строгое сравнение <code>===</code>, а не слабую проверку на равенство <code>==</code>,
  как это делает инструкция <literal>switch</literal>.
  Выражения сопоставления доступны с PHP 8.0.0.
 </para>

 <example>
  <title>Структура выражения <literal>match</literal></title>
  <programlisting role="php">
<![CDATA[
<?php

$return_value = match (subject_expression) {
    single_conditional_expression => return_expression,
    conditional_expression1, conditional_expression2 => return_expression,
};

?>
]]>
  </programlisting>

  <example>
   <title>Базовый пример сопоставления значений в выражении <literal>match</literal></title>
   <programlisting role="php">
<![CDATA[
<?php

$food = 'cake';

$return_value = match ($food) {
    'apple' => 'На столе лежит яблоко',
    'banana' => 'На столе лежит банан',
    'cake' => 'На столе стоит торт',
};

var_dump($return_value);

?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
string(35) "На столе стоит торт"
]]>
   </screen>
  </example>

  <example>
   <title>Пример сопоставления значений в выражении <literal>match</literal> с операторами сравнения</title>
    <programlisting role="php">
<![CDATA[
<?php

$age = 18;

$output = match (true) {
    $age < 2 => "Младенец",
    $age < 13 => "Ребёнок",
    $age <= 19 => "Подросток",
    $age >= 40 => "Взрослый",
    $age > 19 => "Молодой человек",
};

var_dump($output);

?>
]]>
  </programlisting>
  &example.outputs;
   <screen>
<![CDATA[
string(8) "Подросток"
]]>
   </screen>
  </example>

  <note>
   <simpara>
    Результат выражения <literal>match</literal> использовать не обязательно.
   </simpara>
  </note>
  <note>
   <simpara>
    Выражение <literal>match</literal> <emphasis>должно</emphasis> завершаться
    точкой с запятой <literal>;</literal>, если записывается
    как отдельное выражение.
   </simpara>
  </note>
 </example>

 <para>
  Выражение <literal>match</literal> похоже на инструкцию
  <literal>switch</literal>, за исключением отдельных ключевых отличий:

  <itemizedlist>
   <listitem>
    <simpara>
     В отличие от нестрогого сравнения в инструкции switch,
     в ветке сопоставления значений в выражении <literal>match</literal>
     значения сравниваются строго — <code>===</code>
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     Выражение <literal>match</literal> возвращает значение
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     В выражении <literal>match</literal> выполнение кода не переходит к следующей
     ветви сопоставления значений после первого совпадения значений,
     в отличие от провалов к следующему случаю в инструкции <literal>switch</literal>
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     Выражение <literal>match</literal> должно быть исчерпывающим
    </simpara>
   </listitem>
  </itemizedlist>
 </para>

 <para>
  Как и инструкциях <literal>switch</literal>, в выражениях <literal>match</literal>
  ветви сопоставления значений выполняются одна за другой.
  В начале никакой код не выполняется. Условные выражения оцениваются, только если
  предыдущие условные выражения не соответствуют входному выражению.
  Выражение match вычислит только то выражение возврата, которое соответствует
  условному выражению, значение которого совпало.
  Приведём пример:
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php

$result = match ($x) {
    foo() => 'value',
    $this->bar() => ..., // Метод $this->bar() не вызывается, если значение возврата функции foo() === $x
    $this->baz => beep(), // Функция beep() выполнится, если только входное выражение $x === $this->baz
    // и т. д.
};

?>
]]>
   </programlisting>
  </informalexample>
 </para>

 <para>
  Ветвям сопоставления значений в выражении <literal>match</literal> разрешается содержать
  множественные выражения, разделённые запятыми.
  Множественные выражения проверяются по условию логического ИЛИ и представляют короткую запись
  для множественных ветвей сопоставления значений с одним и тем выражением в правой части.
 </para>
 <para>
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php

$result = match ($x) {
    // Эта ветвь сопоставления значений:
    $a, $b, $c => 5,
    // ...эквивалентна следующему набору из трёх ветвей сопоставления:
    $a => 5,
    $b => 5,
    $c => 5,
};

?>
]]>
   </programlisting>
  </informalexample>
 </para>
 <para>
  Выражение сопоставления управляет случаями по умолчанию через шаблон <literal>default</literal>.
  Управление переходит к шаблону по умолчанию при несовпадении значений в предыдущих ветвях сопоставления.
  Например:
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php

$expressionResult = match ($condition) {
    1, 2 => foo(),
    3, 4 => bar(),
    default => baz(),
};

?>
]]>
   </programlisting>
  </informalexample>
  <note>
   <simpara>
    Многократные шаблоны default вызовут ошибку уровня <constant>E_FATAL_ERROR</constant>.
   </simpara>
  </note>
 </para>

 <para>
  Выражение <literal>match</literal> должно быть исчерпывающим.
  Выражение выбрасывает исключение <classname>UnhandledMatchError</classname>,
  если входное выражение не обработала ни одна ветвь сопоставления.
 </para>

 <example>
  <title>Пример необработанного выражения match</title>
  <programlisting role="php">
<![CDATA[
<?php

$condition = 5;

try {
    match ($condition) {
        1, 2 => foo(),
        3, 4 => bar(),
    };
} catch (\UnhandledMatchError $e) {
    var_dump($e);
}

?>
]]>
  </programlisting>
  &example.outputs;
  <screen>
<![CDATA[
object(UnhandledMatchError)#1 (7) {
  ["message":protected]=>
  string(33) "Unhandled match value of type int"
  ["string":"Error":private]=>
  string(0) ""
  ["code":protected]=>
  int(0)
  ["file":protected]=>
  string(9) "/in/ICgGK"
  ["line":protected]=>
  int(6)
  ["trace":"Error":private]=>
  array(0) {
  }
  ["previous":"Error":private]=>
  NULL
}
]]>
  </screen>
 </example>

 <sect2>
  <title>Обработка проверок с нетождественными условиями в выражениях match</title>
  <para>
   Выражение <literal>match</literal> умеет обрабатывать случаи с нетождественными условиями.
   Для этого входное выражении указывают как значение <code>true</code>.
  </para>

  <example>
   <title>Пример обобщения выражения match для ветвления на основе целочисленных диапазонов</title>
   <programlisting role="php">
<![CDATA[
<?php

$age = 23;

$result = match (true) {
    $age >= 65 => 'пожилой',
    $age >= 25 => 'взрослый',
    $age >= 18 => 'совершеннолетний',
    default => 'ребёнок',
};

var_dump($result);

?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
string(11) "совершеннолетний"
]]>
   </screen>
  </example>

  <example>
   <title>Пример обобщения выражения match для выбора ветви вычисления на основе содержимого строки</title>
   <programlisting role="php">
<![CDATA[
<?php

$text = 'Bienvenue chez nous';

$result = match (true) {
    str_contains($text, 'Welcome') || str_contains($text, 'Hello') => 'en',
    str_contains($text, 'Bienvenue') || str_contains($text, 'Bonjour') => 'fr',
    // ...
};

var_dump($result);

?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
string(2) "fr"
]]>
   </screen>
  </example>
 </sect2>
</sect1>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
