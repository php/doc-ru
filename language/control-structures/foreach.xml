<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 53a400680d0cb2ddabd4493fb9846533c422e90d Maintainer: mch Status: ready -->
<!-- Reviewed: no -->
<!-- Revision: $ -->
<sect1 xml:id="control-structures.foreach" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>foreach</title>
 <?phpdoc print-version-for="foreach"?>
 <para>
  Языковой конструкцией <literal>foreach</literal> удобно перебирать
  массивы (<type>array</type>) и объекты, классы которых реализуют интерфейс <interfacename>Traversable</interfacename>.
  Конструкция <literal>foreach</literal> выдаст ошибку при попытке
  перебора переменной с другим типом данных или неинициализированной переменной.
  Разработчику доступны два вида синтаксиса:
  <informalexample>
   <simpara>
    Конструкция <literal>foreach</literal> умеет получать ключ каждого элемента, если требуется, и присваивать значение ключа переменной <literal>key</literal>:
   </simpara>
   <programlisting>
<![CDATA[
foreach (iterable_expression as $value) {
    statement_list
}

foreach (iterable_expression as $key => $value) {
    statement_list
}
]]>
   </programlisting>
  </informalexample>
 </para>
 <simpara>
  Первая форма обходит доступные для перебора данные, заданные
  выражением <literal>iterable_expression</literal>. На каждой итерации значение
  текущего элемента присваивается переменной <literal>$value</literal>.
 </simpara>
 <simpara>
  Вторая форма дополнительно будет присваивать ключ текущего элемента
  переменной <literal>$key</literal> на каждой итерации.
 </simpara>
 <simpara>
  Обратите внимание, что конструкция <literal>foreach</literal> не изменяет внутренний указатель
  массива, с которым, например, работают функции <function>current</function>
  и <function>key</function>.
 </simpara>
 <simpara>
  Разработчику доступна
  <link linkend="language.oop5.iterations">настройка итерации объектов</link>.
 </simpara>

 <example>
  <title>Базовая работа с конструкцией <literal>foreach</literal></title>
  <programlisting role="php">
<![CDATA[
<?php

/* Пример перебора только значений */
$array = [1, 2, 3, 17];

foreach ($array as $value) {
    echo "Значение текущего элемента массива \$array: $value.\n";
}

/* Пример перебора ключей и значений */
$array = [
    "one" => 1,
    "two" => 2,
    "three" => 3,
    "seventeen" => 17
];

foreach ($array as $key => $value) {
    echo "Ключ: $key => Значение: $value\n";
}

/* Пример итерации по ключам и значениям многомерного массива */
$grid = [];
$grid[0][0] = "a";
$grid[0][1] = "b";
$grid[1][0] = "y";
$grid[1][1] = "z";

foreach ($grid as $y => $row) {
    foreach ($row as $x => $value) {
        echo "Значение на позиции x=$x и y=$y: $value\n";
    }
}

/* Пример итерации по динамическому массиву */
foreach (range(1, 5) as $value) {
    echo "$value\n";
}

?>
]]>
  </programlisting>
 </example>
 <note>
  <para>
   Конструкция <literal>foreach</literal> не поддерживает
   подавление сообщений об ошибках оператором
   <link linkend="language.operators.errorcontrol"><literal>@</literal></link>.
  </para>
 </note>

 <sect2 xml:id="control-structures.foreach.list">
  <title>Распаковка вложенных массивов</title>
  <?phpdoc print-version-for="foreach.list"?>
  <para>
   В PHP доступна итерация по массиву массивов и распаковка вложенного массива
   в переменные цикла. Массив распаковывают либо путём
   <link linkend="language.types.array.syntax.destructuring">деструктуризации массива</link>
   через конструкцию <literal>[]</literal>, либо указывают языковую конструкцию <function>list</function>
   как значение цикла.

   <note>
    <simpara>
     <link linkend="language.types.array.syntax.destructuring">Деструктуризация массивов</link>
     через конструкцию <literal>[]</literal> возможна только с PHP 7.1.0
    </simpara>
   </note>
  </para>

  <para>
   <informalexample>
    <simpara>
     В обоих следующих примерах переменной <literal>$a</literal> присваивается
     первый элемент вложенного массива, а переменная <literal>$b</literal> получит
     второй элемент:
    </simpara>
    <programlisting role="php">
<![CDATA[
<?php

$array = [
    [1, 2],
    [3, 4],
];

foreach ($array as [$a, $b]) {
    echo "A: $a; B: $b\n";
}

foreach ($array as list($a, $b)) {
    echo "A: $a; B: $b\n";
}

?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
A: 1; B: 2
A: 3; B: 4
]]>
    </screen>
   </informalexample>
  </para>

  <para>
   Распаковка проигнорирует оставшиеся элементы,
   если в значении цикла указали меньшее переменных, чем элементов в массиве.
   Аналогично элементы пропускают, оставляя только запятую:
   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php

$array = [
    [1, 2, 3],
    [3, 4, 6],
];

foreach ($array as [$a, $b]) {
    // Обратите внимание, переменную $c не указали
    echo "$a $b\n";
}

foreach ($array as [, , $c]) {
    // Пропускаем переменные $a и $b
    echo "$c\n";
}

?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
1 2
3 4
5
6
]]>
    </screen>
   </informalexample>
  </para>

  <para>
   При недостаточном количестве элементов для заполнения переменных в конструкции <function>list</function>
   или конструкции с квадратными скобками генерируется уведомление:

   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php

$array = [
    [1, 2],
    [3, 4],
];

foreach ($array as [$a, $b, $c]) {
    echo "A: $a; B: $b; C: $c\n";
}

?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Notice: Undefined offset: 2 in example.php on line 7
A: 1; B: 2; C:

Notice: Undefined offset: 2 in example.php on line 7
A: 3; B: 4; C:
]]>
    </screen>
   </informalexample>
  </para>
 </sect2>

 <sect2 xml:id="control-structures.foreach.reference">
  <title>Конструкция foreach и ссылки</title>
  <para>
   Элементы массива возможно напрямую модифицировать внутри цикла путём указания
   перед значением <literal>$value</literal> знака <literal>&amp;</literal>,
   тогда значение присваивается
   <link linkend="language.references">по ссылке</link>.
   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php

$arr = [1, 2, 3, 4];
foreach ($arr as &$value) {
    $value = $value * 2;
}
// Массив $arr теперь содержит значения [2, 4, 6, 8]
unset($value); // Разрываем ссылочную связь с последним элементом

?>
]]>
    </programlisting>
   </informalexample>
  </para>
  <warning>
   <simpara>
    Ссылка на значение <literal>$value</literal> последнего элемента массива
    сохраняется даже после завершения цикла <literal>foreach</literal>. Поэтому рекомендуют
    уничтожать ссылку конструкцией <function>unset</function>,
    иначе возникнет следующее поведение:
   </simpara>
   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php

$arr = [1, 2, 3, 4];
foreach ($arr as &$value) {
    $value = $value * 2;
}
// Массив $arr теперь содержит значения [2, 4, 6, 8]

// Без уничтожения ссылки конструкцией unset($value) переменная $value по-прежнему ссылается на последний элемент: $arr[3]

foreach ($arr as $key => $value) {
    // Элемент $arr[3] обновляется с каждым значением массива $arr...
    echo "{$key} => {$value} ";
    print_r($arr);
}
// ...пока предпоследнее значение не скопируется в последнее

?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
0 => 2 Array ( [0] => 2, [1] => 4, [2] => 6, [3] => 2 )
1 => 4 Array ( [0] => 2, [1] => 4, [2] => 6, [3] => 4 )
2 => 6 Array ( [0] => 2, [1] => 4, [2] => 6, [3] => 6 )
3 => 6 Array ( [0] => 2, [1] => 4, [2] => 6, [3] => 6 )
]]>
    </screen>
   </informalexample>
  </warning>
  <example>
  <title>Итерация по значениям константного массива по ссылке</title>
   <programlisting role="php">
<![CDATA[
<?php

foreach ([1, 2, 3, 4] as &$value) {
    $value = $value * 2;
}

?>
]]>
   </programlisting>
  </example>
 </sect2>

 <sect2 role="seealso">
  &reftitle.seealso;
  <simplelist>
   <member><link linkend="language.types.array">array</link></member>
   <member><interfacename>Traversable</interfacename></member>
   <member><link linkend="language.types.iterable">iterable</link></member>
   <member><function>list</function></member>
  </simplelist>
 </sect2>

</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
