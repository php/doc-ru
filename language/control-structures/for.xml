<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 7104ee97ced1768a3231588dfc0bc0d7eb1117ad Maintainer: mch Status: ready -->
<!-- Reviewed: yes Maintainer: lex -->
<sect1 xml:id="control-structures.for" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>for</title>
 <?phpdoc print-version-for="for"?>
 <para>
  Цикл <literal>for</literal> самый сложный цикл в PHP.
Он ведёт себя так же, как и в языке C. Синтаксис цикла
  <literal>for</literal> следующий:
  <informalexample>
   <programlisting>
<![CDATA[
for (expr1; expr2; expr3)
    statement
]]>
   </programlisting>
  </informalexample>
 </para>
 <simpara>
  Первое выражение (<varname>expr1</varname>)
  всегда вычисляется (выполняется) только один раз в начале
  цикла.
 </simpara>
 <simpara>
  В начале каждой итерации оценивается выражение
  <varname>expr2</varname>. Если оно принимает значение
  &true;, то цикл продолжается и выполняются вложенные операторы.
  Если оно принимает значение &false;, выполнение цикла заканчивается.
 </simpara>
 <simpara>
  В конце каждой итерации выражение <varname>expr3</varname>
  вычисляется (выполняется).
 </simpara>
 <simpara>
  Каждое из выражений может быть пустым или содержать несколько
  выражений, разделённых запятыми. В <varname>expr2</varname> все
  выражения, разделённые запятыми, вычисляются, но результат берётся из
  последнего.
  Если выражение <varname>expr2</varname> отсутствует, это означает, что цикл
  будет выполняться бесконечно. (PHP неявно воспринимает это значение как
  &true;, так же, как в языке C). Это может быть не так бесполезно, как вы
  могли подумать, так как часто необходимо прервать цикл, используя
  условный оператор <link
  linkend="control-structures.break"><literal>break</literal></link>
  вместо использования выражения в цикле <literal>for</literal>,
  которое принимает истинное значение.
 </simpara>
 <para>
  Рассмотрим следующие примеры. Все они отображают числа
  от 1 до 10:
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
/* пример 1 */

for ($i = 1; $i <= 10; $i++) {
    echo $i;
}

/* пример 2 */

for ($i = 1; ; $i++) {
    if ($i > 10) {
        break;
    }
    echo $i;
}

/* пример 3 */

$i = 1;
for (; ; ) {
    if ($i > 10) {
        break;
    }
    echo $i;
    $i++;
}

/* пример 4 */

for ($i = 1, $j = 0; $i <= 10; $j += $i, print $i, $i++);
?>
]]>
   </programlisting>
  </informalexample>
 </para>
 <simpara>
  Конечно, первый пример кажется самым хорошим (или, возможно,
  четвёртый), но вы можете обнаружить, что возможность использовать пустые
  выражения в циклах <literal>for</literal> может стать удобной во многих
  случаях.
 </simpara>
 <para>
  PHP также поддерживает альтернативный синтаксис с двоеточием для циклов
  <literal>for</literal>.
  <informalexample>
   <programlisting>
<![CDATA[
for (expr1; expr2; expr3):
    statement
    ...
endfor;
]]>
   </programlisting>
  </informalexample>
 </para>
 <simpara>
  Перебор массивов как показано ниже - это обычное дело для
  многих пользователей.
 </simpara>
 <para>
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
/*
 * Это массив с некоторыми данными, которые мы хотим изменить
 * при работе цикла.
 */
$people = array(
    array('name' => 'Kalle', 'salt' => 856412),
    array('name' => 'Pierre', 'salt' => 215863)
);

for($i = 0; $i < count($people); ++$i) {
    $people[$i]['salt'] = mt_rand(000000, 999999);
}
?>
]]>
   </programlisting>
  </informalexample>
 </para>
 <simpara>
  Вышеприведённый код может работать медленно, так как размер массива вычисляется
  в каждой итерации. Поскольку размер не меняется, цикл может быть легко оптимизирован
  с помощью промежуточной переменной, в которую будет записан размер массива, вместо
  повторяющихся вызовов функции <function>count</function>:
 </simpara>
 <para>
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
$people = array(
    array('name' => 'Kalle', 'salt' => 856412),
    array('name' => 'Pierre', 'salt' => 215863)
);

for($i = 0, $size = count($people); $i < $size; ++$i) {
    $people[$i]['salt'] = mt_rand(000000, 999999);
}
?>
]]>
   </programlisting>
  </informalexample>
 </para>
</sect1>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
