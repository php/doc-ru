<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: ffbe6525350c91d58e1d5b7a52c46c911035c8e0 Maintainer: mch Status: ready -->
<!-- Reviewed: yes -->
<sect1 xml:id="function.include" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>include</title>
 <?phpdoc print-version-for="include"?>
 <simpara>
  Выражение <literal>include</literal> включает и выполняет
  указанный файл.
 </simpara>
 <simpara>
  Документация ниже также относится к выражению <function>require</function>.
 </simpara>
 <simpara>
  Файлы включаются исходя из пути указанного файла, или, если путь не указан,
  используется путь, указанный в директиве <link linkend="ini.include-path">include_path</link>. Если файл
  не найден в <link linkend="ini.include-path">include_path</link>,
  <literal>include</literal> попытается проверить директорию, в которой находится текущий включающий скрипт
  и текущую рабочую директорию перед тем, как выдать ошибку. Конструкция
  <literal>include</literal> выдаст <constant>E_WARNING</constant>, если
  не сможет найти файл; поведение отлично от <function>require</function>, который выдаст
  <constant>E_ERROR</constant>.
 </simpara>
 <simpara>
  Обратите внимание, что и <literal>include</literal> и <literal>require</literal>
  выдают дополнительную ошибку уровня <constant>E_WARNING</constant>, если к файлу невозможно
  получить доступ, перед тем, как выдать последнюю ошибку уровня
  <constant>E_WARNING</constant> или <constant>E_ERROR</constant> соответственно.
 </simpara>
 <simpara>
  Если путь указан — абсолютный (начинающийся с буквы диска или с
  <literal>\</literal> в Windows или с <literal>/</literal> в Unix/Linux
  системах) или относительно текущей директории (начинающийся с
  <literal>.</literal> или <literal>..</literal>) —
  <link linkend="ini.include-path">include_path</link> будет проигнорирован вообще.
  Например, если имя файла начинается с <literal>../</literal>,
  парсер будет искать в родительской директории запрошенный файл.
 </simpara>
 <simpara>
  Для дополнительной информации о том, как PHP обрабатывает включаемые файлы и включаемые пути,
  смотрите документацию для директивы <link linkend="ini.include-path">include_path</link>.
 </simpara>
 <simpara>
  Когда файл включается, его код наследует ту же
  <link linkend="language.variables.scope">область видимости переменных</link>, что
  и строка, на которой произошло включение.  Все переменные, доступные на этой строке
  во включающем файле, будут также доступны во включаемом файле.
  Однако все функции и классы, объявленные во включаемом файле, имеют
  глобальную область видимости.
 </simpara>
 <para>
  <example>
   <title>Простой пример <literal>include</literal></title>
   <programlisting role="php">
<![CDATA[
vars.php
<?php

$color = 'зелёное';
$fruit = 'яблоко';

?>

test.php
<?php

echo "Одно $color $fruit"; // Одно

include 'vars.php';

echo "Одно $color $fruit"; // Одно зелёное яблоко

?>
]]>
   </programlisting>
  </example>
 </para>
 <simpara>
  Если включение происходит внутри функции включающего файла,
  тогда весь код, содержащийся во включаемом файле, будет вести себя так,
  как будто он был определён внутри этой функции.  То есть, он будет в той же области видимости
  переменных этой функции.
  Исключением к этому правилу являются <link
  linkend="language.constants.predefined">магические константы</link>, которые
  выполняются парсером перед тем, как происходит включение.
 </simpara>
 <para>
  <example>
   <title>Включение внутри функции</title>
   <programlisting role="php">
<![CDATA[
<?php

function foo()
{
    global $color;

    include 'vars.php';

    echo "Одно $color $fruit";
}

/* vars.php в той же области видимости, что и foo(),  *
* поэтому $fruit НЕ будет доступен за пределами этой области     *
* $color доступен, поскольку мы объявили переменную глобальной */

foo();                    // Одно зелёное яблоко
echo "Одно $color $fruit";   // Одно зелёное

?>
]]>
   </programlisting>
  </example>
 </para>
 <simpara>
  Когда файл включается, парсинг в режиме PHP-кода прекращается и переключается
  в режим HTML в начале указанного файла и продолжается
  снова в конце.  По этой причине любой код внутри включаемого файла,
  который должен быть выполнен как код PHP, должен быть заключён в
  <link linkend="language.basic-syntax.phpmode">корректные теги начала и конца PHP-кода</link>.
 </simpara>
 <simpara>
  Если "<link linkend="ini.allow-url-include">обёртки URL include</link>"
  включены в PHP, вы можете также указать файл для включения через URL (с помощью HTTP или
  других поддерживающихся обработчиков - смотрите <xref linkend="wrappers"/> для списка
  протоколов) вместо локального пути.  Если целевой сервер интерпретирует
  указанный файл как код PHP, переменные могут быть переданы во включаемый файл
  с помощью строки URL-запроса при использовании HTTP GET. Это совсем не то же самое,
  что включение файла и наследование родительской области видимости; скрипт
  выполняется на удалённом сервере, и результат затем
  включается в локальный скрипт.
 </simpara>
 <para>
  <example>
   <title>Пример <literal>include</literal> через HTTP</title>
   <programlisting role="php">
<![CDATA[
<?php

/* В этом примере предполагается, что www.example.com настроен на обработку .php
* файлов, но не .txt. Также, 'Сработает' обозначает, что переменные
* $foo и $bar доступны внутри включаемого файла. */

// Не сработает; file.txt не обрабатывается www.example.com как PHP
include 'http://www.example.com/file.txt?foo=1&bar=2';

// Не сработает; будет искать файл 'file.php?foo=1&bar=2' в
// локальной файловой системе.
include 'file.php?foo=1&bar=2';

// Сработает.
include 'http://www.example.com/file.php?foo=1&bar=2';
?>
]]>
   </programlisting>
  </example>
 </para>
 <warning>
  <title>Предупреждение безопасности</title>
  <para>
   Удалённые файлы могут быть обработаны на удалённой стороне (в зависимости от
   расширения файла и того, что удалённый сервер выполняет скрипты PHP или нет), но это всё равно
   должно производить корректный скрипт PHP, потому что он будет затем обработан уже на
   локальном сервере. Если файл с удалённого сервера должен быть обработан
   и только отображён его результат, гораздо эффективно воспользоваться функцией <function>readfile</function>
   В противном случае следует соблюдать особую осторожность, чтобы обезопасить
   удалённый скрипт для получения корректного и желаемого кода.
  </para>
 </warning>
 <para>
  Смотрите также раздел <link linkend="features.remote-files">Удалённые файлы</link>, функции
  <function>fopen</function> и <function>file</function> для дополнительной
  информации.
 </para>
 <simpara>
  Обработка возвращаемых значений: оператор <literal>include</literal> возвращает
  значение <literal>FALSE</literal> в случае возникновения ошибки и выдаёт предупреждение. Успешные
  включения, пока это не переопределено во включаемом файле, возвращают значение
  <literal>1</literal>. Возможно выполнить выражение <function>return</function>
  внутри включаемого файла, чтобы завершить процесс выполнения в
  этом файле и вернуться к выполнению включающего файла. Кроме того, возможно вернуть
  значение из включаемых файлов. Вы можете получить значение включения, как
  если бы вы вызвали обычную функцию. Хотя это невозможно при включении
  удалённого файла, только если вывод удалённого файла не содержит
  <link linkend= "language.basic-syntax.phpmode">корректные теги начала и конца PHP
  кода</link> (так же, как и локальный файл). Вы можете определить необходимые
  переменные внутри этих тегов и они будут представлены в зависимости от того,
  какой файл был выключен.
 </simpara>
 <para>
  Так как <literal>include</literal> - это специальная языковая конструкция,
  круглые скобки не обязательны вокруг аргумента. Будьте внимательны при сравнении
  возвращаемого значения.
  <example>
   <title>Сравнение возвращаемого значения при include</title>
   <programlisting role="php">
<![CDATA[
<?php
// не сработает, интерпретируется как include(('vars.php') == TRUE), то есть include('1')
if (include('vars.php') == TRUE) {
    echo 'OK';
}

// сработает
if ((include 'vars.php') == TRUE) {
    echo 'OK';
}
?>
]]>
   </programlisting>
  </example>
 </para>
 <para>
  <example>
   <title>Выражения <literal>include</literal> и <function>return</function></title>
   <programlisting role="php">
<![CDATA[
return.php
<?php

$var = 'PHP';

return $var;

?>

noreturn.php
<?php

$var = 'PHP';

?>

testreturns.php
<?php

$foo = include 'return.php';

echo $foo; // выведет 'PHP'

$bar = include 'noreturn.php';

echo $bar; // выведет 1

?>
]]>
   </programlisting>
  </example>
 </para>
 <simpara>
  <literal>$bar</literal> имеет значение <literal>1</literal>, т.к. включение файла произошло
  успешно.  Заметьте разницу между примерами сверху. Первый использует
  <function>return</function> внутри включаемого файла, тогда как второй не использует.
  Если файл не может быть включён, возвращается &false; и возникает
  <constant>E_WARNING</constant>.
 </simpara>
 <para>
  Если во включаемом файле определены функции, они могут быть использованы в
  главном файле вне зависимости от того, были ли они объявлены до <function>return</function> или после.
  Если файл включается дважды, PHP выдаст фатальную ошибку, потому что функции
  уже были определены.
  Рекомендуется использовать <function>include_once</function> вместо того, чтобы
  проверять был ли файл уже включён.
 </para>
 <simpara>
  Другой путь "включить" PHP-файл в переменную - это захватить
  вывод с помощью <link linkend="ref.outcontrol">функций контроля вывода</link>
  вместе с <literal>include</literal>. Например:
 </simpara>
 <para>
  <example>
   <title>Использование буферизации вывода для включения файла PHP в строку</title>
   <programlisting role="php">
<![CDATA[
<?php
$string = get_include_contents('somefile.php');

function get_include_contents($filename) {
    if (is_file($filename)) {
        ob_start();
        include $filename;
        return ob_get_clean();
    }
    return false;
}

?>
]]>
   </programlisting>
  </example>
 </para>
 <para>
  Для того, чтобы включать файлы автоматически в скрипты, обратите внимание на конфигурационные директивы
  <link linkend="ini.auto-prepend-file">auto_prepend_file</link> и
  <link linkend="ini.auto-append-file">auto_append_file</link>
  в &php.ini;.
 </para>

 &note.language-construct;

 <simpara>
  Смотрите также <function>require</function>, <function>require_once</function>,
  <function>include_once</function>, <function>get_included_files</function>,
  <function>readfile</function>, <function>virtual</function> и
  <link linkend="ini.include-path">include_path</link>.
 </simpara>
</sect1><!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
