<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: c1f37a6c270aadbbb3da56a3973ffd62197adf2b Maintainer: mch Status: ready -->
<!-- Reviewed: no -->
<sect1 xml:id="language.oop5.traits" xmlns="http://docbook.org/ns/docbook">
 <title>Трейты</title>
 <para>
  Способ, которым в языке PHP один и тот же код внедряют в несвязанные иерархии классов,
  называется трейтами (англ. Traits).
 </para>
 <para>
  Трейты — механизм, который разрешает повторно использовать код в языках
  с одиночным наследованием наподобие PHP. Задача трейта —
  уменьшить ограничения одиночного наследования, разрешая разработчику легко
  переиспользовать наборы методов в нескольких независимых классах,
  которые находятся в разных иерархиях наследования. Семантику комбинации трейтов
  и классов определили так, чтобы снизить уровень сложности и избежать
  типичных проблем, свойственных множественному наследованию и примесям (англ. Mixins).
 </para>
 <para>
  Трейт похож на класс, но предназначается только для группировки функциональности
  тонко контролируемым и согласованным образом. Нельзя создать отдельный экземпляр трейта.
  Трейт дополняет традиционное наследование и разрешает выстраивать
  горизонтальную композицию поведения; другими словами, трейт играет роль приложения к членам класса,
  которое не требует наследования.
 </para>

 <example xml:id="language.oop5.traits.basicexample">
  <title>Пример трейта</title>
  <programlisting role="php">
<![CDATA[
<?php

trait TraitA {
    public function sayHello()
    {
        echo 'Hello';
    }
}

trait TraitB {
    public function sayWorld()
    {
        echo 'World';
    }
}

class MyHelloWorld
{
    use TraitA, TraitB; // Класс разрешает внедрять несколько трейтов

    public function sayHelloWorld()
    {
        $this->sayHello();
        echo ' ';

        $this->sayWorld();
        echo "!\n";
    }
}

$myHelloWorld = new MyHelloWorld();
$myHelloWorld->sayHelloWorld();

?>
]]>
  </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Hello World!
]]>
    </screen>
 </example>

 <sect2 xml:id="language.oop5.traits.precedence">
  <title>Приоритет</title>
  <para>
   Член, который класс унаследовал из базового класса, переопределяется членом, который внедрился трейтом.
   Порядок приоритета выстраивается так, что методы трейта переопределяются методами текущего класса,
   а методы, которые класс унаследовал из базового класса, переопределяются методами трейта.
  </para>
  <example xml:id="language.oop5.traits.precedence.examples.ex1">
   <title>Пример того, в каком порядке выстраивается приоритет</title>
   <para>
    Метод, который класс унаследовал из базового класса, переопределяется методом, который внедрился
    в класс MyHelloWorld из трейта SayWorld. Методы трейта ведут себя как методы
    класса MyHelloWorld. Порядок приоритета такой: методами текущего класса
    переопределяются методы трейта, которыми переопределяются методы
    базового класса.
   </para>
   <programlisting role="php">
<![CDATA[
<?php

class Base
{
    public function sayHello()
    {
        echo 'Hello ';
    }
}

trait SayWorld
{
    public function sayHello()
    {
        parent::sayHello();
        echo 'World!';
    }
}

class MyHelloWorld extends Base
{
    use SayWorld;
}

$o = new MyHelloWorld();
$o->sayHello();

?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
Hello World!
]]>
   </screen>
  </example>
  <example xml:id="language.oop5.traits.precedence.examples.ex2">
   <title>Пример альтернативного порядка приоритета</title>
   <programlisting role="php">
<![CDATA[
<?php

trait HelloWorld
{
    public function sayHello()
    {
        echo 'Hello World!';
    }
}

class TheWorldIsNotEnough
{
    use HelloWorld;

    public function sayHello()
    {
        echo 'Hello Universe!';
    }
}

$o = new TheWorldIsNotEnough();
$o->sayHello();

?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
Hello Universe!
]]>
   </screen>
  </example>
 </sect2>

 <sect2 xml:id="language.oop5.traits.multiple">
  <title>Несколько трейтов</title>
  <para>
   Названия трейтов перечисляют через запятую в инструкции <literal>use</literal>,
   чтобы добавить в класс несколько трейтов.
  </para>
  <example xml:id="language.oop5.traits.multiple.ex1">
   <title>Пример внедрения нескольких трейтов</title>
   <programlisting role="php">
<![CDATA[
<?php

trait Hello
{
    public function sayHello()
    {
        echo 'Hello ';
    }
}

trait World
{
    public function sayWorld()
    {
        echo 'World';
    }
}

class MyHelloWorld
{
    use Hello, World;

    public function sayExclamationMark()
    {
        echo '!';
    }
}

$o = new MyHelloWorld();
$o->sayHello();
$o->sayWorld();
$o->sayExclamationMark();

?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
Hello World!
]]>
   </screen>
  </example>
 </sect2>

 <sect2 xml:id="language.oop5.traits.conflict">
  <title>Разрешение конфликтов</title>
  <para>
   При добавлении двумя трейтами метода с одним и тем же названием возникает фатальная
   ошибка, если конфликт явно не разрешили.
  </para>
  <para>
   Оператор <literal>insteadof</literal> разрешает конфликты имён и указывает,
   метод какого трейта исключить из класса, когда название метода одного трейта совпадает
   с названием метода другого трейта, который включили в этот же класс.
  </para>
  <para>
   Для добавления псевдонима методу трейта указывают оператор <literal>as</literal>,
   поскольку предыдущий оператор только исключает методы.
   Обратите внимание, оператор <literal>as</literal>
   не переименовывает метод и не влияет ни на какие другие методы.
  </para>
  <example xml:id="language.oop5.traits.conflict.ex1">
   <title>Пример разрешения конфликтов</title>
   <para>
    В этом примере в класс Talker включили трейты A и B.
    Поскольку в трейтах A и B содержатся методы, которые вступают в конфликт,
    класс использует вариант метода smallTalk из трейта B, а вариант метода bigTalk из трейта A.
   </para>
   <para>
    Оператор <literal>as</literal> в классе Aliased_Talker
    разрешает вызывать метод bigTalk трейта B
    по псевдониму <literal>talk</literal>.
   </para>
   <programlisting role="php" annotations="non-interactive">
<![CDATA[
<?php

trait A
{
    public function smallTalk()
    {
        echo 'a';
    }

    public function bigTalk()
    {
        echo 'A';
    }
}

trait B
{
    public function smallTalk()
    {
        echo 'b';
    }

    public function bigTalk()
    {
        echo 'B';
    }
}

class Talker
{
    use A, B {
        B::smallTalk insteadof A;
        A::bigTalk insteadof B;
    }
}

class Aliased_Talker
{
    use A, B {
        B::smallTalk insteadof A;
        A::bigTalk insteadof B;
        B::bigTalk as talk;
    }
}

?>
]]>
   </programlisting>
  </example>
 </sect2>

 <sect2 xml:id="language.oop5.traits.visibility">
  <title>Изменение видимости метода</title>
  <para>
   Синтаксис с оператором <literal>as</literal> умеет также настраивать
   видимость метода в классе.
  </para>
  <example xml:id="language.oop5.traits.visibility.ex1">
   <title>Пример изменения видимости метода</title>
   <programlisting role="php" annotations="non-interactive">
<![CDATA[
<?php

trait HelloWorld
{
    public function sayHello()
    {
        echo 'Привет, мир!';
    }
}

// Изменим видимость метода sayHello
class MyClass1
{
    use HelloWorld {
        sayHello as protected;
    }
}

// Создадим псевдоним метода и изменим видимость этого метода.
// Видимость метода sayHello не изменилась
class MyClass2
{
    use HelloWorld {
        sayHello as private myPrivateHello;
    }
}

?>
]]>
   </programlisting>
  </example>
 </sect2>

 <sect2 xml:id="language.oop5.traits.composition">
  <title>Импорт трейтов в трейты</title>
  <para>
   Трейты внедряют не только в классы, но и в другие трейты.
   Трейт возможно скомпоновать из других трейтов путём импорта необходимых трейтов в определении целевого.
   Члены импортированных трейтов становятся частью целевого.
  </para>
  <example xml:id="language.oop5.traits.composition.ex1">
   <title>Пример трейтов, которые состоят из трейтов</title>
   <programlisting role="php">
<![CDATA[
<?php

trait Hello
{
    public function sayHello()
    {
        echo 'Hello ';
    }
}

trait World
{
    public function sayWorld()
    {
        echo 'World!';
    }
}

trait HelloWorld
{
    use Hello, World;
}

class MyHelloWorld
{
    use HelloWorld;
}

$o = new MyHelloWorld();
$o->sayHello();
$o->sayWorld();

?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
Hello World!
]]>
   </screen>
  </example>
 </sect2>

 <sect2 xml:id="language.oop5.traits.abstract">
  <title>Абстрактные члены трейтов</title>
  <para>
   Трейты поддерживают абстрактные методы, чтобы установить требования
   к классу, в который внедрится трейт.
   Поддерживаются общедоступные, защищённые и закрытые методы.
   До PHP 8.0.0 поддерживались только общедоступные и защищённые абстрактные методы.
  </para>
  <caution>
   <simpara>
    Начиная с PHP 8.0.0 выдаётся фатальная ошибка, если сигнатура конкретного метода
    не следует <link linkend="language.oop.lsp">правилам совместимости сигнатур</link>.
    Раньше при несовпадении сигнатуры метода ошибка не выдавалась.
   </simpara>
  </caution>
  <example xml:id="language.oop5.traits.abstract.ex1">
   <title>Пример установки требований к классу через абстрактный метод трейта</title>
   <programlisting role="php">
<![CDATA[
<?php

trait Hello
{
    public function sayHelloWorld()
    {
        echo 'Hello' . $this->getWorld();
    }

    abstract public function getWorld();
}

class MyHelloWorld
{
    private $world;

    use Hello;

    public function getWorld()
    {
        return $this->world;
    }

    public function setWorld($val)
    {
        $this->world = $val;
    }
}

?>
]]>
   </programlisting>
  </example>
 </sect2>

 <sect2 xml:id="language.oop5.traits.static">
  <title>Статические члены трейта</title>
  <para>
   В трейтах разрешается определять статические переменные, статические методы и статические свойства.
  </para>
  <note>
   <para>
    Начиная с PHP 8.1.0 прямой вызов статического метода
    или прямой доступ к статическому свойству в трейте устарели.
    Доступ к статическим методам и свойствам получают только в классе, в который внедрили трейт.
   </para>
  </note>
  <example xml:id="language.oop5.traits.static.ex1">
   <title>Статические переменные</title>
   <programlisting role="php">
<![CDATA[
<?php

trait Counter
{
    public function inc()
    {
        static $c = 0;
        $c = $c + 1;
        echo "$c\n";
    }
}

class C1
{
    use Counter;
}

class C2
{
    use Counter;
}

$o = new C1();
$o->inc();

$p = new C2();
$p->inc();

?>
]]>
   </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
1
1
]]>
    </screen>
  </example>
  <example xml:id="language.oop5.traits.static.ex2">
   <title>Статические методы</title>
   <programlisting role="php">
<![CDATA[
<?php

trait StaticExample
{
    public static function doSomething()
    {
        return 'Делаем что-нибудь';
    }
}

class Example
{
    use StaticExample;
}

echo Example::doSomething();

?>
]]>
   </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Doing something
]]>
    </screen>
  </example>
  <example xml:id="language.oop5.traits.static.ex3">
   <title>Статические свойства</title>
    <caution>
     <simpara>
      До PHP 8.3.0 дочерние классы наследовали статические свойства, которые родительские классы
      получали из трейта, даже если трейт явно внедрялся в дочерний класс.
      Начиная с PHP 8.3.0 статическое свойство трейта переопределяет в дочернем классе статическое свойство,
      которое дочерний класс унаследовал из родительского.
     </simpara>
    </caution>
   <programlisting role="php">
<![CDATA[
<?php

trait T
{
    public static $counter = 1;
}

class A
{
    use T;

    public static function incrementCounter()
    {
        static::$counter++;
    }
}

class B extends A
{
    use T;
}

A::incrementCounter();

echo A::$counter, "\n";
echo B::$counter, "\n";

?>
]]>
  </programlisting>
    &example.outputs.83;
    <screen>
<![CDATA[
2
1
]]>
    </screen>
 </example>
 </sect2>

 <sect2 xml:id="language.oop5.traits.properties">
  <title>Свойства</title>
  <para>
   В трейтах доступно определение свойств.
  </para>
  <example xml:id="language.oop5.traits.properties.example">
   <title>Пример определения свойств в трейте</title>
   <programlisting role="php">
<![CDATA[
<?php

trait PropertiesTrait
{
    public $x = 1;
}

class PropertiesExample
{
    use PropertiesTrait;
}

$example = new PropertiesExample();
$example->x;

?>
]]>
   </programlisting>
  </example>
  <para>
   В классе нельзя определять свойство с названием как у свойства трейта,
   если свойство класса несовместимо со свойством трейта по области видимости и типу,
   модификатору readonly и начальному значению, иначе PHP выдаёт фатальную ошибку.
  </para>
  <example xml:id="language.oop5.traits.properties.conflicts">
   <title>Разрешение конфликтов</title>
   <programlisting role="php">
<![CDATA[
<?php

trait PropertiesTrait
{
    public $same = true;
    public $different1 = false;
    public bool $different2;
    public bool $different3;
}

class PropertiesExample
{
    use PropertiesTrait;

    public $same = true;
    public $different1 = true; // Фатальная ошибка
    public string $different2; // Фатальная ошибка
    readonly protected bool $different3; // Фатальная ошибка
}

?>
]]>
   </programlisting>
  </example>
 </sect2>

 <sect2 xml:id="language.oop5.traits.constants">
  <title>&Constants;</title>
  <para>
   Начиная с версии PHP 8.2.0 в трейтах разрешили также определять константы.
  </para>
  <example xml:id="language.oop5.traits.constants.example">
   <title>Определение констант</title>
   <programlisting role="php">
<![CDATA[
<?php

trait ConstantsTrait
{
    public const FLAG_MUTABLE = 1;
    final public const FLAG_IMMUTABLE = 5;
}

class ConstantsExample
{
    use ConstantsTrait;
}

$example = new ConstantsExample;
echo $example::FLAG_MUTABLE;

?>
]]>
   </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
1
]]>
    </screen>
  </example>
  <para>
   В классе нельзя определять константу с названием как у константы трейта,
   если константа класса несовместима с константой трейта по области видимости,
   начальному значению и модификатору final, иначе PHP выдаёт фатальную ошибку.
  </para>
  <example xml:id="language.oop5.traits.constants.conflicts">
   <title>Разрешение конфликтов</title>
   <programlisting role="php">
<![CDATA[
<?php

trait ConstantsTrait
{
    public const FLAG_MUTABLE = 1;
    final public const FLAG_IMMUTABLE = 5;
}

class ConstantsExample
{
    use ConstantsTrait;

    public const FLAG_IMMUTABLE = 5; // Фатальная ошибка
}

?>
]]>
   </programlisting>
  </example>
 </sect2>

 <sect2 xml:id="language.oop5.traits.final-methods">
  <title>Окончательные методы</title>
  <simpara>
   Начиная с PHP 8.3.0 методы, которые импортировали из трейтов,
   разрешили делать окончательными через оператор <literal>as</literal>
   и модификатор <link linkend="language.oop5.final">final</link>.
   Определение метода трейта окончательным запрещает дочерним классам
   переопределять метод. Но самому классу, в который импортировали трейт
   и в котором сделали метод окончательным, по-прежнему доступно переопределение метода.
  </simpara>
  <example xml:id="language.oop5.traits.final-methods.example">
   <title>
    Определение метода окончательным
    путём добавления модификатора <literal>final</literal> при внедрении трейта
   </title>
   <programlisting role="php">
    <![CDATA[
<?php

trait CommonTrait
{
    public function method()
    {
        echo 'Привет';
    }
}

class FinalExampleA
{
    use CommonTrait {
        CommonTrait::method as final; // Начиная с PHP 8.3.0 модификатор final
                                      // запретит переопределять метод в дочерних классах
    }
}

class FinalExampleB extends FinalExampleA
{
    public function method() {}
}

?>
]]>
   </programlisting>
    &example.outputs.similar;
    <screen>
<![CDATA[
Fatal error: Cannot override final method FinalExampleA::method() in ...
]]>
    </screen>
  </example>
 </sect2>

</sect1>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
