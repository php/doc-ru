<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 7b50ce5861a2fcceaa05da7adb3d946a025ca72d Maintainer: shein Status: ready -->
<!-- Reviewed: no -->
<sect1 xml:id="language.oop5.decon" xmlns="http://docbook.org/ns/docbook">
 <title>Конструкторы и деструкторы</title>

 <sect2 xml:id="language.oop5.decon.constructor">
  <title>Конструктор</title>
  <methodsynopsis xml:id="object.construct">
   <type>void</type><methodname>__construct</methodname>
   <methodparam rep="repeat"><type>mixed</type><parameter>values</parameter><initializer>""</initializer></methodparam>
  </methodsynopsis>
  <para>
   PHP разрешает разработчикам объявлять для классов методы-конструкторы.
   Метод-конструктор будет вызван на каждом
   вновь созданном экземпляре класса. Поэтому объявление
   метода-конструктора удобно для инициализации того, что может потребоваться объекту
   в начале работы.
  </para>
  <note>
   <simpara>
    Конструкторы, которые определены в классах-родителях, не вызываются автоматически,
    если дочерний класс определяет свой конструктор.
    Чтобы запустить конструктор родительского класса,
    необходимо вызвать его внутри конструктора дочернего класса —
    <function>parent::__construct</function>.
    Если в дочернем классе не определён конструктор, то он будет унаследован
    от родительского класса как обычный метод (если родительский конструктор не был
    определён как приватный).
   </simpara>
  </note>
  <example>
   <title>Конструкторы при наследовании</title>
   <programlisting role="php">
<![CDATA[
<?php
class BaseClass {
   function __construct() {
       print "Конструктор класса BaseClass\n";
   }
}

class SubClass extends BaseClass {
   function __construct() {
       parent::__construct();
       print "Конструктор класса SubClass\n";
   }
}

class OtherSubClass extends BaseClass {
    // наследует конструктор BaseClass
}

// Конструктор класса BaseClass
$obj = new BaseClass();

// Конструктор класса BaseClass
// Конструктор класса SubClass
$obj = new SubClass();

// Конструктор класса BaseClass
$obj = new OtherSubClass();
?>
]]>
   </programlisting>
  </example>
  <para>
   В отличие от других методов, метод <link linkend="object.construct">__construct()</link>
   освобождается от обычных <link linkend="language.oop.lsp">правил совместимости сигнатуры</link> при наследовании.
  </para>
  <para>
   Конструкторы — это обычные методы, которые вызываются при
   инстанциировании объектов, которые их содержат, или объектов дочерних классов без конструктора.
   Поэтому в них может быть определено произвольное количество аргументов, которые можно объявить обязательными,
   типизированными, со значением по умолчанию. Аргументы конструктора
   указываются в круглых скобках после имени класса.
  </para>
  <example>
   <title>Объявление аргументов в конструкторах</title>
   <programlisting role="php">
<![CDATA[
<?php
class Point {
    protected int $x;
    protected int $y;

    public function __construct(int $x, int $y = 0) {
        $this->x = $x;
        $this->y = $y;
    }
}

// Передаём оба параметра.
$p1 = new Point(4, 5);
// Передаём только обязательные параметры. Для $y используется значение по умолчанию 0.
$p2 = new Point(4);
// Вызываем с именованными параметрами (начиная с PHP 8.0):
$p3 = new Point(y: 5, x: 4);
?>
]]>
   </programlisting>
  </example>
  <para>
   Если у класса нет конструктора, или его конструктор не содержит обязательных параметров, скобки
   после имени класса можно не писать.
  </para>
  <sect3>
   <title>Конструкторы в старом стиле</title>
   <para>
    До PHP 8.0.0 классы в глобальном пространстве имён будут интерпретировать названный именем класса метод
    как конструктор старого стиля. Этот синтаксис
    устарел и будет вызывать ошибку уровня <constant>E_DEPRECATED</constant>, но
    всё равно эти методы будут вызываться в качестве конструктора.
    Если в классе присутствуют и метод <link linkend="object.construct">__construct()</link>,
    и метод с именем класса, то в качестве конструктора будет вызван
    <link linkend="object.construct">__construct()</link>.
   </para>
   <para>
    Начиная с PHP 8.0.0 для классов внутри пространства имён и для всех классов метод, названный по имени класса, будет проигнорирован.
   </para>
   <para>В новом коде всегда используйте <link linkend="object.construct">__construct()</link>.
   </para>
  </sect3>
  <sect3 xml:id="language.oop5.decon.constructor.promotion">
   <title>Определение свойств объекта в конструкторе</title>
   <para>
    Начиная с PHP 8.0.0 через параметры конструктора можно устанавливать
    свойства объекта. Это распространённая практика — присваивать
    свойствам объекта значения только за счёт переданных в конструктор параметров.
    Определение свойств класса в конструкторе помогает значительно
    сократить количество шаблонного кода для такого случая. Пример выше можно будет
    переписать как показано ниже:
   </para>
   <example>
    <title>Использование определения свойств в конструкторе</title>
    <programlisting role="php">
<![CDATA[
<?php
class Point {
    public function __construct(protected int $x, protected int $y = 0) {
    }
}
]]>
    </programlisting>
   </example>
   <para>
    Если декларация аргумента конструктора включает модификатор, PHP интерпретирует
    его одновременно и как аргумент конструктора, и как свойство объекта, и автоматически
    установит свойству значение, переданное в конструктор. При этом, если не требуется
    дополнительной логики, тело конструктора можно оставить пустым. Код
    конструктора выполнится после того, как значения аргументов будут присвоены параметрам функции или свойствам класса.
   </para>
   <para>
    Не все передаваемые в конструктор аргументы обязаны быть продвинутыми (устанавливающими свойства объекта).
    Продвинутые и обычные аргументы можно указывать и сопоставлять в любом порядке.
    Продвинутые аргументы не влияют на код, исполняемый в конструкторе.
   </para>
   <note>
    <para>
     Указать <link linkend="language.oop5.visibility">модификатор области видимости</link> (<literal>public</literal>,
     <literal>protected</literal> или <literal>private</literal>) — это наиболее вероятный способ
     применить продвинутую установку свойств,
     но любой другой модификатор (например, <literal>readonly</literal>) даст такой же эффект.
    </para>
   </note>
   <note>
    <para>
     Нельзя указывать свойствам объекта тип <type>callable</type>. Это связано с неоднозначностью,
     которую они представляют для движка PHP. Поэтому и аргументам конструктора,
     которые устанавливают классу свойства, также нельзя указывать тип <type>callable</type>. Любые другие
     <link linkend="language.types.declarations">декларации типов</link> допустимы.
    </para>
   </note>
   <note>
    <para>
     Поскольку при разборе кода PHP трансформирует синтаксический сахар продвинутых свойств в обычное декларирование свойств конструктора
     с теми же модификаторами видимости и типом данных, которые указаны в продвинутом аргументе,
     а также присваивает значение продвинутого аргумента и параметру функции, и свойству класса,
     все без исключения ограничения на определение аргументов конструктора будут применены как к параметрам функции, так и к свойствам класса.
    </para>
   </note>
   <note>
    <para>
     <link linkend="language.attributes">Атрибуты</link>, установленные для аргумента в продвинутом конструкторе,
     будут реплицированы как на аргумент, так и на свойство класса.
     Значение по умолчанию для аргумента в продвинутом конструкторе распространяется только на аргумент, а не свойство.
    </para>
   </note>
  </sect3>

  <sect3 xml:id="language.oop5.decon.constructor.new">
   <title>New в инициализации класса</title>
   <para>
    С PHP 8.1.0 объекты можно присваивать в качестве значений параметров по умолчанию,
    статических переменных и глобальных констант, а также в аргументах атрибутов.
    Объекты также теперь можно передавать в функцию <function>define</function>.
   </para>
   <note>
    <para>
     При этом динамические или нестроковые имена классов или анонимных классов не разрешены.
     Использовать распаковку аргументов не разрешено.
     Неподдерживаемые выражения в качестве аргументов не разрешены.
    </para>
   </note>
   <example>
    <title>Пример использования new в инициализации класса</title>
    <programlisting role="php">
<![CDATA[
<?php
// Всё допустимо:
static $x = new Foo;
const C = new Foo;

function test($param = new Foo) {}

#[AnAttribute(new Foo)]
class Test {
    public function __construct(
        public $prop = new Foo,
    ) {}
}
// Всё недопустимо (ошибка во времени компиляции):
function test(
    $a = new (CLASS_NAME_CONSTANT)(), // динамическое имя класса
    $b = new class {}, // анонимный класс
    $c = new A(...[]), // распаковка аргументов
    $d = new B($abc), // неподдерживаемое постоянное выражение
) {}
?>
]]>
    </programlisting>
   </example>
  </sect3>

  <sect3 xml:id="language.oop5.decon.constructor.static">
   <title>Статические методы создания объекта</title>
   <para>
    PHP поддерживает только один конструктор для класса. Однако бывает так,
    что нужно создавать разные объекты для разных входных данных.
    Рекомендуемый способ — использовать статические методы как обёртки над конструктором.
   </para>
   <example>
    <title>Использование статических методов для создания объектов</title>
    <programlisting role="php">
<![CDATA[
<?php
class Product {

    private ?int $id;
    private ?string $name;

    private function __construct(?int $id = null, ?string $name = null) {
        $this->id = $id;
        $this->name = $name;
    }

    public static function fromBasicData(int $id, string $name): static {
        $new = new static($id, $name);
        return $new;
    }

    public static function fromJson(string $json): static {
        $data = json_decode($json);
        return new static($data['id'], $data['name']);
    }

    public static function fromXml(string $xml): static {
        // Пользовательская логика.
        $data = convert_xml_to_array($xml);
        $new = new static();
        $new->id = $data['id'];
        $new->name = $data['name'];
        return $new;
    }
}

$p1 = Product::fromBasicData(5, 'Widget');
$p2 = Product::fromJson($some_json_string);
$p3 = Product::fromXml($some_xml_string);
]]>
    </programlisting>
   </example>
   <para>
    Конструктор можно сделать скрытым или защищённым для предотвращения его прямого вызова.
    Тогда объект класса можно будет создать только вызовом статического
    метода. Поскольку это методы того же класса, они имеют доступ ко всем его скрытым
    методам, даже если они относятся к разным экземплярам класса. Скрытый конструктор
    опционален и может быть объявлен или не иметь смысла в разных ситуациях.
   </para>
   <para>
    В примере выше три публичных статических метода показывают разные способы
    создания экземпляра объекта.
   </para>
   <simplelist>
    <member><code>fromBasicData()</code> принимает явные параметры, создаёт экземпляр
     класса через конструктор и возвращает объект.</member>
    <member><code>fromJson()</code> принимает JSON-строку, производит над ней
     преобразования, извлекает необходимые для создания объекта данные и, так же как и
     предыдущий метод, вызывает конструктор и возвращает созданный объект.</member>
    <member><code>fromXml()</code> принимает XML-строку, извлекает нужные данные и, так
     как в конструкторе нет обязательных параметров, вызывает его без них. После этого, так
     как ему доступны скрытые свойства, он присваивает им значения напрямую. После чего
     возвращает готовый объект.</member>
   </simplelist>
   <para>
    Во всех трёх случаях ключевое слово <code>static</code> транслируется в имя класса,
    в котором этот код вызывается. В нашем случае — <code>Product</code>.
   </para>
  </sect3>
 </sect2>

 <sect2 xml:id="language.oop5.decon.destructor">
  <title>Деструкторы</title>
  <methodsynopsis xml:id="object.destruct">
   <type>void</type><methodname>__destruct</methodname>
   <void />
  </methodsynopsis>
  <para>
   PHP наследует концепцию деструктора, аналогичную другим объектно-ориентированным языкам, например, C++.
   Деструктор будет вызван при освобождении всех ссылок
   на объект или при завершении
   скрипта (порядок выполнения деструкторов не гарантируется).
  </para>
  <example>
   <title>Пример использования деструктора</title>
   <programlisting role="php">
<![CDATA[
<?php
class MyDestructableClass
{
   function __construct() {
       print "Конструктор\n";
   }

   function __destruct() {
       print "Уничтожается " . __CLASS__  . "\n";
   }
}

$obj = new MyDestructableClass();

]]>
   </programlisting>
  </example>
  <para>
   Как и конструкторы, деструкторы, объявленные
   в родительском классе, не будут вызываться автоматически.
   Чтобы запустить деструктор родительского класса,
   необходимо вызвать <function>parent::__destruct</function>
   в теле деструктора дочернего класса. Аналогично конструкторам, дочерний класс, в котором
   не определен деструктор, наследует его из родительского класса.
  </para>
  <para>
   Деструктор будет вызван даже если скрипт был остановлен
   функцией <function>exit</function>. Вызов функции <function>exit</function>
   в деструкторе предотвратит запуск всех остальных процедур завершения работы.
  </para>
  <note>
   <para>
    Деструкторы, вызываемые при завершении скрипта, вызываются после отправки
    HTTP-заголовков. На этапе завершения работы скрипта
    рабочая директория SAPI (например, в Apache) может измениться.
   </para>
  </note>
  <note>
   <para>
    Попытка выбросить исключение из деструктора (вызванного во время
    завершения работы скрипта) вызовет фатальную ошибку.
   </para>
  </note>
 </sect2>

</sect1>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
