<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 9f351a14a749721a74df1dc6ac9533cf796a652e Maintainer: shein Status: ready -->
<!-- Reviewed: no -->
<sect1 xml:id="language.oop5.decon" xmlns="http://docbook.org/ns/docbook">
 <title>Конструкторы и деструкторы</title>

 <sect2 xml:id="language.oop5.decon.constructor">
  <title>Конструктор</title>
  <methodsynopsis xml:id="object.construct">
   <type>void</type><methodname>__construct</methodname>
   <methodparam rep="repeat"><type>mixed</type><parameter>values</parameter><initializer>""</initializer></methodparam>
  </methodsynopsis>
  <para>
   PHP разрешает разработчикам объявлять для классов методы-конструкторы.
   Класс с методом-конструктором вызовет этот метод на каждом
   вновь созданном объекте класса. Поэтому объявление
   метода-конструктора удобно для инициализации того, что может потребоваться объекту
   в начале работы.
  </para>
  <note>
   <simpara>
    Класс не будет неявно вызывать конструкторы, которые определили в классах-родителях,
    если дочерний класс определяет свой конструктор.
    Внутри конструктора дочернего класса требуется вызвать
    <function>parent::__construct</function>, чтобы запустить конструктор родительского класса.
    Дочерний класс унаследует конструктор родительского класса как обычный метод,
    если в дочернем классе конструктор не определили и родительский конструктор не закрытый.
   </simpara>
  </note>
  <example>
   <title>Конструкторы при наследовании</title>
   <programlisting role="php">
<![CDATA[
<?php

class BaseClass
{
   function __construct()
   {
       print "Конструктор класса BaseClass\n";
   }
}

class SubClass extends BaseClass
{
   function __construct()
   {
       parent::__construct();
       print "Конструктор класса SubClass\n";
   }
}

class OtherSubClass extends BaseClass
{
    // Наследует конструктор класса BaseClass
}

// Конструктор класса BaseClass
$obj = new BaseClass();

// Конструктор класса BaseClass
// Конструктор класса SubClass
$obj = new SubClass();

// Конструктор класса BaseClass
$obj = new OtherSubClass();

?>
]]>
   </programlisting>
  </example>
  <para>
   В отличие от других методов, метод <link linkend="object.construct">__construct()</link>
   освобождается <link linkend="language.oop.lsp">от правил совместимости сигнатуры</link>
   при наследовании.
  </para>
  <para>
   Конструкторы — обыкновенные методы, которые вызываются при инстанциировании объектов,
   которые содержат эти конструкторы, или объектов дочерних классов без конструктора.
   Поэтому в конструкторах определяют произвольное количество аргументов,
   которые разрешено объявлять обязательными, типизированными, со значением по умолчанию.
   Аргументы конструктора указываются в круглых скобках после имени класса.
  </para>
  <example>
   <title>Объявление аргументов в конструкторах</title>
   <programlisting role="php">
<![CDATA[
<?php

class Point
{
    protected int $x;
    protected int $y;

    public function __construct(int $x, int $y = 0)
    {
        $this->x = $x;
        $this->y = $y;
    }
}

// Передаём оба параметра
$p1 = new Point(4, 5);

// Передаём только обязательные параметры. Переменная $y содержит значение по умолчанию 0
$p2 = new Point(4);

// Вызываем с именованными параметрами (начиная с PHP 8.0):
$p3 = new Point(y: 5, x: 4);

?>
]]>
   </programlisting>
  </example>
  <para>
   Скобки после имени класса необязательны, если у класса нет конструктора,
   или конструктор класса не содержит обязательных параметров.
  </para>
  <sect3>
   <title>Конструкторы в старом стиле</title>
   <para>
    До PHP 8.0.0 классы в глобальном пространстве имён будут
    интерпретировать названный именем класса метод как конструктор старого стиля.
    Этот синтаксис устарел и будет вызывать ошибку уровня <constant>E_DEPRECATED</constant>,
    но всё равно вызовет этот метод как конструктор.
    PHP вызовет как конструктор метод <link linkend="object.construct">__construct()</link>,
    если в классе определили и метод <link linkend="object.construct">__construct()</link>,
    и метод с именем класса.
   </para>
   <para>
    У метода, название которого совпадает с именем класса, нет особого значения
    в классах внутри пространства имён, а с PHP 8.0.0 — в любых классах.
   </para>
   <para>
    В новом коде определяют только метод <link linkend="object.construct">__construct()</link>.
   </para>
  </sect3>
  <sect3 xml:id="language.oop5.decon.constructor.promotion">
   <title>Продвижение свойств в конструкторе</title>
   <para>
    С PHP 8.0.0 параметры конструктора можно продвинуть
    до свойств объекта. Это распространённая практика — присваивать
    свойствам объекта значения только за счёт переданных в конструктор аргументов.
    Определение свойств класса в конструкторе значительно
    сокращает количество шаблонного кода для такого случая. Пример выше можно будет
    переписать вот так:
   </para>
   <example>
    <title>Продвижение параметров конструктора до свойств</title>
    <programlisting role="php">
<![CDATA[
<?php

class Point
{
    public function __construct(protected int $x, protected int $y = 0) {}
}

?>
]]>
    </programlisting>
   </example>
   <para>
    PHP интерпретирует аргумент одновременно и как параметр конструктора,
    и как свойство объекта, и устанавливает значение аргумента свойству,
    когда параметр конструктора содержит модификатор. Тогда тело конструктора
    оставляют пустым или добавляют другие инструкции. Конструктор выполнит
    дополнительные инструкции после присваивания значений аргументов
    свойствам.
   </para>
   <para>
    Не каждый аргумент обязан продвигать параметр конструктора
    до свойства объекта. Допустимо смешивать и сопоставлять продвигаемые
    и не продвигаемые параметры в произвольном порядке. Аргументы,
    которые продвигают параметры до свойств, не влияют на вызывающий конструктор код.
   </para>
   <note>
    <para>
     Указать <link linkend="language.oop5.visibility">модификатор области видимости</link> —
     <literal>public</literal>, <literal>protected</literal> или <literal>private</literal> —
     наиболее вероятный способ применить продвинутую установку свойств,
     но любой другой модификатор, например <literal>readonly</literal>, даст такой же эффект.
    </para>
   </note>
   <note>
    <para>
     Нельзя указывать свойствам объекта тип <type>callable</type>.
     Это связано с неоднозначностью, которую они представляют для движка PHP.
     Поэтому и для параметров конструктора, которые устанавливают классу свойства,
     также нельзя указывать тип <type>callable</type>. Любые другие
     <link linkend="language.types.declarations">декларации типов</link> допустимы.
    </para>
   </note>
   <note>
    <para>
     PHP применяет ограничения на именование параметров конструктора
     как к свойствам класса, так и к параметрам функции,
     поскольку при разборе кода PHP преобразовывает синтаксический сахар
     продвинутых свойств в декларирование свойств класса
     с теми же модификаторами видимости и типом данных, которые указали
     в продвинутом параметре, и присваивает значение
     аргумента и параметру функции, и свойству класса.
    </para>
   </note>
   <note>
    <para>
     <link linkend="language.attributes">Атрибуты</link>, которые установили
     для аргумента в продвинутом конструкторе, будут реплицированы как на аргумент,
     так и на свойство класса. Значение по умолчанию для аргумента в продвинутом
     конструкторе распространяется только на аргумент, а не свойство.
    </para>
   </note>
  </sect3>

  <sect3 xml:id="language.oop5.decon.constructor.new">
   <title>Ключевое слово new в инициализаторах</title>
   <para>
    В PHP 8.1.0 разрешили присваивать объекты как значения по умолчанию для параметров,
    как значения статических переменных и глобальных констант, а также как значения аргументов
    в атрибутах. Объекты также допустимо передавать в функцию <function>define</function>.
   </para>
   <note>
    <para>
     При этом динамические или нестроковые имена классов или анонимных классов
     не разрешены. Использовать распаковку аргументов не разрешено.
     Неподдерживаемые выражения как аргументы не разрешены.
    </para>
   </note>
   <example>
    <title>Пример ключевого слова new при инициализации класса</title>
    <programlisting role="php">
<![CDATA[
<?php

// Всё допустимо:
static $x = new Foo;
const C = new Foo;

function test($param = new Foo) {}

#[AnAttribute(new Foo)]
class Test
{
    public function __construct(
        public $prop = new Foo,
    ) {}
}

// Всё запрещено (ошибка времени компиляции):
function test(
    $a = new (CLASS_NAME_CONSTANT)(), // Динамическое имя класса
    $b = new class {}, // Анонимный класс
    $c = new A(...[]), // Распаковка аргументов
    $d = new B($abc), // Неподдерживаемое постоянное выражение
) {}

?>
]]>
    </programlisting>
   </example>
  </sect3>

  <sect3 xml:id="language.oop5.decon.constructor.static">
   <title>Статические методы, которые создают объект класса</title>
   <para>
    PHP поддерживает только один конструктор для класса. Однако бывает так,
    что нужно создавать разные объекты для разных входных данных.
    Рекомендуемый способ — использовать статические методы как обёртки над конструктором.
   </para>
   <example>
    <title>Использование статических методов для создания объектов</title>
    <programlisting role="php">
<![CDATA[
<?php

class Product
{
    private ?int $id;
    private ?string $name;

    private function __construct(?int $id = null, ?string $name = null)
    {
        $this->id = $id;
        $this->name = $name;
    }

    public static function fromBasicData(int $id, string $name): static
    {
        $new = new static($id, $name);
        return $new;
    }

    public static function fromJson(string $json): static
    {
        $data = json_decode($json, true);
        return new static($data['id'], $data['name']);
    }

    public static function fromXml(string $xml): static
    {
        // Пользовательская логика
        $data = convert_xml_to_array($xml);
        $new = new static();
        $new->id = $data['id'];
        $new->name = $data['name'];
        return $new;
    }
}

$p1 = Product::fromBasicData(5, 'Widget');
$p2 = Product::fromJson($some_json_string);
$p3 = Product::fromXml($some_xml_string);

?>
]]>
    </programlisting>
   </example>
   <para>
    Конструктор разрешено делать закрытым или защищённым, чтобы исключить
    вызов конструктора извне. Тогда создать объект класса получится только
    через статический метод. Доступ к закрытым методам класса есть и у конструктора,
    и у статического метода, поскольку конструктор, статический и закрытый методы
    определили в одном и том же классе, даже если один экземпляр объекта вызывает
    закрытый метод другого. Закрытый конструктор необязателен,
    и будет ли в закрытом конструкторе смысл, определяет ситуация.
   </para>
   <para>
    В примере выше три открытых статических метода показывают разные способы,
    которыми они создают экземпляр объекта.
   </para>
   <simplelist>
    <member>
     Метод <code>fromBasicData()</code> принимает конкретные параметры, создаёт экземпляр
     класса через конструктор и возвращает результат.
    </member>
    <member>
     Метод <code>fromJson()</code> принимает JSON-строку и выполняет над
     строкой предварительную обработку, чтобы преобразовать строку в формат,
     который требует конструктор. Затем метод возвращает новый объект.
    </member>
    <member>
     Метод <code>fromXml()</code> принимает XML-строку, предварительно обрабатывает её,
     а затем создаёт пустой объект. При этом PHP вызывает конструктор, но поскольку
     параметры конструктора необязательны, метод пропускает их. Затем непосредственно
     перед возвратом результата метод присваивает значения свойствам объекта.
    </member>
   </simplelist>
   <para>
    В каждом из трёх случаев ключевое слово <code>static</code> транслируется в имя класса,
    в котором вызвали код. В примере — в имя класса <code>Product</code>.
   </para>
  </sect3>
 </sect2>

 <sect2 xml:id="language.oop5.decon.destructor">
  <title>Деструкторы</title>
  <methodsynopsis xml:id="object.destruct">
   <type>void</type><methodname>__destruct</methodname>
   <void />
  </methodsynopsis>
  <para>
   Концепция деструктора PHP повторяет концепцию других объектно-ориентированных
   языков, например C++. PHP вызовет деструктор, как только не останется ссылок
   на конкретный объект, или в другом порядке в течение завершения работы.
  </para>
  <example>
   <title>Пример использования деструктора</title>
   <programlisting role="php">
<![CDATA[
<?php

class MyDestructableClass
{
   function __construct()
   {
       print "Конструктор\n";
   }

   function __destruct()
   {
       print "Уничтожается " . __CLASS__  . "\n";
   }
}

$obj = new MyDestructableClass();

?>
]]>
   </programlisting>
  </example>
  <para>
   Как и конструкторы, движок PHP не будет неявно вызывать деструкторы,
   которые объявили в родительском классе. Необходимо вызвать <function>parent::__destruct</function>
   в теле деструктора дочернего класса, чтобы запустить деструктор родительского класса.
   Аналогично конструкторам, дочерний класс, в котором
   не определен деструктор, наследует деструктор из родительского класса.
  </para>
  <para>
   Движок вызовет деструктор, даже если выполнение скрипта
   остановила функция <function>exit</function>. Вызов функции <function>exit</function>
   в деструкторе предотвратит запуск остальных процедур завершения работы.
  </para>
  <note>
   <para>
    При завершении работы скрипта PHP отправляет HTTP-заголовки перед обработкой деструкторов.
    На этапе завершения работы скрипта рабочая директория, как её определяет PHP, иногда
    не совпадает с рабочей директорией, которую возвращают отдельные SAPI-интерфейсы
    (например, в Apache).
   </para>
  </note>
  <note>
   <para>
    Попытка выбросить исключение из деструктора, который вызвали во время
    завершения работы скрипта, вызовет фатальную ошибку.
   </para>
  </note>
 </sect2>

</sect1>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
