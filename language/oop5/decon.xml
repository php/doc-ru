<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 9ee9eccf455188ab6eb352194eb6f9eb99e15606 Maintainer: shein Status: ready -->
<!-- Reviewed: yes -->
<!-- $Revision$ -->
<sect1 xml:id="language.oop5.decon" xmlns="http://docbook.org/ns/docbook">
 <title>Конструкторы и деструкторы</title>

 <sect2 xml:id="language.oop5.decon.constructor">
  <title>Конструктор</title>
  <methodsynopsis xml:id="object.construct">
   <type>void</type><methodname>__construct</methodname>
   <methodparam rep="repeat"><type>mixed</type><parameter>values</parameter><initializer>""</initializer></methodparam>
  </methodsynopsis>
  <para>
   PHP позволяет объявлять методы-конструкторы. Классы, в которых
   объявлен метод-конструктор, будут вызывать этот метод при каждом
   создании нового объекта, так что это может оказаться полезным,
   например, для инициализации какого-либо состояния объекта
   перед его использованием.
  </para>
  <note>
   <simpara>
    Конструкторы, определённые в классах-родителях, не вызываются автоматически,
    если дочерний класс определяет собственный конструктор.
    Чтобы вызвать конструктор, объявленный в родительском классе,
    требуется вызвать <function>parent::__construct</function>
    внутри конструктора дочернего класса. Если в дочернем классе
    не определён конструктор, то он может быть унаследован от
    родительского класса как обычный метод (если он не был
    определён как приватный).
   </simpara>
  </note>
  <example>
   <title>Конструкторы при наследовании</title>
   <programlisting role="php">
<![CDATA[
<?php
class BaseClass {
   function __construct() {
       print "Конструктор класса BaseClass\n";
   }
}

class SubClass extends BaseClass {
   function __construct() {
       parent::__construct();
       print "Конструктор класса SubClass\n";
   }
}

class OtherSubClass extends BaseClass {
    // наследует конструктор BaseClass
}

// Конструктор класса BaseClass
$obj = new BaseClass();

// Конструктор класса BaseClass
// Конструктор класса SubClass
$obj = new SubClass();

// Конструктор класса BaseClass
$obj = new OtherSubClass();
?>
]]>
   </programlisting>
  </example>
  <para>
   В отличие от других методов, <link linkend="object.construct">__construct()</link>
   освобождается от обычных <link linkend="language.oop.lsp">правил совместимости сигнатуры</link> при наследовании.
  </para>
  <para>
   Конструкторы - это обычные методы, которые вызываются при
   инстанциировании соответствующих объектов. Следовательно, они могут иметь
   произвольное количество аргументов, которые могут быть обязательными, могут
   быть типизированными и иметь значения по умолчанию. Аргументы конструктора
   указываются в круглых скобках после имени класса.
  </para>
  <example>
   <title>Использование аргументов в конструкторах</title>
   <programlisting role="php">
<![CDATA[
<?php
class Point {
    protected int $x;
    protected int $y;

    public function __construct(int $x, int $y = 0) {
        $this->x = $x;
        $this->y = $y;
    }
}

// Передаём оба параметра.
$p1 = new Point(4, 5);
// Передаём только обязательные параметры. Для $y используется значеие по умолчанию 0.
$p2 = new Point(4);
// Вызываем с именованными параметрами (начиная с PHP 8.0):
$p3 = new Point(y: 5, x: 4);
?>
]]>
   </programlisting>
  </example>
  <para>
   Если у класса нет конструктора, или его конструктор не имеет обязательных параметров, скобки
   после имени класса можно не писать.
  </para>
  <sect3>
   <title>Конструкторы в старом стиле</title>
   <para>
    До PHP 8.0.0, классы в глобальном пространстве имён будут интерпретировать метод,
    названный так же, как класс, как конструктор старого стиля. Этот синтаксис считается
    устаревшим и будет вызывать ошибку уровня <constant>E_DEPRECATED</constant>, но
    всё равно эти методы будут вызываться в качестве конструктора.
    Если в классе присутствуют и <link linkend="object.construct">__construct()</link>,
    и метод с именем класса, то в качестве конструктора будет вызван
    <link linkend="object.construct">__construct()</link>.
   </para>
   <para>
    Для классов, находящихся в собственном пространстве имён и для всех классов, начиная с
    PHP 8.0.0, метод, названный по имени класса, будет игнорироваться.
   </para>
   <para>В новом коде всегда используйте <link linkend="object.construct">__construct()</link>.
   </para>
  </sect3>
  <sect3 xml:id="language.oop5.decon.constructor.promotion">
   <title>Определение свойств объекта в конструкторе</title>
   <para>
    Начиная с PHP 8.0.0, параметры конструктора можно использовать для задания
    соответствующих свойств объекта. Это довольно распространённая практика — присваивать
    свойствам объекта параметры, переданные в конструктор, не производя никаких дополнительных
    преобразований. Определение свойств класса в конструкторе позволяет значительно
    сократить количество шаблонного кода для такого случая. Пример выше можно будет
    переписать следующим образом:
   </para>
   <example>
    <title>Использование определения свойств в конструкторе</title>
    <programlisting role="php">
<![CDATA[
<?php
class Point {
    public function __construct(protected int $x, protected int $y = 0) {
    }
}
]]>
    </programlisting>
   </example>
   <para>
    Если декларация аргумента конструктора включает модификатор видимости, PHP интерпретирует
    его одновременно и как аргумент конструктора, и как свойство объекта и автоматически
    присвоит свойству значение, переданное в конструктор. При этом, если не предполагается
    какой-либо дополнительной логики, тело конструктора можно оставить пустым. Код
    конструктора выполнится после того, как все аргументы присвоятся всем соответствующим
    свойствам.
   </para>
   <para>
    Не все передаваемые в конструктор аргументы должны быть свойствами объекта.
    В конструкторе можно задавать как обычные, так и являющиеся свойствами объекта
    аргументы в любом порядке. Аргументы-свойства никак не влияют на код,
    исполняемый в конструкторе.
   </para>
   <note>
    <para>
     Свойства объектов не могут быть типа <type>callable</type> в связи с неоднозначностью
     которую они представляют для движка PHP. Соответственно и свойства определяемые
     в конструкторе также не могут быть типа <type>callable</type>. Любые другие
     <link linkend="language.types.declarations">декларации типов</link> допустимы.
    </para>
   </note>
   <note>
    <para>
     <link linkend="language.attributes">Атрибуты</link>, заданные для таких аргументов, будут применены как для них самих, так и для
     соответствующих свойств.
    </para>
   </note>
  </sect3>
  <sect3 xml:id="language.oop5.decon.constructor.static">
   <title>Статические методы создания объекта</title>
   <para>
    PHP поддерживает только один конструктор для класса. Однако в некоторых случаях есть
    необходимость создавать объект разными путями в зависимости от разных входных данных.
    Рекомендуемый способ - использовать статические методы как обёртки над конструктором.
   </para>
   <example>
    <title>Использование статических методов для создания объектов</title>
    <programlisting role="php">
<![CDATA[
<?php
class Product {

    private ?int $id;
    private ?string $name;

    private function __construct(?int $id = null, ?string $name = null) {
        $this->id = $id;
        $this->name = $name;
    }

    public static function fromBasicData(int $id, string $name): static {
        $new = new static($id, $name);
        return $new;
    }

    public static function fromJson(string $json): static {
        $data = json_decode($json);
        return new static($data['id'], $data['name']);
    }

    public static function fromXml(string $xml): static {
        // Пользовательская логика.
        $data = convert_xml_to_array($xml);
        $new = new static();
        $new->id = $data['id'];
        $new->name = $data['name'];
        return $new;
    }
}

$p1 = Product::fromBasicData(5, 'Widget');
$p2 = Product::fromJson($some_json_string);
$p3 = Product::fromXml($some_xml_string);
]]>
    </programlisting>
   </example>
   <para>
    Конструктор можно сделать скрытым или защищённым для предотвращения его прямого вызова.
    В таком случае объект класса можно будет создать только с помощью статических
    методов. Так как это методы того же класса, они имеют доступ ко всем его скрытым
    методам, даже если они относятся к разным экземплярам класса. Скрытый конструктор
    опционален и может присутствовать или отсутствовать по необходимости.
   </para>
   <para>
    В примере выше три публичных статических метода демонстрируют различные способы
    создания экземпляра объекта.
   </para>
   <simplelist>
    <member><code>fromBasicData()</code> принимает явные параметры, создаёт экземпляр
     класса через конструктор и возвращает объект.</member>
    <member><code>fromJson()</code> принимает JSON строку, производит над ней некоторые
     преобразования, извлекает данные необходимые для создания объекта и, так же как и
     предыдущий метод, вызывает конструктор и возвращает созданный объект.</member>
    <member><code>fromXml()</code> принимает XML строку, извлекает нужные данные и, так
     как в конструкторе нет обязательных параметров, вызывает его без них. После этого, так
     как ему доступны скрытые свойства, он присваивает им значения напрямую. После чего
     возвращает готовый объект.</member>
   </simplelist>
   <para>
    Во всех трёх случаях, ключевое слово <code>static</code> транслируется в имя класса,
    в котором этот код вызывается. В нашем случае <code>Product</code>.
   </para>
  </sect3>
 </sect2>

 <sect2 xml:id="language.oop5.decon.destructor">
  <title>Деструкторы</title>
  <methodsynopsis xml:id="object.destruct">
   <type>void</type><methodname>__destruct</methodname>
   <void />
  </methodsynopsis>
  <para>
   PHP предоставляет концепцию деструктора, аналогичную с той, которая
   применяется в других ОО-языках, таких как C++.
   Деструктор будет вызван при освобождении всех ссылок
   на определённый объект или при завершении
   скрипта (порядок выполнения деструкторов не гарантируется).
  </para>
  <example>
   <title>Пример использования деструктора</title>
   <programlisting role="php">
<![CDATA[
<?php
class MyDestructableClass
{
   function __construct() {
       print "Конструктор\n";
   }

   function __destruct() {
       print "Уничтожается " . __CLASS__  . "\n";
   }
}

$obj = new MyDestructableClass();

]]>
   </programlisting>
  </example>
  <para>
   Как и в случае с конструкторами, деструкторы, объявленные
   в родительском классе, не будут вызываться автоматически.
   Для вызова деструктора родительского класса,
   требуется вызвать <function>parent::__destruct</function> в
   теле деструктора дочернего класса. Подобно конструкторам, дочерний класс может унаследовать
   деструктор из родительского класса, если он не определён в нем.
  </para>
  <para>
   Деструктор будет вызываться даже в том случае, если скрипт был остановлен с
   помощью функции <function>exit</function>. Вызов <function>exit</function>
   в деструкторе предотвратит запуск всех последующих функций завершения.
  </para>
  <note>
   <para>
    Деструкторы, вызываемые при завершении скрипта, вызываются после отправки
    HTTP-заголовков. Рабочая директория во время фазы завершения скрипта
    может отличаться в некоторых SAPI (например, в Apache).
   </para>
  </note>
  <note>
   <para>
    Попытка выбросить исключение из деструктора (вызываемого во время
    завершения скрипта) вызывает фатальную ошибку.
   </para>
  </note>
 </sect2>

</sect1>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
