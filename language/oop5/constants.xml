<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: a9edd62d087ab1eb6292c795b7256e14ff9f1234 Maintainer: shein Status: ready -->
<!-- Reviewed: no -->
<sect1 xml:id="language.oop5.constants" xmlns="http://docbook.org/ns/docbook">
 <title>Константы классов</title>
 <para>
  <link linkend="language.constants">Константы</link> также могут быть объявлены в пределах одного класса.
  Область видимости констант по умолчанию <literal>public</literal>.
 </para>
 <note>
  <para>
   Константы класса могут быть переопределены дочерним классом.
  </para>
 </note>
 <para>
  Интерфейсы также могут содержать <literal>константы</literal>. За примерами
  обращайтесь к разделу об <link linkend="language.oop5.interfaces">интерфейсах</link>.
 </para>
 <para>
  К классу можно обратиться с помощью переменной.
  Значение переменной не может быть ключевым словом
  (например, <literal>self</literal>, <literal>parent</literal> и
  <literal>static</literal>).
 </para>
 <para>
  Обратите внимание, что константы класса задаются один раз для всего класса,
  а не отдельно для каждого созданного объекта этого класса.
 </para>
 <example>
  <title>Объявление и использование константы</title>
  <programlisting role="php">
<![CDATA[
<?php
class MyClass
{
    const CONSTANT = 'значение константы';

    function showConstant() {
        echo  self::CONSTANT . "\n";
    }
}

echo MyClass::CONSTANT . "\n";

$classname = "MyClass";
echo $classname::CONSTANT . "\n";

$class = new MyClass();
$class->showConstant();

echo $class::CONSTANT."\n";
?>
]]>
   </programlisting>
 </example>
 <para>
  Специальная константа <constant>::class</constant>,
  которой на этапе компиляции присваивается полное имя класса, полезна при использовании с классами,
  использующими пространства имён.
 </para>
 <example>
  <title>Пример использования ::class с пространством имён</title>
  <programlisting role="php">
<![CDATA[
<?php
namespace foo {
    class bar {
    }

    echo bar::class; // foo\bar
}
?>
]]>
   </programlisting>
 </example>
 <example>
  <title>Пример констант, заданных выражением</title>
  <programlisting role="php">
<![CDATA[
<?php
const ONE = 1;

class foo {
    const TWO = ONE * 2;
    const THREE = ONE + self::TWO;
    const SENTENCE = 'Значение константы THREE - ' . self::THREE;
}
?>
]]>
   </programlisting>
 </example>

 <example>
  <title>Модификаторы видимости констант класса, начиная с PHP 7.1.0</title>
  <programlisting role="php">
<![CDATA[
<?php
class Foo {
    public const BAR = 'bar';
    private const BAZ = 'baz';
}
echo Foo::BAR, PHP_EOL;
echo Foo::BAZ, PHP_EOL;
?>
]]>
   </programlisting>
   &example.outputs.71;
   <screen>
<![CDATA[
bar

Fatal error: Uncaught Error: Cannot access private const Foo::BAZ in …
]]>
   </screen>
 </example>
 <note>
  <para>
   Начиная с PHP 7.1.0 для констант класса можно использовать модификаторы области видимости.
  </para>
 </note>
</sect1><!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
