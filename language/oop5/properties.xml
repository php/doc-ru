<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: c1f37a6c270aadbbb3da56a3973ffd62197adf2b Maintainer: irker Status: ready -->
<!-- Reviewed: no -->
<sect1 xml:id="language.oop5.properties" xmlns="http://docbook.org/ns/docbook">
 <title>Свойства</title>

 <para>
  Переменные-члены класса называются <emphasis>свойствами</emphasis>.
  В других языках аналогичные элементы называются <emphasis>полями</emphasis> и другими терминами,
  но в PHP-документации
  переменные-члены класса называются <emphasis>свойствами</emphasis>.
  Свойства класса определяют хотя бы одним модификатором (которые описывают разделы
  «<xref linkend="language.oop5.visibility"/>», «<xref linkend="language.oop5.static"/>»
  или начиная с PHP 8.1.0 <link linkend="language.oop5.properties.readonly-properties">readonly</link>),
  за которым начиная с PHP 7.4 следует необязательное, за исключением <code>readonly</code>-свойств,
  объявление типа, после которого идёт стандартное объявление переменной.
  При объявлении свойства класса переменную возможно инициализировать,
  но начальное значение переменной потребуется указать
  как <link linkend="language.constants">постоянное значение</link>.
 </para>
 <note>
  <para>
   Устаревший способ объявления свойств класса —
   ключевое слово <literal>var</literal> вместо модификатора.
  </para>
 </note>
 <note>
  <simpara>
   Свойство, которое объявили без модификатора раздела «<xref linkend="language.oop5.visibility"/>»,
   PHP объявит как <literal>public</literal>.
  </simpara>
 </note>
 <para>
  Внутри методов класса доступ к нестатическим свойствам получают
  через оператор объекта <literal>-&gt;</literal> —
  <varname>$this-&gt;property</varname>, где <literal>property</literal> — имя свойства.
  Доступ к статическим свойствам получают через оператор двойного двоеточия <literal>::</literal> —
  <varname>self::$property</varname>. Дополнительную информацию об отличиях
  статических свойств от нестатических даёт раздел
  «<xref linkend="language.oop5.static" />».
 </para>
 <para>
  Псевдопеременная <varname>$this</varname> доступна внутри
  каждого метода класса, если метод вызывается из контекста объекта.
  Переменная <varname>$this</varname> — значение вызывающего объекта.
 </para>

 <para>
  <example>
   <title>Объявление свойств</title>
   <programlisting role="php" annotations="non-interactive">
<![CDATA[
<?php

class SimpleClass
{
   public $var1 = 'hello ' . 'world';
   public $var2 = <<<EOD
hello world
EOD;
   public $var3 = 1+2;
   // Неправильное определение свойств:
   public $var4 = self::myStaticMethod();
   public $var5 = $myVar;

   // Правильное определение свойств:
   public $var6 = myConstant;
   public $var7 = [true, false];

   public $var8 = <<<'EOD'
hello world
EOD;

   // Без модификатора области видимости:
   static $var9;
   readonly int $var10;
}

?>
]]>
   </programlisting>
  </example>
 </para>

 <note>
  <para>
   Классы и объекты обрабатывают набором функций.
   Смотрите раздел справки «<link linkend="ref.classobj">Функции работы с классами и объектами</link>».
  </para>
 </note>

  <sect2 xml:id="language.oop5.properties.typed-properties">
   <title>Объявления типов</title>
   <para>
    Начиная с PHP 7.4.0 определениям свойств разрешается включать «<xref linkend="language.types.declarations" />»,
    за исключением типа <type>callable</type>.
    <example>
     <title>Пример типизированных свойств</title>
     <programlisting role="php">
<![CDATA[
<?php

class User
{
    public int $id;
    public ?string $name;

    public function __construct(int $id, ?string $name)
    {
        $this->id = $id;
        $this->name = $name;
    }
}

$user = new User(1234, null);

var_dump($user->id);
var_dump($user->name);

?>
]]>
     </programlisting>
     &example.outputs;
     <screen>
<![CDATA[
int(1234)
NULL
]]>
     </screen>
    </example>
   </para>

   <para>
    При обращении к типизированному свойству, для которого не определили
    начальное значение, PHP выбросит исключение <classname>Error</classname>.
    <example>
     <title>Обращение к свойствам</title>
     <programlisting role="php">
<![CDATA[
<?php

class Shape
{
    public int $numberOfSides;
    public string $name;

    public function setNumberOfSides(int $numberOfSides): void
    {
        $this->numberOfSides = $numberOfSides;
    }

    public function setName(string $name): void
    {
        $this->name = $name;
    }

    public function getNumberOfSides(): int
    {
        return $this->numberOfSides;
    }

    public function getName(): string
    {
        return $this->name;
    }
}

$triangle = new Shape();
$triangle->setName("triangle");
$triangle->setNumberofSides(3);
var_dump($triangle->getName());
var_dump($triangle->getNumberOfSides());

$circle = new Shape();
$circle->setName("circle");
var_dump($circle->getName());
var_dump($circle->getNumberOfSides());

?>
]]>
     </programlisting>
     &example.outputs;
     <screen>
<![CDATA[
string(8) "triangle"
int(3)
string(6) "circle"

Fatal error: Uncaught Error: Typed property Shape::$numberOfSides must not be accessed before initialization
]]>
     </screen>
    </example>
   </para>
  </sect2>

 <sect2 xml:id="language.oop5.properties.readonly-properties">
  <title>Readonly-свойства</title>
  <para>
   Начиная с PHP 8.1.0 разрешили объявлять свойства с модификатором <literal>readonly</literal>,
   который запрещает изменять свойство после инициализации.
   До PHP 8.4.0 свойство с модификатором <literal>readonly</literal>
   автоматически получало закрытую видимость для установки значения,
   и записывать такое свойство можно было только в том же самом классе, в котором свойство объявили.
   С PHP 8.4.0 свойства с модификатором <literal>readonly</literal>
   автоматически получают защищённую видимость для установки значения
   <link linkend="language.oop5.visibility-members-aviz"><literal>protected(set)</literal></link>,
   поэтому устанавливать значения для такого свойства можно в дочернем классе.
   Видимость свойства для записи разрешается переопределять вручную.
   <example>
    <title>Примеры readonly-свойств</title>
    <programlisting role="php" annotations="non-interactive">
<![CDATA[
<?php

class Test
{
    public readonly string $prop;

    public function __construct(string $prop)
    {
        // Правильная инициализация.
        $this->prop = $prop;
    }
}

$test = new Test("foobar");

// Правильное чтение
var_dump($test->prop); // string(6) "foobar"

// Неправильное переопределение. Не имеет значения, что присвоенное значение такое же
$test->prop = "foobar";
// Error: Cannot modify readonly property Test::$prop

?>
]]>
    </programlisting>
   </example>
   <note>
    <para>
     Модификатор readonly разрешается применять только
     к <link linkend="language.oop5.properties.typed-properties">типизированным свойствам</link>.
     Тип свойства объявляют как <xref linkend="language.types.mixed" />,
     когда требуется создать readonly-свойство без ограничений типа.
    </para>
   </note>
   <note>
    <para>
     Статические readonly-свойства не поддерживаются.
    </para>
   </note>
  </para>
  <para>
   Readonly-свойство разрешается инициализировать только один раз и только из области видимости,
   в которой свойство объявили.
   Другое присваивание или изменение свойства приведёт к исключению <classname>Error</classname>.
   <example>
    <title>Неправильная инициализация readonly-свойств</title>
    <programlisting role="php" annotations="non-interactive">
<![CDATA[
<?php

class Test1
{
    public readonly string $prop;
}

$test1 = new Test1();

// Неправильная инициализация за пределами закрытой области
$test1->prop = "foobar";
// Error: Cannot initialize readonly property Test1::$prop from global scope

?>
]]>
    </programlisting>
   </example>
  </para>
  <note>
   <para>
    Нельзя явным образом указывать значение по умолчанию для readonly-свойств,
    потому что readonly-свойство со значением по умолчанию по существу совпадает
    с константой, и поэтому бесполезно.
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php

class Test
{
    // Error: Readonly property Test::$prop cannot have default value
    public readonly int $prop = 42;
}

?>
]]>
     </programlisting>
    </informalexample>
   </para>
  </note>
  <note>
   <para>
    Конструкцией <function>unset</function> нельзя уничтожить readonly-свойство
    после инициализации.
    Однако получится уничтожить readonly-свойство до инициализации из области видимости,
    в которой свойство объявили.
   </para>
  </note>
  <para>
   К изменениям относятся не только стандартные присваивания, следующие изменения
   тоже выбросят ошибку <classname>Error</classname>:
   <informalexample>
    <programlisting role="php" annotations="non-interactive">
<![CDATA[
<?php

class Test
{
    public function __construct(
        public readonly int $i = 0,
        public readonly array $ary = [],
    ) {}
}

$test = new Test();
$test->i += 1;
$test->i++;
++$test->i;
$test->ary[] = 1;
$test->ary[0][] = 1;
$ref =& $test->i;
$test->i =& $ref;
byRef($test->i);
foreach ($test as &$prop);

?>
]]>
    </programlisting>
   </informalexample>
  </para>
  <para>
   При этом readonly-свойства не исключают внутреннюю изменчивость.
   Объекты и ресурсы, которые хранятся в readonly-свойствах,
   по-прежнему получится изменить внутри:
   <informalexample>
    <programlisting role="php" annotations="non-interactive">
<![CDATA[
<?php

class Test
{
    public function __construct(public readonly object $obj) {}
}

$test = new Test(new stdClass());

// Правильное внутреннее изменение
$test->obj->foo = 1;

// Неправильное переопределение
$test->obj = new stdClass();

?>
]]>
    </programlisting>
   </informalexample>
  </para>
   <para>
    Начиная с PHP 8.3.0 свойства, доступные только для чтения, разрешается инициализировать повторно
    при клонировании объекта через магический метод <link linkend="object.clone">__clone()</link>.
    <example>
     <title>Клонирование readonly-свойств</title>
     <programlisting role="php">
<![CDATA[
<?php

class Test1
{
    public readonly ?string $prop;

    public function __clone()
    {
        $this->prop = null;
    }

    public function setProp(string $prop): void
    {
        $this->prop = $prop;
    }
}

$test1 = new Test1();
$test1->setProp('foobar');

$test2 = clone $test1;
var_dump($test2->prop); // NULL

?>
]]>
     </programlisting>
    </example>
   </para>
 </sect2>

 <sect2 xml:id="language.oop5.properties.dynamic-properties">
  <title>Динамические свойства</title>
  <para>
   При попытке присвоить несуществующее свойство объекту (&object;),
   PHP автоматически создаст такое свойство.
   Это динамически созданное свойство будет доступно
   <emphasis>только</emphasis> для этого экземпляра класса.
  </para>

  <warning>
   <simpara>
    С PHP 8.2.0 динамические свойства устарели.
    Вместо динамического присваивания свойства классу рекомендуют объявлять свойство.
    Для обработки произвольных имён свойств
    класс должен реализовать магические методы
    <link linkend="object.get">__get()</link> и <link linkend="object.set">__set()</link>.
    В крайнем случае класс помечают атрибутом <code>#[\AllowDynamicProperties]</code>.
   </simpara>
  </warning>
 </sect2>

</sect1>
 <!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
