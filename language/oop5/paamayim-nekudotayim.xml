<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 3e823762fd850c92306d53b0b25c7a7667245280 Maintainer: shein Status: ready -->
<!-- Reviewed: yes Maintainer: lex -->
<!-- $Revision$ -->
<sect1 xml:id="language.oop5.paamayim-nekudotayim" xmlns="http://docbook.org/ns/docbook">
 <title>Оператор разрешения области видимости (::)</title>
 
 <para>
  Оператор разрешения области видимости (также называемый "Paamayim Nekudotayim") или
  просто "двойное двоеточие" - это лексема, позволяющая обращаться к
  <link linkend="language.oop5.static">статическим</link> свойствам,
  <link linkend="language.oop5.constants">константам</link> и 
  переопределённым свойствам или методам класса.
 </para>
 
 <para>
  При обращении к этим элементам извне класса, необходимо
  использовать имя этого класса.
 </para>
 
 <para>
  Начиная с версии PHP 5.3.0, стало возможным обратиться к классу с помощью переменной.
  Значение переменной не должно быть ключевым словом (например, <literal>self</literal>,
  <literal>parent</literal> или <literal>static</literal>).
 </para>
 
 <para>
  "Paamayim Nekudotayim" на первый взгляд может показаться странным
  словосочетанием для обозначения двойного двоеточия. Однако,
  во время создания Zend Engine версии 0.5 (который входил в PHP3),
  команда Zend выбрала именно это обозначение.
  Оно на самом деле означает "двойное двоеточие" - на иврите!
 </para>
 
 <example>
  <title>Использование :: вне объявления класса</title>
  <programlisting role="php">
<![CDATA[
<?php
class MyClass {
    const CONST_VALUE = 'Значение константы';
}

$classname = 'MyClass';
echo $classname::CONST_VALUE; // Начиная с PHP 5.3.0

echo MyClass::CONST_VALUE;
?>
]]>
  </programlisting>
 </example>
 
 <para>
  Для обращения к свойствам и методам внутри самого класса
  используются ключевые слова <varname>self</varname>, <varname>parent</varname>
  и <varname>static</varname>.
 </para>
 
 <example>
  <title>Использование :: внутри объявления класса</title>
  <programlisting role="php">
<![CDATA[
<?php
class OtherClass extends MyClass
{
    public static $my_static = 'статическая переменная';

    public static function doubleColon() {
        echo parent::CONST_VALUE . "\n";
        echo self::$my_static . "\n";
    }
}

$classname = 'OtherClass';
$classname::doubleColon(); // Начиная с версии PHP 5.3.0

OtherClass::doubleColon();
?>
]]>
  </programlisting>
 </example>
 
 <para>
  Когда дочерний класс переопределяет методы, объявленные в родительском классе,
  PHP не будет осуществлять автоматический вызов методов, принадлежащих
  классу-родителю. Эта функциональность возлагается на метод, переопределяемый
  в дочернем классе. Данное правило распространяется на <link
  linkend="language.oop5.decon">конструкторы и деструкторы</link>, <link
  linkend="language.oop5.overloading">перегруженные</link> и <link
  linkend="language.oop5.magic">"магические"</link> методы.
 </para>
 
 <example>
  <title>Обращение к методу в родительском классе</title>
  <programlisting role="php">
<![CDATA[
<?php
class MyClass
{
    protected function myFunc() {
        echo "MyClass::myFunc()\n";
    }
}

class OtherClass extends MyClass
{
    // Переопределить родительское определение
    public function myFunc()
    {
        // Но всё ещё вызываем родительскую функцию
        parent::myFunc();
        echo "OtherClass::myFunc()\n";
    }
}

$class = new OtherClass();
$class->myFunc();
?>
]]>
  </programlisting>
 </example>
 <para>
  См. также <link linkend="language.oop5.basic.class.this">некоторые примеры
  статических вызовов</link>.
 </para>
 
</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
