<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 2e7c00fd314a708ecbd495ef7cc9ae8c8462c33c Maintainer: rjhdby Status: ready -->
<!-- Reviewed: no -->
<sect1 xml:id="language.oop5.variance" xmlns="http://docbook.org/ns/docbook">
 <title>Ковариантность и контравариантность</title>

 <para>
  В PHP 7.2.0 путём снятия ограничений типа для параметров в дочернем методе
  добавили частичную контравариантность. Начиная с PHP 7.4.0 добавили полную поддержку
  ковариантности и контравариантности.
 </para>

 <para>
  Ковариантность разрешает дочернему методу возвращать более конкретный тип,
  чем тип значения возврата родительского метода. Контравариантность
  разрешает определить тип параметра в дочернем методе менее конкретным, чем в родительском.
 </para>

 <para>
  Объявление типа считают более конкретным в следующем случае:
  <itemizedlist>
   <listitem>
    <simpara>
     Удалили тип <link linkend="language.types.type-system.composite.union">из объединения типов</link>
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     Добавили тип
     <link linkend="language.types.type-system.composite.intersection">к пересечению типов</link>
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     Тип класса изменили на тип дочернего класса
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     Тип <type>iterable</type> изменили на тип <type>array</type> или <classname>Traversable</classname>
    </simpara>
   </listitem>
  </itemizedlist>

  Класс типа считают менее конкретным, если верно обратное.
 </para>

 <sect2 xml:id="language.oop5.variance.covariance">
  <title>Ковариантность</title>

  <para>
   Создадим простой абстрактный родительский класс <varname>Animal</varname>,
   чтобы проиллюстрировать работу ковариантности.
   Класс <varname>Animal</varname> расширяется дочерними классами
   <varname>Cat</varname> и <varname>Dog</varname>.
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php

abstract class Animal
{
    protected string $name;

    public function __construct(string $name)
    {
        $this->name = $name;
    }

    abstract public function speak();
}

class Dog extends Animal
{
    public function speak()
    {
        echo $this->name . " лает";
    }
}

class Cat extends Animal
{
    public function speak()
    {
        echo $this->name . " мяукает";
    }
}

?>
]]>
   </programlisting>
  </informalexample>

  <para>
   Обратите внимание, пример не содержит методов, которые возвращают значения. Добавим ряд фабрик,
   которые возвращают новый объект с типом класса <varname>Animal</varname>,
   <varname>Cat</varname> или <varname>Dog</varname>.
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php

interface AnimalShelter
{
    public function adopt(string $name): Animal;
}

class CatShelter implements AnimalShelter
{
    public function adopt(string $name): Cat // Возвращаем тип Cat вместо типа Animal
    {
        return new Cat($name);
    }
}

class DogShelter implements AnimalShelter
{
    public function adopt(string $name): Dog // Возвращаем тип Dog вместо типа Animal
    {
        return new Dog($name);
    }
}

$kitty = (new CatShelter())->adopt("Рыжик");
$kitty->speak();
echo "\n";

$doggy = (new DogShelter())->adopt("Бобик");
$doggy->speak();

?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
Рыжик мяукает
Бобик лает
]]>
   </screen>
  </informalexample>
 </sect2>

 <sect2 xml:id="language.oop5.variance.contravariance">
  <title>Контравариантность</title>

  <para>
   В продолжение предыдущего примера с классами <varname>Animal</varname>,
   <varname>Cat</varname> и <varname>Dog</varname>
   введём новые классы — <varname>Food</varname> и <varname>AnimalFood</varname>,
   и добавим в абстрактный класс <varname>Animal</varname> новый метод
   <varname>eat(AnimalFood $food)</varname>.
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php

class Food {}

class AnimalFood extends Food {}

abstract class Animal
{
    protected string $name;

    public function __construct(string $name)
    {
        $this->name = $name;
    }

    public function eat(AnimalFood $food)
    {
        echo $this->name . " ест " . get_class($food);
    }
}

?>
]]>
   </programlisting>
  </informalexample>

  <para>
   Переопределим метод <varname>eat</varname> в классе <varname>Dog</varname> так,
   чтобы метод принимал любой объект с типом <varname>Food</varname>,
   чтобы увидеть суть контравариантности. Класс <varname>Cat</varname> оставим
   без изменений.
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php

class Dog extends Animal
{
    public function eat(Food $food)
    {
        echo $this->name . " ест " . get_class($food);
    }
}

?>
]]>
   </programlisting>
  </informalexample>

  <para>
   Следующий пример покажет поведение контравариантности.
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php

$kitty = (new CatShelter())->adopt("Рыжик");
$catFood = new AnimalFood();
$kitty->eat($catFood);
echo "\n";

$doggy = (new DogShelter())->adopt("Бобик");
$banana = new Food();
$doggy->eat($banana);

?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
Рыжик ест AnimalFood
Бобик ест Food
]]>
   </screen>

   <para>
    Но что произойдёт, если кошка <varname>$kitty</varname> попробует
    методом <methodname>eat</methodname> съесть банан <varname>$banana</varname>?
   </para>

   <programlisting role="php">
<![CDATA[
$kitty->eat($banana);
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
Fatal error: Uncaught TypeError: Argument 1 passed to Animal::eat() must be an instance of AnimalFood, instance of Food given
]]>
   </screen>
  </informalexample>
 </sect2>
 <sect2>
  <title>Вариативность свойств</title>
  <simpara>
   По умолчанию свойства не удовлетворяют ни правилам ковариантности, ни правилам контравариантности,
   следовательно, свойства — инвариантны. Поэтому тип свойства вообще нельзя изменить в дочернем классе.
   Причина этого состоит в том, что операции «чтения» должны быть ковариантными,
   а операции «записи» — контравариантными.
   Единственный доступный для свойства способ удовлетворить обоим требованиям — оставаться инвариантным.
  </simpara>
  <simpara>
   Начиная с PHP 8.4.0, в котором добавили абстрактные свойства в интерфейсе или абстрактном классе
   <link linkend="language.oop5.property-hooks.virtual">и виртуальные свойства</link>,
   разрешается объявить свойство, доступное только для операций чтения или записи.
   Итогом нововведений стало то, что абстрактным свойствам или виртуальным свойствам,
   для которых требуется только операция "get", доступна ковариантность.
   Аналогично, абстрактному свойству или виртуальному свойству,
   для которого требуется только операция "set", доступна контравариантность.
  </simpara>
  <simpara>
   Однако как только для свойства объявили как операцию get, так и операцию set,
   свойство теряет ковариантность или контравариантность для расширения,
   и снова становится инвариантным.
  </simpara>
  <example>
   <title>Пример вариативности типа свойства</title>
   <programlisting role="php">
<![CDATA[
<?php

class Animal {}
class Dog extends Animal {}
class Poodle extends Dog {}

interface PetOwner
{
    // Требуется только операция get, поэтому свойству доступна ковариантность
    public Animal $pet {
        get;
    }
}

class DogOwner implements PetOwner
{
    // Свойству возможно указать более ограниченный тип, поскольку со стороны операции get
    // по-прежнему возвращается Animal. Однако, поскольку это внутреннее свойство текущего класса,
    // потомкам класса больше нельзя изменять тип свойства
    public Dog $pet;
}

class PoodleOwner extends DogOwner
{
    // Изменение свойства НЕДОПУСТИМО, поскольку для свойства DogOwner::$pet
    // определили поведение операций get и set, и дочерние классы обязаны соблюдать
    // контракт родительского класса при переопределении свойства
    public Poodle $pet;
}

?>
]]>
   </programlisting>
  </example>
 </sect2>
</sect1><!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
