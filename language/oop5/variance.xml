<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 5ccee0ae1c9978e1b28b0dd3ff901393f8be19e9 Maintainer: rjhdby Status: ready -->
<!-- Reviewed: no -->
<sect1 xml:id="language.oop5.variance" xmlns="http://docbook.org/ns/docbook">
 <title>Ковариантность и контравариантность</title>

 <para>
  В PHP 7.2.0 была добавлена частичная контравариантность путём устранения ограничений типа
  для параметров в дочернем методе. Начиная с PHP 7.4.0, добавлена полная поддержка
  ковариантности и контравариантности.
 </para>

 <para>
  Ковариантность позволяет дочернему методу возвращать более конкретный тип,
  чем тип возвращаемого значения его родительского метода. В то время как контравариантность
  позволяет типу параметра в дочернем методе быть менее специфичным, чем в родительском.
 </para>

 <para>
  Объявление типа считается более конкретным в следующем случае:
  <itemizedlist>
   <listitem>
    <simpara>
     Удалён тип union
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     Тип класса изменяется на тип дочернего класса
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     Число с плавающей точкой (<type>float</type>) изменено на целое число (<type>int</type>)
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <type>iterable</type> изменён на массив (<type>array</type>) или <classname>Traversable</classname>
    </simpara>
   </listitem>
  </itemizedlist>

  В противном случае класс типа считается менее конкретным.
 </para>

 <sect2 xml:id="language.oop5.variance.covariance">
  <title>Ковариантность</title>

  <para>
   Чтобы проиллюстрировать, как работает ковариантность, создадим простой абстрактный родительский класс <varname>Animal</varname>.
   <varname>Animal</varname> будет расширен за счёт дочерних классов
   <varname>Cat</varname> и <varname>Dog</varname>.
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php

abstract class Animal
{
    protected string $name;

    public function __construct(string $name)
    {
        $this->name = $name;
    }

    abstract public function speak();
}

class Dog extends Animal
{
    public function speak()
    {
        echo $this->name . " лает";
    }
}

class Cat extends Animal
{
    public function speak()
    {
        echo $this->name . " мяукает";
    }
}
]]>
   </programlisting>
  </informalexample>

  <para>
   Обратите внимание, что в примере нет методов, которые возвращают значения. Будет добавлено несколько фабрик,
   которые возвращают новый объект типа класса <varname>Animal</varname>, <varname>Cat</varname> или <varname>Dog</varname>.
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php

interface AnimalShelter
{
    public function adopt(string $name): Animal;
}

class CatShelter implements AnimalShelter
{
    public function adopt(string $name): Cat // Возвращаем класс Cat вместо Animal
    {
        return new Cat($name);
    }
}

class DogShelter implements AnimalShelter
{
    public function adopt(string $name): Dog // Возвращаем класс Dog вместо Animal
    {
        return new Dog($name);
    }
}

$kitty = (new CatShelter)->adopt("Рыжик");
$kitty->speak();
echo "\n";

$doggy = (new DogShelter)->adopt("Бобик");
$doggy->speak();
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
Рыжик мяукает
Бобик лает
]]>
   </screen>
  </informalexample>
 </sect2>

 <sect2 xml:id="language.oop5.variance.contravariance">
  <title>Контравариантность</title>

  <para>
   В продолжение предыдущего примера, где мы
   использовали классы <varname>Animal</varname>,
   <varname>Cat</varname> и <varname>Dog</varname>, мы
   введём новые классы <varname>Food</varname> и <varname>AnimalFood</varname> и добавим в абстрактный класс
   <varname>Animal</varname> новый метод
   <varname>eat(AnimalFood $food)</varname>.
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php

class Food {}

class AnimalFood extends Food {}

abstract class Animal
{
    protected string $name;

    public function __construct(string $name)
    {
        $this->name = $name;
    }

    public function eat(AnimalFood $food)
    {
        echo $this->name . " ест " . get_class($food);
    }
}
]]>
   </programlisting>
  </informalexample>

  <para>
   Чтобы увидеть суть контравариантности, мы переопределим метод
   <varname>eat</varname> класса <varname>Dog</varname> таким
   образом, чтобы он мог принимать любой объект класса
   <varname>Food</varname>. Класс <varname>Cat</varname> оставим
   без изменений.
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php

class Dog extends Animal
{
    public function eat(Food $food) {
        echo $this->name . " ест " . get_class($food);
    }
}
]]>
   </programlisting>
  </informalexample>

  <para>
   Следующий пример покажет поведение контравариантности.
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php

$kitty = (new CatShelter)->adopt("Рыжик");
$catFood = new AnimalFood();
$kitty->eat($catFood);
echo "\n";

$doggy = (new DogShelter)->adopt("Бобик");
$banana = new Food();
$doggy->eat($banana);
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
Рыжик ест AnimalFood
Бобик ест Food
]]>
   </screen>

   <para>
    Но что случится, если <varname>$kitty</varname> попробует
    съесть (<varname>eat</varname>) банан
    (<varname>$banana</varname>)?
   </para>

   <programlisting role="php">
<![CDATA[
$kitty->eat($banana);
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
Fatal error: Uncaught TypeError: Argument 1 passed to Animal::eat() must be an instance of AnimalFood, instance of Food given
]]>
   </screen>
  </informalexample>
 </sect2>
</sect1>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
