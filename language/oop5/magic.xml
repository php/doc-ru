<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 9e0f03ac354d797d1d16c0fcc1663e5e170f2727 Maintainer: irker Status: ready -->
<!-- Reviewed: yes -->
<!-- $Revision$ -->
<sect1 xml:id="language.oop5.magic" xmlns="http://docbook.org/ns/docbook">
 <title>Магические методы</title>
 <para>
  Имена функций
  <link linkend="object.construct">__construct()</link>,
  <link linkend="object.destruct">__destruct()</link>,
  <link linkend="object.call">__call()</link>,
  <link linkend="object.callstatic">__callStatic()</link>,
  <link linkend="object.get">__get()</link>,
  <link linkend="object.set">__set()</link>,
  <link linkend="object.isset">__isset()</link>,
  <link linkend="object.unset">__unset()</link>,
  <link linkend="object.sleep">__sleep()</link>,
  <link linkend="object.wakeup">__wakeup()</link>,
  <link linkend="object.serialize">__serialize()</link>,
  <link linkend="object.unserialize">__unserialize()</link>,
  <link linkend="object.tostring">__toString()</link>,
  <link linkend="object.invoke">__invoke()</link>,
  <link linkend="object.set-state">__set_state()</link>,
  <link linkend="object.clone">__clone()</link> и
  <link linkend="object.debuginfo">__debugInfo()</link>
  являются магическими в PHP.
  Не стоит называть свои методы этими именами, если вы не хотите
  использовать их магическую функциональность.
 </para>
 
 <note>
  <simpara>
   Все магические методы <emphasis>ДОЛЖНЫ</emphasis> быть объявлены как <literal>public</literal>.
  </simpara>
 </note>
 
 <caution>
  <simpara>
   PHP оставляет за собой право все методы, начинающиеся с __,
   считать магическими. Не рекомендуется использовать имена
   методов с __ в PHP, если вы не желаете использовать соответствующую
   магическую функциональность.
  </simpara>
 </caution>
 
 <sect2 xml:id="language.oop5.magic.sleep">
  <title>
   <link linkend="object.sleep">__sleep()</link> и
   <link linkend="object.wakeup">__wakeup()</link>
  </title>
  
  <methodsynopsis xml:id="object.sleep">
   <modifier>public</modifier> <type>array</type><methodname>__sleep</methodname>
   <void/>
  </methodsynopsis>
  <methodsynopsis xml:id="object.wakeup">
   <modifier>public</modifier> <type>void</type><methodname>__wakeup</methodname>
   <void/>
  </methodsynopsis>
  
  <para>
   Функция <function>serialize</function> проверяет, присутствует ли в
   классе метод с магическим именем <link linkend="object.sleep">__sleep()</link>.
   Если это так, то этот метод выполняется до любой операции сериализации. Он может
   очистить объект и должен возвращать массив с именами
   всех переменных этого объекта, которые должны быть сериализованы.
   Если метод ничего не возвращает, то сериализуется &null; и
   выдаётся предупреждение <constant>E_NOTICE</constant>.
  </para>
  <note>
   <para>
    Недопустимо возвращать в <link linkend="object.sleep">__sleep()</link>
    имена закрытых свойств в родительском классе. Это
    приведёт к ошибке уровня <constant>E_NOTICE</constant>.
    Вместо этого вы можете использовать интерфейс
    <classname>Serializable</classname>.
   </para>
  </note>
  <para>
   Предполагаемое использование <link linkend="object.sleep">__sleep()</link>
   состоит в завершении работы над данными, ждущими обработки или
   других подобных задач очистки. Кроме того, этот метод может полезен,
   когда есть очень большие объекты, которые
   нет необходимости полностью сохранять.
  </para>
  <para>
   С другой стороны, функция <function>unserialize</function> проверяет
   наличие метода с магическим именем
   <link linkend="object.wakeup">__wakeup()</link>.
   Если она имеется, эта функция может восстанавливать любые ресурсы,
   которые может иметь объект.
  </para>
  <para>
   Предполагаемое использование <link linkend="object.wakeup">__wakeup()</link>
   заключается в восстановлении любых соединений с базой данных,
   которые могли быть потеряны во время операции сериализации и
   выполнения других операций повторной инициализации.
  </para>
  <example>
   <title>Сериализация и десериализация</title>
   <programlisting role="php">
<![CDATA[
<?php
class Connection
{
    protected $link;
    private $dsn, $username, $password;
    
    public function __construct($dsn, $username, $password)
    {
        $this->dsn = $dsn;
        $this->username = $username;
        $this->password = $password;
        $this->connect();
    }
    
    private function connect()
    {
        $this->link = new PDO($this->dsn, $this->username, $this->password);
    }
    
    public function __sleep()
    {
        return array('dsn', 'username', 'password');
    }
    
    public function __wakeup()
    {
        $this->connect();
    }
}?>
]]>
   </programlisting>
  </example>
 </sect2>
 
 <sect2 xml:id="language.oop5.magic.serialize">
  <title>
   <link linkend="object.serialize">__serialize()</link> и
   <link linkend="object.unserialize">__unserialize()</link>
  </title>
  
  <methodsynopsis xml:id="object.serialize">
   <modifier>public</modifier> <type>array</type><methodname>__serialize</methodname>
   <void/>
  </methodsynopsis>
  <methodsynopsis xml:id="object.unserialize">
   <modifier>public</modifier> <type>void</type><methodname>__unserialize</methodname>
   <methodparam><type>array</type><parameter>data</parameter></methodparam>
  </methodsynopsis>
  
  <para>
   <function>serialize</function> проверяет, есть ли в классе функция с 
   магическим именем <link linkend="object.serialize">__serialize()</link>. Если да, функция 
   выполняется перед любой сериализацией. Она должна создать и вернуть ассоциативный массив пар ключ/значение, 
   которые представляют сериализованную форму объекта.
   Если массив не возвращён, будет выдано <classname>TypeError</classname>.
  </para>
  <note>
   <para>
    Если и <link linkend="object.serialize">__serialize()</link> и <link linkend="object.sleep">__sleep()</link> 
    определены в одном и том же объекте, будет вызван только метод <link linkend="object.serialize">__serialize()</link>.
    <link linkend="object.sleep">__sleep()</link> будет игнорироваться. Если объект реализует интерфейс <link linkend="class.serializable">Serializable</link>, 
    метод <literal>serialize()</literal> интерфейса будет игнорироваться, а вместо него будет использован <link linkend="object.serialize">__serialize()</link>.
   </para>
  </note>
  <para>
   Предполагаемое использование <link linkend="object.serialize">__serialize()</link> для определения удобного для сериализации 
   произвольного представления объекта. Элементы массива могут соответствовать свойствам объекта, но это не обязательно.
  </para>
  <para>
   И наоборот, <function>unserialize</function> проверяет 
   наличие магической функции <link linkend="object.unserialize">__unserialize()</link>. 
   Если функция присутствует, ей будет передан 
   восстановленный массив, который был возвращён из <link linkend="object.serialize">__serialize()</link>. Затем 
   он может восстановить свойства объекта из этого массива соответствующим образом.
  </para>
  <note>
   <para>
    Если и <link linkend="object.unserialize">__unserialize()</link> и <link linkend="object.wakeup">__wakeup()</link>
    определены в одном и том же объекте, только будет вызван только метод <link linkend="object.unserialize">__unserialize()</link>.
    <link linkend="object.wakeup">__wakeup()</link> будет игнорироваться.
   </para>
  </note>
  <note>
   <para>
    Функция доступна с PHP 7.4.0.
   </para>
  </note>
  <example>
   <title>Сериализация и десериализация</title>
   <programlisting role="php">
<![CDATA[
<?php
class Connection
{
    protected $link;
    private $dsn, $username, $password;

    public function __construct($dsn, $username, $password)
    {
        $this->dsn = $dsn;
        $this->username = $username;
        $this->password = $password;
        $this->connect();
    }

    private function connect()
    {
        $this->link = new PDO($this->dsn, $this->username, $this->password);
    }

    public function __serialize(): array
    {
        return [
          'dsn' => $this->dsn,
          'user' => $this->username,
          'pass' => $this->password,
        ];
    }

    public function __unserialize(array $data): void
    {
        $this->dsn = $data['dsn'];
        $this->username = $data['user'];
        $this->password = $data['pass'];

        $this->connect();
    }
}?>
]]>
    </programlisting>
  </example>
 </sect2>
 
 <sect2 xml:id="language.oop5.magic.tostring">
  <title><link linkend="object.tostring">__toString()</link></title>
  <methodsynopsis xml:id="object.tostring">
   <modifier>public</modifier> <type>string</type><methodname>__toString</methodname>
   <void/>
  </methodsynopsis>
  <para>
   Метод <link linkend="object.tostring">__toString()</link> позволяет классу решать,
   как он должен реагировать при преобразовании в
   строку. Например, что вывести при выполнении <literal>echo $obj;</literal>. Этот метод
   должен возвращать строку, иначе произойдёт фатальная ошибка уровня
   <constant>E_RECOVERABLE_ERROR</constant>.
  </para>
  <warning>
   <simpara>
    Нельзя выбросить исключение из метода <link linkend="object.tostring">__toString()</link> до PHP 7.4.0. Это приведёт к фатальной ошибке.
   </simpara>
  </warning>
  <example>
   <title>Простой пример</title>
   <programlisting role="php">
<![CDATA[
<?php
// Объявление простого класса
class TestClass
{
    public $foo;

    public function __construct($foo)
    {
        $this->foo = $foo;
    }

    public function __toString()
    {
        return $this->foo;
    }
}

$class = new TestClass('Привет');
echo $class;
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
Привет
]]>
   </screen>
  </example>
  <para>
   Стоит отметить, что до PHP 5.2.0 метод <link linkend="object.tostring">__toString()</link>
   вызывался только непосредственно в сочетании с
   <function>echo</function> или <function>print</function>.
   Начиная с PHP 5.2.0, он вызывается в любом строчном контексте
   (например, в <function>printf</function> с модификатором
   <literal>%s</literal>), но не в контексте других типов (например,
   с <literal>%d</literal> модификатором).
   Начиная с PHP 5.2.0, преобразование объекта в строку при отсутствии
   метода <link linkend="object.tostring">__toString()</link>
   вызывает ошибку <constant>E_RECOVERABLE_ERROR</constant>.
  </para>
 </sect2>
 
 <sect2 xml:id="language.oop5.magic.invoke">
  <title><link linkend="object.invoke">__invoke()</link></title>
  <methodsynopsis xml:id="object.invoke">
   <type>mixed</type><methodname>__invoke</methodname>
   <methodparam rep="repeat"><parameter>values</parameter></methodparam>
  </methodsynopsis>
  <para>
   Метод <link linkend="object.invoke">__invoke()</link>
   вызывается, когда скрипт пытается выполнить объект как функцию.
  </para>
  <note>
   <para>
    Данный метод доступен начиная с PHP 5.3.0.
   </para>
  </note>
  <example>
   <title>Использование <link linkend="object.invoke">__invoke()</link></title>
   <programlisting role="php">
<![CDATA[
<?php
class CallableClass
{
    public function __invoke($x)
    {
        var_dump($x);
    }
}
$obj = new CallableClass;
$obj(5);
var_dump(is_callable($obj));
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
int(5)
bool(true)
]]>
   </screen>
  </example>
 </sect2>
 
 <sect2 xml:id="language.oop5.magic.set-state">
  <title><link linkend="object.set-state">__set_state()</link></title>
  <methodsynopsis xml:id="object.set-state">
   <modifier>static</modifier> <type>object</type><methodname>__set_state</methodname>
   <methodparam><type>array</type><parameter>properties</parameter></methodparam>
  </methodsynopsis>
  <para>
   Этот <link linkend="language.oop5.static">статический</link> метод
   вызывается для тех классов, которые экспортируются функцией
   <function>var_export</function> начиная с PHP 5.1.0.
  </para>
  <para>
   Единственный параметр этого метода является массив, содержащий экспортируемые
   свойства в виде <literal>array('property' => value, ...)</literal>.
  </para>
  <example>
   <title>Использование <link linkend="object.set-state">__set_state()</link> (начиная с PHP 5.1.0)</title>
   <programlisting role="php">
<![CDATA[
<?php

class A
{
    public $var1;
    public $var2;

    public static function __set_state($an_array) // С PHP 5.1.0
    {
        $obj = new A;
        $obj->var1 = $an_array['var1'];
        $obj->var2 = $an_array['var2'];
        return $obj;
    }
}

$a = new A;
$a->var1 = 5;
$a->var2 = 'foo';

eval('$b = ' . var_export($a, true) . ';'); // $b = A::__set_state(array(
                                            //    'var1' => 5,
                                            //    'var2' => 'foo',
                                            // ));
var_dump($b);

?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
object(A)#2 (2) {
  ["var1"]=>
  int(5)
  ["var2"]=>
  string(3) "foo"
}
]]>
   </screen>
  </example>
  <note>
   <simpara>
    При экспорте объекта <function>var_export</function> не проверяет,
    реализует ли класс объекта метод <link linkend="object.set-state">__set_state()</link>,
    поэтому повторный импорт таких объектов не будет выполнен, если метод
    __set_state() не реализован. В частности, это относится к некоторым внутренним классам.
   </simpara>
   <simpara>
    Необходимость проверки, реализует ли импортируемый класс метод __set_state(), полностью 
    лежит на разработчике.
   </simpara>
  </note>
 </sect2>
 
 <sect2 xml:id="language.oop5.magic.debuginfo">
  <title><link linkend="object.debuginfo">__debugInfo()</link></title>
  <methodsynopsis xml:id="object.debuginfo">
   <type>array</type><methodname>__debugInfo</methodname>
   <void/>
  </methodsynopsis>
  <para>
   Этот метод вызывается функцией <function>var_dump</function>, когда
   необходимо вывести список свойств объекта. Если этот метод не определён,
   тогда будут выведены все свойства объекта c модификаторами public, protected и private. 
  </para>
  <para>
   Этот метод был добавлен в PHP 5.6.0.
  </para>
  <example>
   <title>Использование <link linkend="object.debuginfo">__debugInfo()</link></title>
   <programlisting role="php">
<![CDATA[
<?php
class C {
    private $prop;

    public function __construct($val) {
        $this->prop = $val;
    }

    public function __debugInfo() {
        return [
            'propSquared' => $this->prop ** 2,
        ];
    }
}

var_dump(new C(42));
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
object(C)#1 (1) {
  ["propSquared"]=>
  int(1764)
}
]]>
   </screen>
  </example>
 </sect2>
</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
