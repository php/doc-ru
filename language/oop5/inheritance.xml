<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 3ddc88b8364f27727a53ba6eb7c9a98f8525f3ce Maintainer: mch Status: ready -->
<!-- Reviewed: yes Maintainer: lex -->
<!-- $Revision$ -->
 <sect1 xml:id="language.oop5.inheritance" xmlns="http://docbook.org/ns/docbook">
  <title>Наследование</title>
  <para>
   Наследование — это хорошо зарекомендовавший себя принцип программирования, и PHP
   использует этот принцип в своей объектной модели. Этот принцип повлияет на то,
   как многие классы и объекты связаны друг с другом.
  </para>
  <para>
   Например, при расширении класса дочерний класс наследует все
   общедоступные и защищённые методы, свойства и константы родительского класса.
   До тех пор пока
   эти методы не будут переопределены, они будут сохранять свою
   исходную функциональность.
  </para>
  <para>
   Это полезно для определения и абстрагирования функциональности и позволяет
   реализовать дополнительную функциональность в похожих объектах без
   необходимости реализовывать всю общую функциональность.
  </para>
  <para>
   Закрытые методы родительского класса недоступны для дочернего класса. В результате
   дочерние классы могут повторно реализовать закрытый метод без учёта обычных
   правил наследования. Однако до PHP 8.0.0 к закрытым методам применялись ограничения
   <literal>final</literal> и <literal>static</literal>. Начиная с PHP 8.0.0,
   единственное ограничение закрытого метода, которое применяется - это конструкторы <literal>private final</literal>,
   поскольку это обычный способ "отключить" конструктор при использовании вместо него статичных фабричных методов.
  </para>
  <para>
   <link linkend="language.oop5.visibility">Видимость</link> методов,
   свойств и констант можно ослабить, например, <literal>защищённый</literal> метод
   может быть помечен как <literal>общедоступный</literal>, но методы не могут быть
   ограничены, например, нельзя пометить <literal>общедоступное</literal> свойство как <literal>закрытое</literal>.
 </para>

  <note>
   <para>
    Если не используется автозагрузка, классы должны быть объявлены до того, как они
 будут использоваться. Если класс расширяет другой, то родительский класс должен быть
 объявлен до наследующего класса. Это правило применяется к классам, которые наследуют
 другие классы или интерфейсы.
   </para>
  </note>

  <sect2 xml:id="language.oop5.inheritance.examples">
   <example xml:id="language.oop5.inheritance.examples.ex1">
    <title>Пример наследования</title>
     <programlisting role="php">
<![CDATA[
<?php

class Foo
{
    public function printItem($string)
    {
        echo 'Foo: ' . $string . PHP_EOL;
    }

    public function printPHP()
    {
        echo 'PHP просто супер.' . PHP_EOL;
    }
}

class Bar extends Foo
{
    public function printItem($string)
    {
        echo 'Bar: ' . $string . PHP_EOL;
    }
}

$foo = new Foo();
$bar = new Bar();
$foo->printItem('baz'); // Выведет: 'Foo: baz'
$foo->printPHP();       // Выведет: 'PHP просто супер'
$bar->printItem('baz'); // Выведет: 'Bar: baz'
$bar->printPHP();       // Выведет: 'PHP просто супер'

?>
]]>
    </programlisting>
   </example>
  </sect2>

 </sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
