<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 969080b59241971cc8d6cb08c3b14d7262e6851d Maintainer: rjhdby Status: ready -->
<!-- Reviewed: no -->
<chapter xml:id="language.attributes" xmlns="http://docbook.org/ns/docbook">
 <title>Атрибуты</title>
 <sect1 xml:id="language.attributes.overview">
  <title>Введение в атрибуты</title>
  <?phpdoc print-version-for="attributes"?>

  <para>
   Атрибуты предлагают возможность добавлять структурированные, машиночитаемые метаданные для
   следующих деклараций в коде: классы, методы, функции, параметры, свойства и константы класса.
   Привязанные метаданные можно получить во время исполнения, используя
   <link linkend="book.reflection">Reflection API</link>.
   Таким образом, атрибуты можно рассматривать как язык конфигурации, встроенный
   непосредственно в код.
  </para>

  <para>
   С помощью атрибутов можно разделить абстрактную реализацию какого-либо
   функционала и особенности его использования в коде. В некотором
   смысле это можно сравнить с разделением интерфейса и его реализаций.
   Но интерфейсы и реализации - это про код, а атрибуты - про добавление
   дополнительной информации и конфигурацию. Интерфейсы могут
   реализовываться только классами, тогда как атрибуты также применимы для
   методов, функций, параметров, свойств и констант классов. Таким образом,
   они представляют собой гораздо более гибкий механизм, чем интерфейсы.
  </para>

  <para>
   Давайте разберём использование атрибутов на простом примере реализации опциональных
   методов для интерфейса . Примем, что интерфейс <literal>ActionHandler</literal> описывает некую
   операцию в приложении. Одни реализации этого интерфейса требуют
   предварительной настройки, а другие - нет. И вместо того, чтобы вносить в
   интерфейс <literal>ActionHandler</literal> дополнительный метод
   <literal>setUp()</literal>, который для части реализаций будет пустым,
   можно использовать атрибут. Одним из преимуществ этого подхода является то,
   что мы можем использовать атрибут несколько раз.
  </para>

  <example>
   <title>Реализация опциональных методов интерфейса с помощью атрибутов</title>
   <programlisting role="php">
<![CDATA[
<?php
interface ActionHandler
{
    public function execute();
}

#[Attribute]
class SetUp {}

class CopyFile implements ActionHandler
{
    public string $fileName;
    public string $targetDirectory;

    #[SetUp]
    public function fileExists()
    {
        if (!file_exists($this->fileName)) {
            throw new RuntimeException("File does not exist");
        }
    }

    #[SetUp]
    public function targetDirectoryExists()
    {
        if (!file_exists($this->targetDirectory)) {
            mkdir($this->targetDirectory);
        } elseif (!is_dir($this->targetDirectory)) {
            throw new RuntimeException("Target directory $this->targetDirectory is not a directory");
        }
    }

    public function execute()
    {
        copy($this->fileName, $this->targetDirectory . '/' . basename($this->fileName));
    }
}

function executeAction(ActionHandler $actionHandler)
{
    $reflection = new ReflectionObject($actionHandler);

    foreach ($reflection->getMethods() as $method) {
        $attributes = $method->getAttributes(SetUp::class);

        if (count($attributes) > 0) {
            $methodName = $method->getName();

            $actionHandler->$methodName();
        }
    }

    $actionHandler->execute();
}

$copyAction = new CopyFile();
$copyAction->fileName = "/tmp/foo.jpg";
$copyAction->targetDirectory = "/home/user";

executeAction($copyAction);
]]>
   </programlisting>
  </example>
 </sect1>

 <sect1 xml:id="language.attributes.syntax">
  <title>Синтаксис атрибутов</title>

  <para>
   Синтаксис атрибутов состоит из нескольких частей. Во-первых, декларация
   атрибута всегда начинается с символа <literal>#[</literal> и заканчивается
   <literal>]</literal>. Внутри перечисление из одного или более, разделённых запятой, атрибутов.
   Атрибуты можно задавать с помощью неполных, полных и абсолютных имён, как описано в разделе
   <link linkend="language.namespaces.basics">Использование пространства имён: основы</link>.
   Аргументы атрибутов опциональны, но если они есть, то заключаются в скобки <literal>()</literal>.
   Аргументы атрибутов могут быть либо конкретными значениями, либо константными выражениями. Для аргументов можно
   использовать как позиционный синтаксис, так и синтаксис именованных аргументов.
  </para>

  <para>
   Когда атрибут запрашивается с помощью Reflection API, его имя трактуется как имя класса, а аргументы передаются в его конструктор.
   Таким образом, для каждого атрибута должен существовать соответствующий класс.
  </para>

  <example>
   <title>Синтаксис атрибутов</title>

   <programlisting role="php">
<![CDATA[
<?php
// a.php
namespace MyExample;

use Attribute;

#[Attribute]
class MyAttribute
{
    const VALUE = 'value';

    private $value;

    public function __construct($value = null)
    {
        $this->value = $value;
    }
}

// b.php

namespace Another;

use MyExample\MyAttribute;

#[MyAttribute]
#[\MyExample\MyAttribute]
#[MyAttribute(1234)]
#[MyAttribute(value: 1234)]
#[MyAttribute(MyAttribute::VALUE)]
#[MyAttribute(array("key" => "value"))]
#[MyAttribute(100 + 200)]
class Thing
{
}

#[MyAttribute(1234), MyAttribute(5678)]
class AnotherThing
{
}
]]>
   </programlisting>
  </example>
 </sect1>


 <sect1 xml:id="language.attributes.reflection">
  <title>Чтение атрибутов с помощью Reflection API</title>

  <para>
   Для доступа к атрибутам классов, методов, функций, параметров, свойств и констант класса, в Reflection API
   присутствует метод <function>getAttributes</function> для каждого из перечисленных объектов рефлексии.
   Этот метод возвращает массив экземпляров <classname>ReflectionAttribute</classname>, у каждого из которых
   можно запросить имя атрибута и его аргументы, а также инстанцирование объекта, представляющего атрибут.
  </para>

  <para>
   Такое отделение свойств атрибута от явного инстанцирования даёт программисту более полный контроль над
   обработкой ошибок, связанных с отсутствующим классом атрибута и некорректностью его аргументов.
   Объект атрибута будет создан и проверен на корректность аргументов только после вызова
   <function>ReflectionAttribute::newInstance</function>, не раньше.
  </para>

  <example>
   <title>Чтение атрибутов с помощью Reflection API</title>

   <programlisting role="php">
<![CDATA[
<?php

#[Attribute]
class MyAttribute
{
    public $value;

    public function __construct($value)
    {
        $this->value = $value;
    }
}

#[MyAttribute(value: 1234)]
class Thing
{
}

function dumpAttributeData($reflection) {
    $attributes = $reflection->getAttributes();

    foreach ($attributes as $attribute) {
       var_dump($attribute->getName());
       var_dump($attribute->getArguments());
       var_dump($attribute->newInstance());
    }
}

dumpAttributeData(new ReflectionClass(Thing::class));
/*
string(11) "MyAttribute"
array(1) {
  ["value"]=>
  int(1234)
}
object(MyAttribute)#3 (1) {
  ["value"]=>
  int(1234)
}
*/

]]>
    </programlisting>
   </example>

   <para>
    Вместо того, чтобы последовательно перебирать все атрибуты объекта рефлексии,
    можно указать имя класса в качестве аргумента и получить только подходящие атрибуты.
   </para>

   <example>
    <title>Чтение конкретных атрибутов с помощью Reflection API</title>

    <programlisting role="php">
<![CDATA[
<?php

function dumpMyAttributeData($reflection) {
    $attributes = $reflection->getAttributes(MyAttribute::class);

    foreach ($attributes as $attribute) {
       var_dump($attribute->getName());
       var_dump($attribute->getArguments());
       var_dump($attribute->newInstance());
    }
}

dumpAttributeData(new ReflectionClass(Thing::class));
]]>
    </programlisting>
   </example>
  </sect1>

  <sect1 xml:id="language.attributes.classes">
   <title>Объявление классов атрибутов</title>

   <para>
    Создавать классы для атрибутов не обязательно, но крайне рекомендуется.
    В самом простом случае, требуется просто пустой класс с атрибутом <literal>#[Attribute]</literal>, который
    можно импортировать из глобального пространства имён с помощью оператора use.
   </para>

   <example>
    <title>Ограничение допустимых целей для использования атрибута</title>

    <programlisting role="php">
<![CDATA[
<?php

namespace Example;

use Attribute;

#[Attribute]
class MyAttribute
{
}
]]>
    </programlisting>
   </example>

   <para>
    Для ограничения того, с каким типом деклараций можно использовать конкретный атрибут, можно передать
    битовую маску первым параметром в <literal>#[Attribute]</literal>.
   </para>

   <example>
    <title>Simple Attribute Class</title>

    <programlisting role="php">
<![CDATA[
<?php

namespace Example;

use Attribute;

#[Attribute(Attribute::TARGET_METHOD | Attribute::TARGET_FUNCTION)]
class MyAttribute
{
}
]]>
    </programlisting>

    <para>
     После этого, аннотирование атрибутом <classname>MyAttribute</classname> чего либо, отличного от метода или функции приведёт
     к выбросу исключения при вызове <function>ReflectionAttribute::newInstance</function>
    </para>
   </example>

   <para>
    По умолчанию, атрибут можно использовать только один раз для каждой сущности. Если нужна возможность указывать
    несколько одинаковых атрибутов для одной сущности - можно выставить соответствующий флаг в битовой маске
    для декларации <literal>#[Attribute]</literal>.
   </para>

   <example>
    <title>Использование IS_REPEATABLE для разрешения использовать атрибут в объявлении несколько раз</title>

    <programlisting role="php">
<![CDATA[
<?php

namespace Example;

use Attribute;

#[Attribute(Attribute::TARGET_METHOD | Attribute::TARGET_FUNCTION | Attribute::IS_REPEATABLE)]
class MyAttribute
{
}
]]>
    </programlisting>

   </example>
  </sect1>
</chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
