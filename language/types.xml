<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 1ffbadf2906a5c85d2f9437b87da3e204ea41b7a Maintainer: shein Status: ready -->
<!-- Reviewed: yes -->
<chapter xml:id="language.types" xmlns="http://docbook.org/ns/docbook">
 <title>Типы</title>

 <sect1 xml:id="language.types.intro">
  <title>Введение</title>

  <simpara>
   PHP поддерживает десять простых типов.
  </simpara>

  <para>
   Четыре скалярных типа:
  </para>

  <itemizedlist>

   <listitem>
    <simpara>
     <type>bool</type>
    </simpara>
   </listitem>

   <listitem>
    <simpara>
     <type>int</type>
    </simpara>
   </listitem>

   <listitem>
    <simpara>
     <type>float</type> (число с плавающей точкой, также известное как <type>double</type>)
    </simpara>
   </listitem>

   <listitem>
    <simpara>
     <type>string</type>
    </simpara>
   </listitem>

  </itemizedlist>

  <para>
   Четыре смешанных типа:
  </para>

  <itemizedlist>

   <listitem>
    <simpara>
     <type>array</type>
    </simpara>
   </listitem>

   <listitem>
    <simpara>
     <type>object</type>
    </simpara>
   </listitem>

   <listitem>
    <simpara>
     <type>callable</type>
    </simpara>
   </listitem>

   <listitem>
    <simpara>
     <type>iterable</type>
    </simpara>
   </listitem>

  </itemizedlist>

  <para>
   И, наконец, два специальных типа:
  </para>

  <itemizedlist>

   <listitem>
    <simpara>
     <type>resource</type>
    </simpara>
   </listitem>

   <listitem>
    <simpara>
     <type>NULL</type>
    </simpara>
   </listitem>

  </itemizedlist>

  <simpara>
   Вы также можете найти несколько упоминаний типа двойной точности (double).
   Рассматривайте его как число с плавающей точкой, два имени существуют только
   по историческим причинам.
  </simpara>

  <simpara>
   Как правило, программист не устанавливает тип переменной;
   обычно это делает PHP во время выполнения программы в
   зависимости от контекста, в котором используется переменная.
  </simpara>

  <note>
   <simpara>
    Если вы желаете проверить тип и значение определённого
    <link linkend="language.expressions">выражения</link>, используйте
    <function>var_dump</function>.
   </simpara>

   <para>
    Если же вам для отладки необходимо просто удобочитаемое представление
    типа, используйте <function>gettype</function>. Чтобы проверить на
    определённый тип, <emphasis>не</emphasis> используйте <function>gettype</function>,
    применяйте для этого функции <literal>is_<replaceable>type</replaceable></literal>.
    Вот несколько примеров:
   </para>

   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
$a_bool = TRUE;   // логический
$a_str  = "foo";  // строковый
$a_str2 = 'foo';  // строковый
$an_int = 12;     // целочисленный

echo gettype($a_bool); // выводит: boolean
echo gettype($a_str);  // выводит: string

// Если это целое, увеличить на четыре
if (is_int($an_int)) {
    $an_int += 4;
}

// Если $a_bool - это строка, вывести её
// (ничего не выводит)
if (is_string($a_bool)) {
    echo "Строка: $a_bool";
}
?>
]]>
    </programlisting>
   </informalexample>
  </note>

  <simpara>
   Если вы хотите принудительно изменить тип переменной, вы можете либо
   <link linkend="language.types.typecasting">привести</link>
   переменную, либо использовать функцию <function>settype</function>.
  </simpara>

  <simpara>
   Обратите внимание, что переменная, в зависимости от её типа в данный
   момент, в определённых ситуациях может иметь разные значения.
   Более подробную информацию смотрите в разделе
   <link linkend="language.types.type-juggling">Манипуляции с типами</link>.
   Также вам, возможно, будет интересно посмотреть
   <link linkend="types.comparisons">таблицы сравнения типов</link>,
   поскольку в них приведены примеры различных сравнений, связанных с типами.
  </simpara>
 </sect1>

 &language.types.boolean;
 &language.types.integer;
 &language.types.float;
 &language.types.string;
 &language.types.numeric-strings;
 &language.types.array;
 &language.types.iterable;
 &language.types.object;
 &language.types.resource;
 &language.types.null;
 &language.types.callable;
 &language.types.declarations;
 &language.types.type-juggling;

</chapter>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
