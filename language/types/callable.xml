<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: e587d0655e426f97b3fcb431453da5030e743b23 Maintainer: rjhdby Status: ready -->
<!-- Reviewed: no -->
<sect1 xml:id="language.types.callable">
 <title>Callable как выражение или псевдотип, и callback-функции</title>

 <para>
  Тип callback-функций, или функций обратного вызова, в параметрах и значении возврата
  функций и методов, разрешается объявлять как <type>callable</type>.
 </para>

 <para>
  Функции наподобие <function>call_user_func</function>
  или <function>usort</function> принимают пользовательские
  callback-функции как параметры. Callback-функциями бывают как простые
  функции, так и методы объектов, включая статические методы классов.
 </para>

 <sect2 xml:id="language.types.callable.passing">
  <title>Передача callable-выражений</title>

  <para>
   PHP-функция передаётся по имени, как строка. Разрешается передавать
   встроенные или пользовательские функции, но не языковые конструкции:
   <function>array</function>, <function>echo</function>,
   <function>empty</function>, <function>eval</function>,
   <function>exit</function>, <function>isset</function>,
   <function>list</function>, <function>print</function>
   или <function>unset</function>.
  </para>

  <para>
   Метод объекта (<type>object</type>) передаётся как массив, в котором
   в элементе с индексом 0 содержится объект, а в элементе с индексом 1 — название метода.
   Доступ к закрытым и защищённым методам разрешается изнутри класса.
  </para>

  <para>
   Статические методы класса передаются как массив,
   в котором в элементе с индексом 0 вместо передачи объекта указывают название класса,
   или как строка вида <literal>'ClassName::methodName'</literal>,
   при этом объект класса не создают.
  </para>

  <para>
   Кроме пользовательских функций, в callback-параметр разрешается передавать
   <link linkend="functions.anonymous">анонимные</link>
   и <link linkend="functions.arrow">стрелочные функции</link>.
  </para>

  <note>
   <para>
    Начиная с PHP 8.1.0 анонимные функции разрешается создавать
    <link linkend="functions.first_class_callable_syntax">синтаксисом callable-выражений как объектов первого класса</link>.
   </para>
  </note>

  <para>
   Объект, в классе которого реализовали магический метод
   <link linkend="object.invoke">__invoke()</link>, разрешается передавать в callback-параметр.
  </para>

  <para>
   <example>
    <title>Примеры callback-функций</title>
    <programlisting role="php">
<![CDATA[
<?php

// Пример callback-функции
function my_callback_function()
{
    echo "Привет, мир!", PHP_EOL;
}

// Пример callback-метода
class MyClass
{
    static function myCallbackMethod()
    {
        echo "Привет, мир!", PHP_EOL;
    }
}

// Тип 1: Простой вызов callback-функции
call_user_func('my_callback_function');

// Тип 2: Вызов статического метода класса
call_user_func(array('MyClass', 'myCallbackMethod'));

// Тип 3: Вызов метода объекта класса
$obj = new MyClass();
call_user_func(array($obj, 'myCallbackMethod'));

// Тип 4: Вызов статического метода класса
call_user_func('MyClass::myCallbackMethod');

// Тип 5: Вызов статического метода родственного класса
class A
{
    public static function who()
    {
        echo 'A', PHP_EOL;
    }
}

class B extends A
{
    public static function who()
    {
        echo 'B', PHP_EOL;
    }
}

call_user_func(array('B', 'parent::who')); // Выводит: A.
                                           // Начиная с PHP 8.2.0 callable-выражения
                                           // с относительными названиями методов устарели

// Тип 6: Объекты, классы которых реализуют магический метод __invoke(),
// разрешается передавать как callable-объекты
class C
{
    public function __invoke($name)
    {
        echo 'Привет, ', $name, PHP_EOL;
    }
}

$c = new C();
call_user_func($c, 'PHP!');

?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   <example>
    <title>
     Пример передачи замыкания (объекта класса Closure) в качестве callback-функции
    </title>
    <programlisting role="php">
<![CDATA[
<?php

// Замыкание
$double = function($a) {
    return $a * 2;
};

// Диапазон чисел
$numbers = range(1, 5);

// Передаём замыкание как callback-функцию,
// чтобы удвоить каждый элемент диапазона
$new_numbers = array_map($double, $numbers);

print implode(' ', $new_numbers);

?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
2 4 6 8 10
]]>
    </screen>
   </example>
  </para>

  &note.func-callback-exceptions;
 </sect2>

</sect1>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
