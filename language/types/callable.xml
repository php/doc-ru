<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: c897161ca5a62a887295c695adc161b8fde5d772 Maintainer: rjhdby Status: ready -->
<!-- Reviewed: no -->
<sect1 xml:id="language.types.callable">
 <title>Callable и callback-функции</title>

 <para>
  Callback-функции разрешено
  обозначать объявлением типа <type>callable</type>.
 </para>

 <para>
  Функции вроде <function>call_user_func</function> или
  <function>usort</function> принимают определённые пользователем
  callback-функции в качестве параметра. Callback-функциями бывают как простые
  функции, так и методы объектов, включая статические методы классов.
 </para>

 <sect2 xml:id="language.types.callable.passing">
  <title>Передача</title>

  <para>
   PHP-функция передаётся по имени в виде строки. Разрешено передавать
   любую встроенную или пользовательскую функцию, исключая языковые конструкции:
   <function>array</function>, <function>echo</function>,
   <function>empty</function>, <function>eval</function>,
   <function>exit</function>, <function>isset</function>,
   <function>list</function>, <function>print</function> или
   <function>unset</function>.
  </para>

  <para>
   Метод созданного объекта (<type>object</type>) передаётся как массив, который
   в индексе 0 содержит — объект, а в индексе 1 — название метода.
   Изнутри класса разрешён доступ к закрытым и защищённым методам.
  </para>

  <para>
   Статические методы класса тоже передаются — или как массив,
   в индексе 0 которого вместо передачи объекта указывают название класса,
   или как строка вида <literal>'ClassName::methodName'</literal>.
  </para>

  <para>
   Кроме пользовательских функций, в callback-параметр разрешено передавать
   <link linkend="functions.anonymous">анонимные</link>
   и <link linkend="functions.arrow">стрелочные функции</link>.
  </para>

  <note>
   <para>
    Начиная с PHP 8.1.0 анонимные функции разрешено создавать
    <link linkend="functions.first_class_callable_syntax">синтаксисом callable-объектов первого класса</link>.
   </para>
  </note>

  <para>
   Объекты, которые реализуют магический метод <link linkend="object.invoke">__invoke()</link>,
   разрешно передавать в callback-параметр.
  </para>

  <para>
   <example>
    <title>
     Пример callback-функции
    </title>
    <programlisting role="php">
<![CDATA[
<?php

// Пример callback-функции
function my_callback_function() {
    echo 'Привет, мир!';
}

// Пример callback-метода
class MyClass {
    static function myCallbackMethod() {
        echo 'Привет, мир!';
    }
}

// Тип 1: Простой callback
call_user_func('my_callback_function');

// Тип 2: Вызов статического метода класса
call_user_func(array('MyClass', 'myCallbackMethod'));

// Тип 3: Вызов метода класса
$obj = new MyClass();
call_user_func(array($obj, 'myCallbackMethod'));

// Тип 4: Вызов статического метода класса
call_user_func('MyClass::myCallbackMethod');

// Тип 5: Вызов относительного статического метода
class A {
    public static function who() {
        echo "A\n";
    }
}

class B extends A {
    public static function who() {
        echo "B\n";
    }
}

call_user_func(array('B', 'parent::who')); // A, устарело, начиная с PHP 8.2.0

// Тип 6: Объекты, которые реализуют магический метод __invoke, разрешено использовать как callable-объекты
class C {
    public function __invoke($name) {
        echo 'Привет ', $name, "\n";
    }
}

$c = new C();
call_user_func($c, 'PHP!');

?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   <example>
    <title>
     Пример передачи замыкания в callback-параметр
    </title>
    <programlisting role="php">
<![CDATA[
<?php

// Замыкание
$double = function($a) {
    return $a * 2;
};

// Диапазон чисел
$numbers = range(1, 5);

// Передаём в параметр замыкание в качестве callback-функции
// для удвоения каждого элемента в созданном выше диапазоне
$new_numbers = array_map($double, $numbers);

print implode(' ', $new_numbers);

?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
2 4 6 8 10
]]>
    </screen>
   </example>
  </para>

  &note.func-callback-exceptions;
 </sect2>

</sect1>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
