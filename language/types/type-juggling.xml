<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: e587d0655e426f97b3fcb431453da5030e743b23 Maintainer: shein Status: ready -->
<!-- Reviewed: no -->
<sect1 xml:id="language.types.type-juggling">
 <title>Жонглирование типами</title>

 <simpara>
  PHP не требует явного определения типа при объявлении переменной.
  Тип переменной определится значением, которое хранит переменная,
  если тип переменной не определили.
  То есть, если переменной <varname>$var</varname> присвоили строковое значение (<type>string</type>),
  тип переменной <varname>$var</varname> — строка (<type>string</type>).
  Тип переменной изменится на целое число (<type>int</type>),
  если позже переменной <varname>$var</varname> присвоят целочисленное значение (<type>int</type>).
 </simpara>

 <para>
  В ряде контекстов PHP попытается автоматически преобразовать
  тип значения в другой. Переменные существуют в следующих контекстах:
  <itemizedlist>
   <listitem>
    <simpara>Числовой</simpara>
   </listitem>
   <listitem>
    <simpara>Строчный</simpara>
   </listitem>
   <listitem>
    <simpara>Логический</simpara>
   </listitem>
   <listitem>
    <simpara>Контекст целых чисел и строк</simpara>
   </listitem>
   <listitem>
    <simpara>Сравнительный</simpara>
   </listitem>
   <listitem>
    <simpara>Контекст функций</simpara>
   </listitem>
  </itemizedlist>
 </para>

 <note>
  <simpara>
   Когда значение требуется интерпретировать как другой тип,
   само значение <emphasis>не</emphasis> изменяет типы.
  </simpara>
 </note>

 <simpara>
  Как заставить PHP оценивать переменную как конкретный тип, рассказывает раздел
  «<link linkend="language.types.typecasting">Приведение типов</link>».
  Описание функции <function>settype</function> объясняет, как изменить тип переменной.
 </simpara>

 <sect2>
  <title>Числовой контекст</title>

  <simpara>
   Числовой контекст возникает при работе с
   <link linkend="language.operators.arithmetic">арифметическими операторами</link>.
  </simpara>

  <simpara>
   В этом контексте оба операнда интерпретируются как число с плавающей точкой (<type>float</type>)
   и результатом станет число с плавающей точкой (<type>float</type>),
   если один из операндов — число с плавающей точкой (<type>float</type>)
   (или не интерпретируется как целое число (<type>int</type>)).
   В противном случае операнды интерпретируются как целое число (<type>int</type>)
   и результатом также станет целое число (<type>int</type>).
   С PHP 8.0.0 выбрасывается исключение <classname>TypeError</classname>,
   если не получается интерпретировать хотя бы один операнд.
  </simpara>
 </sect2>

 <sect2>
  <title>Строчный контекст</title>

  <simpara>
   Строчный контекст возникает при работе с языковыми конструкциями <function>echo</function>,
   <function>print</function>, при <link linkend="language.types.string.parsing">интерполяции строк</link>
   или строковом <link linkend="language.operators.string">операторе конкатенации</link>.
  </simpara>

  <simpara>
   В этом контексте значение интерпретируется как значение <type>string</type>.
   PHP выбросит ошибку <classname>TypeError</classname>,
   если не получится интерпретировать значение.
   До версии PHP 7.4.0 выдавалась ошибка уровня <constant>E_RECOVERABLE_ERROR</constant>.
  </simpara>
 </sect2>

 <sect2>
  <title>Логический контекст</title>

  <simpara>
   Логический контекст возникает при работе с условными операторами,
   <link linkend="language.operators.comparison.ternary">тернарным оператором</link>
   или <link linkend="language.operators.logical">логическими операторами</link>.
  </simpara>

  <simpara>
   В этом контексте значение интерпретируется как логическое значение (<type>bool</type>).
  </simpara>
 </sect2>

 <sect2>
  <title>Контекст целых чисел и строк</title>

  <simpara>
   Контекст целых чисел и строк возникает при работе
   <link linkend="language.operators.bitwise">с побитовыми операторами</link>.
  </simpara>

  <simpara>
   В этом контексте результатом станет значение <type>string</type>,
   если каждый операнд принадлежит типу <type>string</type>,
   иначе операнды интерпретируются как значения <type>int</type>
   и результатом также становится тип <type>int</type>.
   Начиная с версии 8.0.0 PHP выбрасывает ошибку <classname>TypeError</classname>,
   если не получается интерпретировать хотя бы один операнд.
  </simpara>
 </sect2>

 <sect2>
  <title>Сравнительный контекст</title>

  <simpara>
   Сравнительный контекст возникает при работе
   с <link linkend="language.operators.comparison">операторами сравнения</link>.
  </simpara>

  <simpara>
   Преобразования типов, которые происходят в этом контексте, объясняет
   <link linkend="language.operators.comparison.types">таблица сравнения типов</link>
   раздела «Операторы сравнения».
  </simpara>
 </sect2>

 <sect2 xml:id="language.types.type-juggling.function">
  <title>Контекст функций</title>

  <simpara>
   Контекст функций возникает, когда значение передаётся типизированному параметру,
   свойству или возвращается из функции, которая объявляет тип возвращаемого значения.
  </simpara>

  <para>
   В контексте функции на значение накладывается требование —
   соответствовать тому типу, который объявили.
   Исключение составляют два случая.
   Первый: целое число преобразовывается в число с плавающей точкой,
   если тип значения — целое число (<type>int</type>),
   а тип объявили как число с плавающей точкой (<type>float</type>).

   Второй: значение преобразовывается в принимаемое скалярное значение,
   если: а) тип объявили как <emphasis>скалярный</emphasis>,
   б) значение доступно для преобразования в скалярный тип
   и в) активен режим нестрогой типизации,
   в котором PHP работает по умолчанию.
   Описание такого поведения даёт следующий параграф.
  </para>

  <warning>
   <simpara>
    <link linkend="functions.internal">Встроенные функции</link> автоматически
    приводят значение &null; к скалярным типам,
    это поведение <emphasis>УСТАРЕЛО</emphasis> с PHP 8.1.0.
   </simpara>
  </warning>

  <sect3 xml:id="language.types.type-juggling.function.simple">
   <title>
    Типизация при объявлении простых типов
    в режиме нестрогой типизации
   </title>
   <itemizedlist>
    <listitem>
     <simpara>
      Объявление типа <type>bool</type>:
      значение интерпретируется как логическое значение (<type>bool</type>).
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      Объявление типа <type>int</type>:
      значение интерпретируется как целое число (<type>int</type>),
      если интерпретатор точно определил характер преобразования.
      Например, когда строка —
      <link linkend="language.types.numeric-strings">числовая строка</link>.
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      Объявление типа <type>float</type>:
      значение интерпретируется как число с плавающей точкой (<type>float</type>),
      если интерпретатор точно определил характер преобразования.
      Например, когда строка —
      <link linkend="language.types.numeric-strings">числовая строка</link>.
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      Объявление типа <type>string</type>:
      значение интерпретируется как строка (<type>string</type>).
     </simpara>
    </listitem>
   </itemizedlist>
  </sect3>

  <sect3 xml:id="language.types.type-juggling.function.union">
   <title>
    Типизация при объединении типов
    в режиме нестрогой типизации
   </title>
   <para>
    Объявления скалярных типов
    подвергаются ограниченному неявному приведению типов,
    если директивой <literal>strict_types</literal> не включили
    режим строгой типизации.
    Если точный тип значения — не часть объединённого типа,
    то целевой тип выбирается из списка в порядке убывания приоритета:

    <orderedlist>
     <listitem>
      <simpara>
       <type>int</type>
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       <type>float</type>
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       <type>string</type>
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       <type>bool</type>
      </simpara>
     </listitem>
    </orderedlist>

    Интерпретатор выбирает тип, если тип присутствует в объединении типов
    и значение получается привести к типу в соответствии с действующей
    семантикой проверки типов PHP.
    В противном случае интерпретатор выбирает следующий по порядку тип.
   </para>

   <caution>
    <para>
     В качестве исключения: если значение — строка,
     а объединение типов состоит из целого число (int) и числа с плавающей точкой (float),
     интерпретатор определит предпочтительный тип действующей семантикой
     <link linkend="language.types.numeric-strings">числовой строки</link>.
     Например, для значения <literal>«42»</literal> выберет целое число (<type>int</type>),
     а для значения <literal>«42.0»</literal> — число с плавающей точкой (<type>float</type>).
    </para>
   </caution>

   <note>
    <para>
     Типы, которые не входят в список предпочтений, не станут целями
     для неявного приведения. Говоря конкретнее, никакого неявного приведения к типам
     <type>null</type>, <type>false</type> и <type>true</type> не выполняется.
    </para>
   </note>

   <example>
    <title>
     Пример приведения типов к типу из объединения типов
    </title>
    <programlisting>
<![CDATA[
<?php

// int|string
42    --> 42          // Точный тип
"42"  --> "42"        // Точный тип
new ObjectWithToString --> "Результат работы метода __toString()"
                      // Объект несовместим с типом int, переход к типу string
42.0  --> 42          // Тип float совместим с типом int
42.1  --> 42          // Тип float совместим с типом int
1e100 --> "1.0E+100"  // Тип float слишком велик для типа int, переход к типу string
INF   --> "INF"       // Тип float слишком велик для типа int, переход к типу string
true  --> 1           // Тип bool совместим с типом int
[]    --> TypeError   // Массив несовместим с типами int или string

// int|float|bool
"45"    --> 45        // Целочисленная числовая строка, int
"45.0"  --> 45.0      // Строка с числом с плавающей точкой, float

"45X"   --> true      // Нечисловая строка, переход к типу bool
""      --> false     // Нечисловая строка, переход к типу bool
"X"     --> true      // Нечисловая строка, переход к типу bool
[]      --> TypeError // Массив несовместим с типами int, float или bool

?>
]]>
    </programlisting>
   </example>
  </sect3>

 </sect2>

 <sect2 xml:id="language.types.typecasting">
  <title>Приведение типов</title>

  <simpara>
   Приведение типов преобразовывает значение в тип, который выбирает
   интерпретатор, путём записи типа в круглых скобках перед значением, которое
   преобразовывается.
  </simpara>

  <example>
   <title>Приведение типа</title>
   <programlisting role="php">
<![CDATA[
<?php

$foo = 10;            // Переменная $foo содержит целое число
$bar = (bool) $foo;   // Переменная $bar содержит логическое значение

var_dump($bar);

?>
]]>
   </programlisting>
  </example>

  <simpara>
   Разрешены следующие приведения типов:
  </simpara>


  <simplelist>
   <member><literal>(int)</literal> — приведение типа к целому числу (<type>int</type>)</member>
   <member><literal>(bool)</literal> — приведение типа к логическому значению (<type>bool</type>)</member>
   <member><literal>(float)</literal> — приведение типа к числу с плавающей точкой (<type>float</type>)</member>
   <member><literal>(string)</literal> — приведение типа к строке (<type>string</type>)</member>
   <member><literal>(array)</literal> — приведение типа к массиву (<type>array</type>)</member>
   <member><literal>(object)</literal> — приведение типа к объекту (<type>object</type>)</member>
   <member><literal>(unset)</literal> — приведение типа к <type>NULL</type></member>
  </simplelist>

  <note>
   <para>
    <literal>(integer)</literal> — псевдоним приведения типа <literal>(int)</literal>.
    <literal>(boolean)</literal> — псевдоним приведения типа <literal>(bool)</literal>.
    <literal>(binary)</literal> — псевдоним приведения типа <literal>(string)</literal>.
    <literal>(double)</literal> и <literal>(real)</literal> — псевдонимы приведения типа <literal>(float)</literal>.
    Эти приведения не используют каноническое имя типа и не рекомендуются.
   </para>
  </note>

  <warning>
   <simpara>
    Псевдоним приведения типа <literal>(real)</literal> устарел с PHP 8.0.0.
   </simpara>
  </warning>

  <warning>
   <simpara>
    Приведение типа <literal>(unset)</literal> устарело с версии PHP 7.2.0.
    Обратите внимание, что приведение <literal>(unset)</literal> равносильно
    присваиванию переменной или вызову значения <type>NULL</type>.
    Приведение <literal>(unset)</literal> удалили в PHP 8.0.0.
   </simpara>
  </warning>

  <caution>
   <simpara>
    Приведение типа <literal>(binary)</literal> и префикс <literal>b</literal>
    существуют для прямой поддержки.
    Типы <literal>(binary)</literal> и <literal>(string)</literal>
    идентичны, однако, это может измениться, не нужно на это полагаться.
   </simpara>
  </caution>

  <note>
   <para>
    PHP игнорирует пробелы в круглых скобках при приведении типа.
    Поэтому следующие два приведения типов эквивалентны:
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php

$foo = (int) $bar;
$foo = ( int ) $bar;

?>
]]>
     </programlisting>
    </informalexample>
   </para>
  </note>

  <informalexample>
   <simpara>
    Приведение строк (<type>string</type>) и переменных
    к бинарным строкам (<type>string</type>):
   </simpara>

   <programlisting role="php">
<![CDATA[
<?php

$binary = (binary) $string;
$binary = b"binary string";

?>
]]>
   </programlisting>
  </informalexample>

  <simpara>
   Вместо приведения переменной к типу <type>string</type>
   переменную берут в двойные кавычки.
  </simpara>

  <example>
   <title>Механизмы приведения к строке</title>
   <programlisting role="php">
<![CDATA[
<?php

$foo = 10;            // Переменная $foo содержит целое число
$str = "$foo";        // Переменная $str содержит строку
$fst = (string) $foo; // Переменная $fst тоже содержит строку

// Выводит: "они одинаковые"
if ($fst === $str) {
    echo "они одинаковые", PHP_EOL;
}

?>
]]>
   </programlisting>
  </example>

  <para>
   Не всегда ясно, что произойдет при приведении между конкретными типами.
   Дополнительную информацию дают разделы:

   <simplelist>
    <member><link linkend="language.types.boolean.casting">Преобразование типа к логическому значению (boolean)</link></member>
    <member><link linkend="language.types.integer.casting">Преобразование типа к целому числу (integer)</link></member>
    <member><link linkend="language.types.float.casting">Преобразование типа к числу с плавающей точкой (float)</link></member>
    <member><link linkend="language.types.string.casting">Преобразование типа к строке (string)</link></member>
    <member><link linkend="language.types.array.casting">Преобразование типа к массиву (array)</link></member>
    <member><link linkend="language.types.object.casting">Преобразование типа к объекту (object)</link></member>
    <member><link linkend="language.types.resource.casting">Преобразование типа к ресурсу (resource)</link></member>
    <member><link linkend="language.types.null.casting">Преобразование типа к NULL</link></member>
    <member><link linkend="types.comparisons">Таблицы сравнения типов</link></member>
   </simplelist>
  </para>

  <note>
   <simpara>
    Поскольку PHP поддерживает индексацию в строках (<type>string</type>)
    через смещения, используя тот же синтаксис, что и индексация
    в массивах (<type>array</type>), следующий пример справедлив для всех версий PHP:
   </simpara>

   <example>
    <title>Работа с символами строки по индексу</title>
    <programlisting role="php">
<![CDATA[
<?php

$a    = 'car'; // Переменная $a содержит строку
$a[0] = 'b';   // Переменная $a по-прежнему содержит строку
echo $a;       // Выводит: bar

?>
]]>
    </programlisting>
   </example>

   <simpara>
    Дополнительную информацию даёт раздел
    «<link linkend="language.types.string.substr">
     Доступ к символу в строке и его изменение
    </link>».
   </simpara>
  </note>
 </sect2>

</sect1>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
