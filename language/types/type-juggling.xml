<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 183439d468314fc3b1a62cf58feb20330922ed11 Maintainer: shein Status: ready -->
<!-- Reviewed: no -->
<sect1 xml:id="language.types.type-juggling">
 <title>Манипуляции с типами</title>

 <simpara>
  PHP не требует явного определения типа при объявлении переменной.
  Если тип переменной не указан, он будет определён значением, которое она хранит.
  То есть, если переменной <varname>$var</varname> присваивается значение типа строка (<type>string</type>), то
  <varname>$var</varname> изменит тип на строку (<type>string</type>).
  Если после этого переменной <varname>$var</varname> будет присвоено значение типа целое число (<type>int</type>), то она изменит тип на целое число (<type>int</type>).
 </simpara>

 <para>
  В ряде контекстов PHP может попытаться автоматически преобразовать тип значения в другой. Существующие контексты:
  <itemizedlist>
   <listitem>
    <simpara>Числовой</simpara>
   </listitem>
   <listitem>
    <simpara>Строчный</simpara>
   </listitem>
   <listitem>
    <simpara>Логический</simpara>
   </listitem>
   <listitem>
    <simpara>Контекст целых чисел и строк</simpara>
   </listitem>
   <listitem>
    <simpara>Сравнительный</simpara>
   </listitem>
   <listitem>
    <simpara>Контекст функций</simpara>
   </listitem>
  </itemizedlist>
 </para>

 <note>
  <simpara>
   Когда значение нужно интерпретировать как другой тип, само значение <emphasis>не</emphasis> меняет тип.
  </simpara>
 </note>

 <simpara>
  О том, как принудительно установить тип переменной, рассказано в разделе
  «<link linkend="language.types.typecasting">Приведение типа</link>».
  О том, как изменить тип переменной, рассказано в описании функции <function>settype</function>.
 </simpara>

 <sect2>
  <title>Числовой контекст</title>

  <simpara>
   Числовой контекст возникает при работе с
   <link linkend="language.operators.arithmetic">арифметическими операторами</link>.
  </simpara>

  <simpara>
   В этом контексте, если один из операндов — число с плавающей точкой (<type>float</type>)
   (или не интерпретируется как целое число (<type>int</type>)),
   оба операнда интерпретируются как число с плавающей точкой (<type>float</type>)
   и результатом будет число с плавающей точкой (<type>float</type>).
   В противном случае операнды будут интерпретированы как целое число (<type>int</type>)
   и результатом также будет целое число (<type>int</type>).
   Начиная с PHP 8.0.0, если один из операндов не может быть интерпретирован,
   выбрасывается исключение <classname>TypeError</classname>.
  </simpara>
 </sect2>

 <sect2>
  <title>Строчный контекст</title>

  <simpara>
   Строчный контекст возникает при работе с языковыми конструкциями <function>echo</function>,
   <function>print</function>, при <link linkend="language.types.string.parsing">интерполяции строк</link>
   или строковом <link linkend="language.operators.string">операторе конкатенации</link>.
  </simpara>

  <simpara>
   В этом контексте значение будет интерпретироваться как строка (<type>string</type>).
   Если значение не может быть интерпретировано, выбрасывается исключение <classname>TypeError</classname>.
   До версии PHP 7.4.0 выдавалась ошибка уровня <constant>E_RECOVERABLE_ERROR</constant>.
  </simpara>
 </sect2>

 <sect2>
  <title>Логический контекст</title>

  <simpara>
   Логический контекст возникает при работе с условными операторами,
   <link linkend="language.operators.comparison.ternary">тернарным оператором</link>
   или <link linkend="language.operators.logical">логическим оператором</link>.
  </simpara>

  <simpara>
   В данном контексте значение будет интерпретироваться как логическое значение (<type>bool</type>).
  </simpara>
 </sect2>

 <sect2>
  <title>Контекст целых чисел и строк</title>

  <simpara>
   Контекст целых чисел и строк возникает
   при работе с <link linkend="language.operators.bitwise">побитовыми операторами</link>.
  </simpara>

  <simpara>
   В этом контексте, если у всех операндов тип строка (<type>string</type>),
   результат также будет строкой (<type>string</type>).
   В противном случае операнды будут интерпретированы как целое число (<type>int</type>)
   и результат также будет целым числом (<type>int</type>).
   Начиная с PHP 8.0.0, если один из операндов не может быть интерпретирован,
   то будет выброшено исключение <classname>TypeError</classname>.
  </simpara>
 </sect2>

 <sect2>
  <title>Сравнительный контекст</title>

  <simpara>
   Сравнительный контекст возникает при работе
   с <link linkend="language.operators.comparison">операторами сравнения</link>.
  </simpara>

  <simpara>
   Преобразования типов, которые происходят в этом контексте, объяснены
   в <link linkend="language.operators.comparison.types">таблице сравнения типов</link>
   раздела «Операторы сравнения».
  </simpara>
 </sect2>

 <sect2 xml:id="language.types.type-juggling.function">
  <title>Контекст функций</title>

  <simpara>
   Контекст функций возникает, когда значение передаётся типизированному параметру,
   свойству или возвращается из функции, в которой объявлен тип возвращаемого значения.
  </simpara>

  <para>
   В этом контексте значение должно быть значением типа.
   Есть два исключения, первое: если тип значения — целое число (<type>int</type>),
   а объявленный тип — число с плавающей точкой (<type>float</type>),
   то целое число преобразовывается в число с плавающей точкой.
   Второй: если объявленный тип — это <emphasis>скалярный</emphasis> тип,
   значение преобразуемо в скалярный тип и режим строгой типизации активен (по умолчанию),
   значение может быть преобразовано в допустимое скалярное значение.
   Описание такого поведения дано ниже.
  </para>

  <warning>
   <simpara>
    <link linkend="functions.internal">Встроенные функции</link> автоматически подставляют &null; к скалярным типам,
    это поведение <emphasis>УСТАРЕЛО</emphasis> с PHP 8.1.0.
   </simpara>
  </warning>

  <sect3 xml:id="language.types.type-juggling.function.simple">
   <title>Принудительная типизация с простым объявлением типов</title>
   <itemizedlist>
    <listitem>
     <simpara>
      Объявление типа <type>bool</type>: значение интерпретируется как логическое значение (<type>bool</type>).
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      Объявление типа <type>int</type>: значение интерпретируется как целое число (<type>int</type>),
      если преобразование надёжно определимо. Например, когда строка —
      <link linkend="language.types.numeric-strings">числовая строка</link>.
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      Объявление типа <type>float</type>: значение интерпретируется как число с плавающей точкой (<type>float</type>),
      если преобразование надёжно определимо. Например, когда строка —
      <link linkend="language.types.numeric-strings">числовая строка</link>.
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      Объявление типа <type>string</type>: значение интерпретируется как строка (<type>string</type>).
     </simpara>
    </listitem>
   </itemizedlist>
  </sect3>

  <sect3 xml:id="language.types.type-juggling.function.union">
   <title>Принудительная типизация с объединением типов</title>
   <para>
    Когда директива <literal>strict_types</literal> не включена, объявления скалярных типов
    подлежат ограниченному неявному приведению типов.
    Если точный тип значения — не часть объединения,
    то целевой тип выбран из списка в порядке убывания приоритета:

    <orderedlist>
     <listitem>
      <simpara>
       <type>int</type>
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       <type>float</type>
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       <type>string</type>
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       <type>bool</type>
      </simpara>
     </listitem>
    </orderedlist>

    Если тип и существует в объединении и значение может быть приведено к этому типу
    в соответствии с существующей семантикой проверки типов PHP, то PHP выбирает этот тип.
    В противном случае будет выбран следующий по порядку тип.
   </para>

   <caution>
    <para>
     В качестве исключения, если значение — строка,
     а целое число (int) и число с плавающей точкой (float) — это часть объединения,
     предпочтительный тип будет определён существующей семантикой
     <link linkend="language.types.numeric-strings">числовой строки</link>.
     Например, для <literal>«42»</literal> PHP выбирает целое число (<type>int</type>),
     а для <literal>«42.0»</literal> — число с плавающей точкой (<type>float</type>).
    </para>
   </caution>

   <note>
    <para>
     Типы, которые не входят в список предпочтений, не станут целями
     для неявного приведения. Говоря конкретнее, никакого неявного приведения к типам
     <type>null</type>, <type>false</type> и <type>true</type> не будет.
    </para>
   </note>

   <example>
    <title>Пример принудительного включения типов в состав объединения</title>
    <programlisting role="php">
<![CDATA[
<?php

// int|string
42    --> 42          // точный тип
"42"  --> "42"        // точный тип
new ObjectWithToString --> "Результат __toString()"
                      // объект не совместим с int, переход к string
42.0  --> 42          // float совместимый с int
42.1  --> 42          // float совместимый с int
1e100 --> "1.0E+100"  // float слишком велик для типа int, переход к string
INF   --> "INF"       // float слишком велик для типа int, переход к string
true  --> 1           // bool совместимый с int
[]    --> TypeError   // массив не совместим с int или string

// int|float|bool
"45"    --> 45        // int числовая строка
"45.0"  --> 45.0      // float числовая строка

"45X"   --> true      // не числовая строка, переход к bool
""      --> false     // не числовая строка, переход к bool
"X"     --> true      // не числовая строка, переход к bool
[]      --> TypeError // массив не совместимый с int, float или bool
?>
]]>
    </programlisting>
   </example>
  </sect3>

 </sect2>

 <sect2 xml:id="language.types.typecasting">
  <title>Приведение типов</title>

  <simpara>
   Приведение типа преобразовывает значение к выбранному типу,
   записывая тип в круглых скобках перед преобразуемым значением.
  </simpara>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php

$foo = 10;   // $foo — это целое число
$bar = (bool) $foo;   // $bar — это логическое значение
?>
]]>
   </programlisting>
  </informalexample>

  <simpara>
   Разрешены следующие приведения типов:
  </simpara>


  <simplelist>
   <member><literal>(int)</literal> — приведение типа к целому числу (<type>int</type>)</member>
   <member><literal>(bool)</literal> — приведение типа к логическому значению (<type>bool</type>)</member>
   <member><literal>(float)</literal> — приведение типа к числу с плавающей точкой (<type>float</type>)</member>
   <member><literal>(string)</literal> — приведение типа к строке (<type>string</type>)</member>
   <member><literal>(array)</literal> — приведение типа к массиву (<type>array</type>)</member>
   <member><literal>(object)</literal> — приведение типа к объекту (<type>object</type>)</member>
   <member><literal>(unset)</literal> — приведение типа к <type>NULL</type></member>
  </simplelist>

  <note>
   <para>
    <literal>(integer)</literal> — псевдоним приведения типа <literal>(int)</literal>.
    <literal>(boolean)</literal> — псевдоним приведения типа <literal>(bool)</literal>.
    <literal>(binary)</literal> — псевдоним приведения типа <literal>(string)</literal>.
    <literal>(double)</literal> и <literal>(real)</literal> — псевдонимы приведения типа <literal>(float)</literal>.
    Эти приведения не используют каноническое имя типа и не рекомендуются.
   </para>
  </note>

  <warning>
   <simpara>
    Псевдоним приведения типа <literal>(real)</literal> устарел с PHP 8.0.0.
   </simpara>
  </warning>

  <warning>
   <simpara>
    Приведение типа <literal>(unset)</literal> устарело с версии PHP 7.2.0.
    Обратите внимание, что приведение <literal>(unset)</literal> равносильно присвоению переменной или вызову значения <type>NULL</type>.
    Приведение <literal>(unset)</literal> удалено в PHP 8.0.0.
   </simpara>
  </warning>

  <caution>
   <simpara>
   Приведение типа <literal>(binary)</literal> и префикс <literal>b</literal> существуют для прямой поддержки.
   Типы <literal>(binary)</literal> и <literal>(string)</literal> идентичны, однако, это может измениться, не нужно на это полагаться.
   </simpara>
  </caution>

  <note>
   <para>
    PHP игнорирует пробелы в круглых скобках при приведении типа.
    Поэтому следующие два приведения типов эквивалентны:
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php

$foo = (int) $bar;
$foo = ( int ) $bar;
?>
]]>
     </programlisting>
    </informalexample>
   </para>
  </note>

  <informalexample>
   <simpara>
    Приведение строк (<type>string</type>) и переменных к бинарным строкам (<type>string</type>):
   </simpara>

   <programlisting role="php">
<![CDATA[
<?php

$binary = (binary) $string;
$binary = b"binary string";
?>
]]>
   </programlisting>
  </informalexample>

  <note>
   <simpara>
    Вместо приведения переменной к типу строка (<type>string</type>) можно также заключить переменную в двойные кавычки.
   </simpara>

   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php

$foo = 10;            // $foo — целое число
$str = "$foo";        // $str — строка
$fst = (string) $foo; // $fst тоже строка

// Выводит, что «они одинаковые»
if ($fst === $str) {
    echo "они одинаковые";
}
?>
]]>
    </programlisting>
   </informalexample>
  </note>

  <para>
   Может быть неочевидно, что произойдёт при преобразовании между разными типами.
   Получить дополнительную информацию можно в разделах:

   <simplelist>
    <member><link linkend="language.types.boolean.casting">Преобразование типа к логическому значению (boolean)</link></member>
    <member><link linkend="language.types.integer.casting">Преобразование типа к целому числу (integer)</link></member>
    <member><link linkend="language.types.float.casting">Преобразование типа к числу с плавающей точкой (float)</link></member>
    <member><link linkend="language.types.string.casting">Преобразование типа к строке (string)</link></member>
    <member><link linkend="language.types.array.casting">Преобразование типа к массиву (array)</link></member>
    <member><link linkend="language.types.object.casting">Преобразование типа к объекту (object)</link></member>
    <member><link linkend="language.types.resource.casting">Преобразование типа к ресурсу (resource)</link></member>
    <member><link linkend="language.types.null.casting">Преобразование типа к NULL</link></member>
    <member><link linkend="types.comparisons">Таблицы сравнения типов</link></member>
   </simplelist>
  </para>
 </sect2>

 <simplesect>
  <note>
   <simpara>
    Поскольку PHP поддерживает индексацию в строках (<type>string</type>) через смещения, используя тот же синтаксис,
    что и индексация в массивах (<type>array</type>), следующий пример справедлив для всех версий PHP:
   </simpara>

   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php

$a    = 'car'; // $a — строка
$a[0] = 'b';   // $a по-прежнему строка
echo $a;       // bar
?>
]]>
    </programlisting>
   </informalexample>

   <simpara>
    Дополнительную информацию можно найти разделе «<link linkend="language.types.string.substr">Доступ к символу в строке и его изменение</link>».
   </simpara>
  </note>
 </simplesect>

</sect1>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
