<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 0f53e8f37b7bf8513c93e5e2d67e7787f26ed693 Maintainer: sergey Status: ready -->
<!-- Reviewed: no -->
<chapter xml:id="language.enumerations" xmlns="http://docbook.org/ns/docbook">
 <title>Перечисления</title>
 <sect1 xml:id="language.enumerations.overview">
  <title>Обзор перечислений</title>
  <?phpdoc print-version-for="enumerations"?>

  <para>
   Перечисления, или Enums, разрешают разработчику определять настраиваемый тип,
   который ограничен одним значением из дискретного числа возможных.
   Это может быть особенно полезно при определении модели предметной области,
   поскольку даёт «сделать неверные состояния недопустимыми».
  </para>

  <para>
   Перечисления появляются во многих языках программирования с разным набором функций и операций.
   В PHP перечисления — это вид объектов. Сами перечисления — это классы, а все его
   возможные случаи — это объекты одного экземпляра этого класса.
   То есть варианты перечисления — допустимые объекты и их можно использовать везде,
   где можно использовать объект, включая проверки типов.
  </para>

  <para>
   Самый популярный пример перечисления — встроенный логический тип,
   он перечисляем и допускает значения &true; и &false;.
   Перечисления разрешают разработчикам определять свои произвольно надёжные перечисления.
  </para>
 </sect1>
 <sect1 xml:id="language.enumerations.basics">
  <title>Основы перечислений</title>

  <para>
   Перечисления похожи на классы и работают с теми же пространствами имён, что и классы, интерфейсы и трейты.
   Их как и классы можно загружать автоматически. Перечисления определяют новый тип с фиксированным
   ограниченным количеством возможных допустимых значений.
  </para>

  <programlisting role="php">
<![CDATA[
<?php

enum Suit
{
    case Hearts;
    case Diamonds;
    case Clubs;
    case Spades;
}
?>
]]>
  </programlisting>

  <para>
   Это объявление создаёт новый перечислимый тип с именем <literal>Suit</literal>, у которого четыре и только четыре
   допустимых значения: <literal>Suit::Hearts</literal>, <literal>Suit::Diamonds</literal>,
   <literal>Suit::Clubs</literal> и <literal>Suit::Spades</literal>.
   Переменным может быть присвоено одно из этих допустимых значений. Функция может проверить тип аргумента на соответствие типу перечисления
   и тогда можно передать только значения заданного типа.
  </para>

  <programlisting role="php">
<![CDATA[
<?php

function pick_a_card(Suit $suit)
{
    /* ... */
}

$val = Suit::Diamonds;

// OK
pick_a_card($val);

// OK
pick_a_card(Suit::Clubs);

// TypeError: pick_a_card(): Argument #1 ($suit) must be of type Suit, string given
pick_a_card('Spades');
?>
]]>
  </programlisting>

  <para>
   В перечислении может быть ноль или более определений <literal>case</literal>, максимальное количество не ограничено.
   Перечисление без вариантов синтаксически корректно, хотя и бесполезно.
  </para>

  <para>
   Для вариантов перечисления работают те же правила синтаксиса, что и для любой метки в PHP, смотрите <link linkend="language.constants">Константы</link>.
  </para>

  <para>
   По умолчанию варианты не поддерживаются скалярным значением. То есть <literal>Suit::Hearts</literal>
   не равно <literal>«0»</literal>. Вместо этого каждый вариант поддерживается одноэлементным объектом с таким именем.
   То есть:
  </para>

  <programlisting role="php">
<![CDATA[
<?php

$a = Suit::Spades;
$b = Suit::Spades;

$a === $b; // true

$a instanceof Suit;  // true
?>
]]>
  </programlisting>

  <para>
   Это также означает, что значения перечисления не будут <literal>&lt;</literal> или <literal>&gt;</literal>
   друг с друга, поскольку эти сравнения не имеют смысла для объектов.
   Сравнения всегда будут возвращать &false; при работе с вариантами перечисления.
  </para>

  <para>
   Тип варианта без связанных данных называется «Чистый вариант» (Pure Case). Перечисление, которое содержит только чистые варианты,
   называется чистым перечислением (Pure Enum).
  </para>

  <para>
   Все чистые варианты реализованы как экземпляры своего типа перечисления.
   Тип перечисления внутренне представлен как класс.
  </para>

  <para>
   У всех вариантов есть доступное только для чтения свойство <literal>name</literal> —
   это и чувствительное к регистру имя самого варианта.
  </para>

  <programlisting role="php">
<![CDATA[
<?php

print Suit::Spades->name;
// prints "Spades"
?>
]]>
  </programlisting>

  <para>
   Можно также пользоваться функциями <function>defined</function> и <function>constant</function>
   для проверки существования или чтения регистра перечисления, если имя получено динамически.
   Однако поступать так не рекомендовано, поскольку в большей части ситуаций лучше
   работать с <link linkend="language.enumerations.backed">типизированными перечислениями</link>.
  </para>

 </sect1>

 <sect1 xml:id="language.enumerations.backed">
  <title>Типизированные перечисления</title>

  <para>
   По умолчанию у вариантов перечислений нет скалярного эквивалента. Это обычные одноэлементные объекты.
   Однако существуют случаи, когда вариантам перечислений нужно обращаться к базе данных
   или аналогичному хранилищу данных, поэтому полезно иметь встроенный скалярный
   (и, следовательно, тривиально сериализуемый) эквивалент, определённый внутренне.
  </para>

  <para>Чтобы определить скалярный эквивалент для перечислений, пользуются следующим синтаксисом:</para>

  <programlisting role="php">
<![CDATA[
<?php

enum Suit: string
{
    case Hearts = 'H';
    case Diamonds = 'D';
    case Clubs = 'C';
    case Spades = 'S';
}
?>
]]>
  </programlisting>

  <para>
   Вариант со скалярным эквивалентом называется типизированным (Backed Case), поскольку он «поддержан» более простым значением.
   Перечисление, у которого все варианты типизированные, называется «типизированным перечислением» (Backed Enum).
   Типизированное перечисление может содержать только типизированные варианты.
   Чистое перечисление может содержать только чистые варианты.
  </para>

  <para>
   Типизированное перечисление может поддерживаться типами <literal>int</literal> или <literal>string</literal>
   и такое перечисление поддерживает только один тип за раз (то есть нельзя объединять <literal>int|string</literal>).
   Если перечисление помечено как имеющее скалярный эквивалент, тогда все варианты должны иметь определённый явно уникальный скалярный эквивалент.
   Не существует автоматически генерируемых скалярных эквивалентов (например, последовательных целых чисел).
   Типизированные варианты должны быть уникальными; двум вариантам типизированного перечисления не может принадлежать один и тот же скалярный эквивалент.
   Однако константа может относиться к варианту, фактически создавая псевдоним.
   Смотрите «<link linkend="language.enumerations.constants">Константы перечислений</link>».
  </para>

  <para>
   Эквивалентные значения должны быть строками или строковыми выражениями.
   Константы и постоянные выражения не поддерживаются. То есть <literal>1 + 1</literal> разрешено,
   а <literal>1 + SOME_CONST</literal> — нет.
  </para>

  <para>
   У типизированных вариантов есть дополнительное доступное только для чтения свойство <literal>value</literal> —
   это значение, заданное в определении варианта.
  </para>

  <programlisting role="php">
<![CDATA[
<?php

print Suit::Clubs->value;
// Выведет "C"
?>
]]>
   </programlisting>

   <para>
    Чтобы свойство <literal>value</literal> оставалось доступным только для чтения,
    было запрещено назначать переменную в качестве ссылки на неё.
    То есть следующий код выдаст ошибку:
   </para>

   <programlisting role="php">
<![CDATA[
<?php

$suit = Suit::Clubs;
$ref = &$suit->value;
// Error: Cannot acquire reference to property Suit::$value
?>
]]>
   </programlisting>

   <para>
    Типизированные перечисления реализуют внутренний интерфейс <interfacename>BackedEnum</interfacename>,
    который даёт два дополнительных метода:
   </para>

   <simplelist>
    <member>
     <literal>from(int|string): self</literal> возьмёт скаляр и вернёт вариант перечисления, которому он принадлежит.
     Если вариант, который соответствует варианту перечисления, не найден, метод выбросит исключение <classname>ValueError</classname>.
     Это в основном полезно тогда, когда входной скаляр надёжен,
     а отсутствие значения перечисления надо рассматривать как ошибку, останавливающую приложение.
    </member>
    <member>
     <literal>tryFrom(int|string): ?self</literal> возьмёт скаляр и вернёт вариант перечисления, которому он принадлежит.
     Если вариант, который соответствует варианту перечисления, не найден, метод вернёт <literal>null</literal>.
     Это в основном полезно тогда, когда входной скаляр ненадёжен и вызывающая функция
     хочет реализовать свою обработку ошибок или логику значения по умолчанию.
    </member>
   </simplelist>

   <para>
    Методы <literal>from()</literal> и <literal>tryFrom()</literal> следуют стандартным правилам
    слабой/строгой типизации. В режиме слабой типизации допустима передача целого числа или строки,
    система преобразует значение и найдёт вариант, который ему соответствует.
    Передача числа с плавающей точкой также будет работать с принудительным преобразованием.
    В режиме строгой типизации передача целого числа в метод <literal>from()</literal> в перечислении
    со строковой типизацией (или наоборот) в любом случае приведёт к исключению <classname>TypeError</classname>,
    как и передача числа с плавающей точкой.
    Все остальные типы параметров выбросят исключение TypeError в обоих режимах.
   </para>

   <programlisting role="php">
<![CDATA[
<?php

$record = get_stuff_from_database($id);
print $record['suit'];

$suit =  Suit::from($record['suit']);
// Недопустимые данные выбросят исключение ValueError: "X" is not a valid scalar value for enum "Suit"
print $suit->value;

$suit = Suit::tryFrom('A') ?? Suit::Spades;
// Недопустимые данные возвращают значение null, поэтому вместо этого будет использовано Suit::Spades.
print $suit->value;
?>
]]>
   </programlisting>

   <para>
    Ручное определение метода <literal>from()</literal> или <literal>tryFrom()</literal> в типизированных перечислениях
    приведёт к фатальной ошибке.
   </para>
 </sect1>

 <sect1 xml:id="language.enumerations.methods">
  <title>Методы перечислений</title>

  <para>
   Перечисления (как чистые, так и типизированные) могут содержать методы и могут реализовывать интерфейсы.
   Если перечисление реализует интерфейс, то любая проверка типа этого интерфейса также примет и все варианты этого перечисления.
  </para>

  <programlisting role="php">
<![CDATA[
<?php

interface Colorful
{
    public function color(): string;
}

enum Suit implements Colorful
{
    case Hearts;
    case Diamonds;
    case Clubs;
    case Spades;

    // Выполняет контракт интерфейса.
    public function color(): string
    {
        return match($this) {
            Suit::Hearts, Suit::Diamonds => 'Красный',
            Suit::Clubs, Suit::Spades => 'Чёрный'
        };
    }

    // Не часть интерфейса; хорошо.
    public function shape(): string
    {
        return "Rectangle";
    }
}

function paint(Colorful $c)
{
   /* ... */
}

paint(Suit::Clubs);  // Работает

print Suit::Diamonds->shape(); // выведет "Rectangle"
?>
]]>
  </programlisting>

  <para>
   В этом примере каждый из четырёх экземпляров <literal>Suit</literal> имеет два метода:
   <literal>color()</literal> и <literal>shape()</literal>.
   В вызывающем коде и при проверке типов экземпляры перечисления ведут себя точно так же, как и любой другой экземпляр объекта.
  </para>

  <para>
   В типизированных перечислениях объявление интерфейса идёт после объявления типа перечисления.
  </para>

  <programlisting role="php">
<![CDATA[
<?php

interface Colorful
{
    public function color(): string;
}

enum Suit: string implements Colorful
{
    case Hearts = 'H';
    case Diamonds = 'D';
    case Clubs = 'C';
    case Spades = 'S';

    // Выполняет интерфейсный контракт.
    public function color(): string
    {
        return match($this) {
            Suit::Hearts, Suit::Diamonds => 'Красный',
            Suit::Clubs, Suit::Spades => 'Чёрный'
        };
    }
}
?>
]]>
   </programlisting>

   <para>
    Переменная <literal>$this</literal> определена внутри метода и ссылается на экземпляр варианта.
   </para>

   <para>
    Сложность методов в перечислениях не ограничена, но на практике методы перечислений чаще возвращают статическое значение
    или результат обработки переменной <literal>$this</literal> выражением &match;,
    чтобы результаты обработки отдельных экземпляров перечисления отличались.
   </para>

   <para>
    Обратите внимание, в этом примере более хорошей практикой построения данных было бы —
    определить тип перечисления <literal>SuitColor</literal>
    со значениями Red и Black и возвращать их вместо строковых литералов.
    Однако это усложнило бы пример.
   </para>

   <para>
    Иерархия в примере логически похожа на следующую структуру классов
    (хотя это не настоящий исполняемый код):
   </para>

   <programlisting role="php">
<![CDATA[
<?php

interface Colorful
{
    public function color(): string;
}

final class Suit implements UnitEnum, Colorful
{
    public const Hearts = new self('Hearts');
    public const Diamonds = new self('Diamonds');
    public const Clubs = new self('Clubs');
    public const Spades = new self('Spades');

    private function __construct(public readonly string $name) {}

    public function color(): string
    {
        return match($this) {
            Suit::Hearts, Suit::Diamonds => 'Красный',
            Suit::Clubs, Suit::Spades => 'Чёрный'
        };
    }

    public function shape(): string
    {
        return "Прямоугольник";
    }

    public static function cases(): array
    {
        // Недопустимый метод, поскольку определение метода cases() в перечислениях вручную запрещено.
        // Смотрите также раздел "Список значений".
    }
}
?>
]]>
   </programlisting>

   <para>
    В перечислениях разрешено объявлять общедоступные, закрытые и защищённые методы,
    хотя на практике закрытые и защищённые методы эквивалентны,
    поскольку наследование не разрешено.
   </para>

 </sect1>

 <sect1 xml:id="language.enumerations.static-methods">
  <title>Статические методы перечислений</title>

  <para>
   В перечислениях разрешено объявлять статические методы. Статические методы в самом перечислении
   в первую очередь выступают в роли альтернативных конструкторов. Например:
  </para>

  <programlisting role="php">
<![CDATA[
<?php

enum Size
{
    case Small;
    case Medium;
    case Large;

    public static function fromLength(int $cm): static
    {
        return match(true) {
            $cm < 50 => static::Small,
            $cm < 100 => static::Medium,
            default => static::Large,
        };
    }
}
?>
]]>
  </programlisting>

  <para>
   Статические методы разрешено объявлять общедоступными, закрытыми или защищёнными,
   хотя на практике закрытые и защищённые методы эквивалентны, поскольку наследование не разрешено.
  </para>

 </sect1>

 <sect1 xml:id="language.enumerations.constants">
  <title>Константы перечислений</title>

  <para>
   В перечисления разрешено включать константы с общедоступной, закрытой или защищённой
   областью видимости, хотя на практике закрытые и защищённые константы эквивалентны,
   поскольку наследование не разрешено.
  </para>

  <para>Константе перечисления разрешено ссылаться на вариант перечисления:</para>

  <programlisting role="php">
<![CDATA[
<?php

enum Size
{
    case Small;
    case Medium;
    case Large;

    public const Huge = self::Large;
}
?>
]]>
  </programlisting>
 </sect1>

 <sect1 xml:id="language.enumerations.traits">
  <title>Трейты</title>

  <para>
   В перечисления разрешено включать трейты, которые будут вести себя как классы.
   Предостережение состоит в том, что во включаемых (<literal>use</literal>) в перечисление
   трейтах нельзя объявлять свойства.
   Во включаемом в перечисление трейте разрешено объявлять только методы и статические методы.
   Трейт со свойствами приведёт к фатальной ошибке.
  </para>

  <programlisting role="php">
<![CDATA[
<?php

interface Colorful
{
    public function color(): string;
}

trait Rectangle
{
    public function shape(): string {
        return "Прямоугольник";
    }
}

enum Suit implements Colorful
{
    use Rectangle;

    case Hearts;
    case Diamonds;
    case Clubs;
    case Spades;

    public function color(): string
    {
        return match($this) {
            Suit::Hearts, Suit::Diamonds => 'Красный',
            Suit::Clubs, Suit::Spades => 'Чёрный',
        };
    }
}
?>
]]>
  </programlisting>
 </sect1>

 <sect1 xml:id="language.enumerations.expressions">
  <title>Значения перечисления в постоянных выражениях</title>

  <para>
   Поскольку в самом перечислении варианты объявлены константами,
   их разрешено использовать как статические значения в большей части константных выражений:
   значения по умолчанию для свойств, значения по умолчанию для статических переменных, значения по умолчанию для параметров,
   глобальные значения и значения констант класса.
   Их нельзя указывать как значения в других вариантах перечисления, но стандартные константы могут ссылаться на вариант перечисления.
  </para>

  <para>
   Однако неявные вызовы магических методов, как это происходит при реализации интерфейса <classname>ArrayAccess</classname>
   в перечислениях, — не допускаются в статических или константных определениях, поскольку невозможно абсолютно гарантировать,
   что результирующее значение будет детерминированным или у вызова метода не будет побочных эффектов.
   Вызовы функций, вызовы методов и доступ к свойствам по-прежнему недопустимы в постоянных выражениях.
  </para>

  <programlisting role="php">
<![CDATA[
<?php

// Это полностью законное определение перечисления.
enum Direction implements ArrayAccess
{
    case Up;
    case Down;

    public function offsetExists($offset): bool
    {
        return false;
    }

    public function offsetGet($offset): mixed
    {
        return null;
    }

    public function offsetSet($offset, $value): void
    {
        throw new Exception();
    }

    public function offsetUnset($offset): void
    {
        throw new Exception();
    }
}

class Foo
{
    // Это разрешено.
    const DOWN = Direction::Down;

    // Это запрещено, так как не может быть детерминированным.
    const UP = Direction::Up['short'];
    // Fatal error: Cannot use [] on enums in constant expression
}

// Это совершенно законно, потому что это не постоянное выражение.
$x = Direction::Up['short'];
var_dump("\$x – это " . var_export($x, true));

$foo = new Foo();
?>
]]>
  </programlisting>
 </sect1>

 <sect1 xml:id="language.enumerations.object-differences">
  <title>Отличия от объектов</title>

  <para>
   Хотя перечисления построены на классах и объектах, они не поддерживают полную объектно-связанную функциональность.
   В качестве примера, вариантам перечислений не разрешены состояния.
  </para>

  <simplelist>
   <member>Конструкторы и деструкторы запрещены.</member>
   <member>Наследование не поддерживается. Перечислениям нельзя наследовать или наследоваться.</member>
   <member>Статические свойства или свойства объекта не допускаются.</member>
   <member>Клонирование варианта перечисления не поддерживается, так как варианты должны быть одноэлементными экземплярами.</member>
   <member><link linkend="language.oop5.magic">Магические методы</link>, кроме перечисленных ниже, запрещены.</member>
   <member>Перечисления должны быть объявлены до начала работы с ними.</member>
  </simplelist>

  <para>Перечислениям доступны следующие функциональные возможности объекта с аналогичным поведением:</para>

  <simplelist>
   <member>Методы public, private и protected.</member>
   <member>Статические методы public, private и protected.</member>
   <member>Константы public, private и protected.</member>
   <member>Перечислениям разрешено реализовывать любое количество интерфейсов.</member>
   <member>
    К перечислениям и вариантам разрешено добавлять <link linkend="language.attributes">атрибуты</link>.
    Целевой фильтр <constant>TARGET_CLASS</constant> включает сами перечисления.
    Целевой фильтр <constant>TARGET_CLASS_CONST</constant> включает варианты перечислений.
   </member>
   <member>
    Магические методы <link linkend="object.call">__call</link>, <link linkend="object.callstatic">__callStatic</link>,
    и <link linkend="object.invoke">__invoke</link>.
   </member>
   <member>Константы <constant>__CLASS__</constant> и <constant>__FUNCTION__</constant> ведут себя как обычно.</member>
  </simplelist>

  <para>
   Магическая константа <literal>::class</literal> для типа перечисления оценивается как название перечисления,
   включая любое пространство имён, точно так же, как объект.
   Магическая константа <literal>::class</literal> в экземпляре варианта также оценивается как тип перечисления,
   поскольку она — экземпляр этого типа.
  </para>

  <para>
   Кроме того, варианты перечисления нельзя создавать через ключевое слово <literal>new</literal> или методом
   <methodname>ReflectionClass::newInstanceWithoutConstructor</methodname>. Оба способа приведут к ошибке.
  </para>

  <programlisting role="php">
<![CDATA[
<?php

$clovers = new Suit();
// Error: Cannot instantiate enum Suit

$horseshoes = (new ReflectionClass(Suit::class))->newInstanceWithoutConstructor()
// Error: Cannot instantiate enum Suit
?>
]]>
  </programlisting>
 </sect1>

 <sect1 xml:id="language.enumerations.listing">
  <title>Список значений</title>

  <para>
   И чистые, и типизированные перечисления реализуют внутренний интерфейс
   с именем <interfacename>UnitEnum</interfacename>.
   Интерфейс <literal>UnitEnum</literal> включает статический метод <literal>cases()</literal>.
   Метод <literal>cases()</literal> возвращает упакованный массив всех определённых в перечислении вариантов в порядке объявления.
  </para>

  <programlisting role="php">
<![CDATA[
<?php

Suit::cases();
// Produces: [Suit::Hearts, Suit::Diamonds, Suit::Clubs, Suit::Spades]
?>
]]>
  </programlisting>

  <para>
   Ручное определение метода <literal>cases()</literal> в перечислении приведёт к фатальной ошибке.
  </para>
 </sect1>

 <sect1 xml:id="language.enumerations.serialization">
  <title>Сериализация</title>

  <para>
   Перечисления сериализуются иначе, чем объекты. В частности, у перечислений есть новый код сериализации —
   <literal>«E»</literal>, который указывает имя варианта перечисления.
   Затем этот идентификатор будет доступен процедуре десериализации,
   чтобы установить переменную в существующее одноэлементное значение.
   Это гарантирует, что:
  </para>

  <programlisting role="php">
<![CDATA[
<?php

Suit::Hearts === unserialize(serialize(Suit::Hearts));

print serialize(Suit::Hearts);
// E:11:"Suit:Hearts";
?>
]]>
  </programlisting>

  <para>
   Если при десериализации перечисление и вариант не будут найдены для сопоставления сериализованному значению,
   будет выдано предупреждение и возвращено &false;.
  </para>

  <para>
   Если чистое перечисление сериализуется в JSON, будет выдана ошибка.
   Если типизированное перечисление сериализуется в JSON, оно будет представлено только его скалярным значением типа, заданного в перечислении.
   Чтобы переопределить поведение этих способов, реализуют интерфейс <classname>JsonSerializable</classname>.
  </para>

  <para>
   Для функции <function>print_r</function> вывод варианта перечисления незначительно отличается от объектов, чтобы уменьшить путаницу.
  </para>

  <programlisting role="php">
<![CDATA[
<?php

enum Foo {
    case Bar;
}

enum Baz: int {
    case Beep = 5;
}

print_r(Foo::Bar);
print_r(Baz::Beep);

/* Выводит

Foo Enum (
    [name] => Bar
)
Baz Enum:int {
    [name] => Beep
    [value] => 5
}
*/
?>
]]>
   </programlisting>
 </sect1>

 <sect1 xml:id="language.enumerations.object-differences.inheritance">

  <title>Почему перечисления не расширяемы</title>

  <simpara>
   Для методов классов объявлены контракты:
  </simpara>

  <programlisting role="php">
<![CDATA[
<?php

class A {}
class B extends A {}

function foo(A $a) {}

function bar(B $b) {
    foo($b);
}
?>
]]>
  </programlisting>

  <simpara>
   Этот код безопасен для типов, поскольку класс B выполняет контракт класса A,
   и, за счёт магии ковариантности и контравариантности, ожидания
   в отношении методов будут оправданы, за исключением исключений.
  </simpara>

  <simpara>
   У перечислений есть контракты на их варианты, а не методы:
  </simpara>

  <programlisting role="php">
<![CDATA[
<?php

enum ErrorCode
{
    case SOMETHING_BROKE;
}

function quux(ErrorCode $errorCode)
{
    // Кажется, что этот код охватывает все варианты
    match ($errorCode) {
        ErrorCode::SOMETHING_BROKE => true,
    }
}

?>
]]>
  </programlisting>

  <simpara>
   Проведя статический анализ выражения &match; в функции <code>quux</code>,
   легко понять, что охвачен каждый вариант перечисления ErrorCode.
  </simpara>

  <simpara>
   Но представьте, что было бы разрешено расширять перечисления:
  </simpara>

  <programlisting role="php">
<![CDATA[
<?php

// Экспериментальный код, в котором перечисления не конечно.
// Обратите внимание, что это не будет работать в PHP.
enum MoreErrorCode extends ErrorCode
{
    case PEBKAC;
}

function fot(MoreErrorCode $errorCode) {
    quux($errorCode);
}

fot(MoreErrorCode::PEBKAC);

?>
]]>
  </programlisting>

  <simpara>
   Следуя стандартным правилам наследования, класс, расширяющий другой класс,
   пройдёт проверку типа.
  </simpara>

  <simpara>
   Проблема состоит в том, что выражение &match; в функции <code>quux()</code> уже не покрывает все случаи.
   Поскольку оно не знает о варианте <code>MoreErrorCode::PEBKAC</code>, выражение &match; выбросит исключение.
  </simpara>

  <simpara>
   Поэтому перечисления окончательны и их не разрешено расширять.
  </simpara>
 </sect1>

 <sect1 xml:id="language.enumerations.examples">
  &reftitle.examples;

  <para>
   <example>
    <title>Базовые ограниченные значения</title>
    <programlisting role="php">
<![CDATA[
<?php

enum SortOrder
{
    case Asc;
    case Desc;
}

function query($fields, $filter, SortOrder $order = SortOrder::Asc)
{
     /* ... */
}
?>
]]>
    </programlisting>
    <para>
     Функция <literal>query()</literal> теперь может безопасно работать,
     зная, что параметр <literal>$order</literal> гарантированно будет либо вариантом <literal>SortOrder::Asc</literal>,
     либо вариантом <literal>SortOrder::Desc</literal>.
     Любое другое значение привело бы к исключению <classname>TypeError</classname>,
     поэтому проверка ошибок или тестирование не нужны.
    </para>
   </example>
  </para>

  <para>

   <example>
    <title>Расширенные эксклюзивные значения</title>

    <programlisting role="php">
<![CDATA[
<?php

enum UserStatus: string
{
    case Pending = 'P';
    case Active = 'A';
    case Suspended = 'S';
    case CanceledByUser = 'C';

    public function label(): string
    {
        return match($this) {
            static::Pending => 'В ожидании',
            static::Active => 'Активный',
            static::Suspended => 'Приостановленный',
            static::CanceledByUser => 'Отменено пользователем',
        };
    }
}
?>
]]>
     </programlisting>

     <para>
      В этом примере статус пользователя может быть исключительно одним из следующих вариантов:
      <literal>UserStatus::Pending</literal>,
      <literal>UserStatus::Active</literal>, <literal>UserStatus::Suspended</literal>
      или <literal>UserStatus::CanceledByUser</literal>.
      Функция может ввести параметр <literal>UserStatus</literal> и затем принять только эти четыре значения, точка.
     </para>

     <para>
      У всех четырёх значений есть метод <literal>label()</literal>, который возвращает удобочитаемую строку.
      Эта строка не зависит от скалярной эквивалентной строки "machine name", которую можно использовать,
      например, в поле базы данных или значении выпадающего списка HTML.
     </para>

     <programlisting role="php">
<![CDATA[
<?php

foreach (UserStatus::cases() as $case) {
    printf('<option value="%s">%s</option>\n', $case->value, $case->label());
}
?>
]]>
     </programlisting>
    </example>
   </para>

 </sect1>

</chapter>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
