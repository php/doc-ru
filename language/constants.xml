<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 5a945dfef09a9595c83855cdb858ffa4a96af305 Maintainer: sergey Status: ready -->
<!-- Reviewed: no -->
<chapter xml:id="language.constants" xmlns="http://docbook.org/ns/docbook">
 <title>Константы</title>

 <simpara>
  Константа - это идентификатор (имя) для простого значения. Как следует из названия,
  их значение не может изменится в ходе выполнения скрипта
  (кроме <link linkend="language.constants.magic">магических констант</link>,
  которые на самом деле не являются константами).
  Константы чувствительны к регистру. По принятому соглашению, имена констант
  всегда пишутся в верхнем регистре.
 </simpara>

 <note>
   <para>
    До PHP 8.0.0 константы, определённые с помощью функции <function>define</function>,
    могли быть нечувствительными к регистру.
   </para>
  </note>

 <para>
  Имя константы должно соответствовать тем же правилам именования, что
  и другие имена в PHP. Правильное имя начинается с буквы или символа подчёркивания,
  за которым следует любое количество букв, цифр и символов подчёркивания. Регулярное выражение для проверки правильности
  имени константы выглядит так:
  <code>^[a-zA-Z_\x80-\xff][a-zA-Z0-9_\x80-\xff]*$</code>
 </para>
 <para>
  Возможно определить константы с помощью функции
  <function>define</function> зарезервированными или
  даже некорректными именами, значения которых могут быть получены только
  с помощью
  <function>constant</function>. Однако, делать это не рекомендуется.
 </para>
 &tip.userlandnaming;
 <para>
  <!-- TODO Move into syntax section? -->
  <example>
   <title>Правильные и неправильные имена констант</title>
   <programlisting role="php">
<![CDATA[
<?php

// Правильные имена констант
define("FOO",     "что-то");
define("FOO2",    "что-то ещё");
define("FOO_BAR", "что-то большее");

// Неправильные имена констант
define("2FOO",    "что-то");

// Это верное объявление, но лучше его не использовать:
// PHP однажды может зарегистрировать волшебную константу,
// которая нарушит работу скрипта
define("__FOO__", "что-то");

?>
]]>
   </programlisting>
  </example>
 </para>
 <note>
  <simpara>
   Понятие "буквы" здесь - это символы a-z, A-Z,
   и другие символы с ASCII-кодами от 128 до 255 (0x80-0xff).
  </simpara>
 </note>

 <simpara>
  Как и &link.superglobals;, константы доступны из любой области видимости.
  Константы можно использовать из любого места скрипта независимо от области видимости.
  Подробную информацию об областях видимости можно найти
  <link linkend="language.variables.scope">здесь</link>.
 </simpara>

 <note>
   <simpara>
    Начиная с PHP 7.1.0, константе класса можно объявлять видимость защищённая
    или закрытая, делая её доступной только в иерархической области видимости
    класса, в котором она определена.
   </simpara>
  </note>

 <sect1 xml:id="language.constants.syntax">
  <title>Синтаксис</title>
  <simpara>
   Константа может быть определена с помощью ключевого слова <literal>const</literal>
   или с помощью функции <function>define</function>.
   В то время как <function>define</function> позволяет
   задать константу через выражение, конструкция <literal>const</literal> ограничена
   как описано в следующем параграфе. После того, как константа определена, её значение
   не может быть изменено или аннулировано.
  </simpara>
  <simpara>
   При использовании ключевого слова <literal>const</literal> допускаются
   только скалярные выражения (<type>bool</type>, <type>int</type>, <type>float</type> и <type>string</type>) и константы <type>array</type>,
   содержащие только скалярные выражения.
   Можно определить константы с типом <type>resource</type>, но не рекомендуется,
   так как это может привести к неожиданным результатам.
  </simpara>
  <simpara>
   Получить значение константы можно, указав её имя. В отличие от переменных,
   вам <emphasis>не нужно</emphasis> предварять имя константы символом
   <literal>$</literal>.
   Также можно использовать функцию <function>constant</function> для
   получения значения константы, если вы формируете имя константы динамически.
   Используйте функцию <function>get_defined_constants</function> для получения
   списка всех определённых констант.
  </simpara>

  <note>
   <simpara>
    Константы и (глобальные) переменные находятся в разных пространствах имён.
    Это означает, что, например, &true; и <varname>$TRUE</varname> в целом
    отличаются.
   </simpara>
  </note>

  <simpara>
   Если используется неопределённая константа, выбрасывается <classname>Error</classname>.
   До PHP 8.0.0 неопределённые константы интерпретировались как простое слово <type>string</type>, то есть (CONSTANT vs "CONSTANT").
   Этот резервный вариант объявлен устаревшим с PHP 7.2.0, при этом будет
   сгенерирована ошибка уровня <constant>E_WARNING</constant>.
   До PHP 7.2.0 вместо этого выдавалась ошибка уровня <link linkend="ref.errorfunc">E_NOTICE</link>.
   Смотрите также главу руководства, которая разъясняет, почему
   <link linkend="language.types.array.foo-bar">$foo[bar]</link> - это неправильно (если <literal> bar </literal> не является константой).
   Это не относится к <link
   linkend="language.namespaces.rules">(полностью) определённым константам</link>,
   которые всегда будут выбрасывать <classname>Error</classname>, если они не определены.
  </simpara>

   <note>
    <simpara>
     Чтобы проверить, установлена ли константа, используйте функцию <function>defined</function>.
    </simpara>
   </note>

  <para>
   Различия между константами и переменными:
   <itemizedlist>
    <listitem>
     <simpara>
      У констант нет приставки в виде знака доллара (<literal>$</literal>);
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      Константы могут быть определены и доступны в любом месте без учёта
      области видимости;
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      Константы не могут быть переопределены или удалены после первоначального объявления; и
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      Константы могут иметь только скалярные значения или массивы.
     </simpara>
    </listitem>
   </itemizedlist>
  </para>

  <para>
   <example>
    <title>Определение констант</title>
    <programlisting role="php">
<![CDATA[
<?php
define("CONSTANT", "Здравствуй, мир.");
echo CONSTANT; // выводит "Здравствуй, мир."
echo Constant; // Выбросит ошибку: Неопределённая константа "Constant"
               // До PHP 8.0.0 выводит "Constant" и выдаёт предупреждение.
?>
]]>
    </programlisting>
   </example>
  </para>

  <para>
   <example>
    <title>Определение констант с помощью ключевого слова <literal>const</literal></title>
    <programlisting role="php">
<![CDATA[
<?php
// Простое скалярное значение
const CONSTANT = 'Здравствуй, мир.';

echo CONSTANT;

// Скалярное выражение
const ANOTHER_CONST = CONSTANT.'; Прощай, мир.';
echo ANOTHER_CONST;

const ANIMALS = array('dog', 'cat', 'bird');
echo ANIMALS[1]; // выводит "cat"

// Массивы в константе
define('ANIMALS', array(
    'dog',
    'cat',
    'bird'
));
echo ANIMALS[1]; // выводит "cat"
?>
]]>
    </programlisting>
   </example>
  </para>

  <note>
   <para>
    В отличие от определения констант с помощью функции <function>define</function>,
    константы, объявленные с помощью ключевого слова <literal>const</literal>
    должны быть объявлены в самой верхней области видимости, потому что они
    определяются при компилировании скрипта. Это означает, что их нельзя объявлять
    внутри функций, циклов, выражений <literal>if</literal> и блоков <literal>try</literal>/
    <literal>catch</literal>.
   </para>
  </note>

  <sect2 role="seealso">
    &reftitle.seealso;
    <para>
     <simplelist>
      <member><link linkend="language.oop5.constants">Константы классов</link></member>
     </simplelist>
    </para>
   </sect2>
 </sect1>

 <sect1 xml:id="language.constants.predefined">
  <title>Предопределённые константы</title>

  <simpara>
   PHP предоставляет большой список <link linkend="reserved.constants">
   предопределённых констант</link> для каждого выполняемого скрипта. Многие из
   этих констант определяются различными модулями и будут присутствовать только
   в том случае, если эти модули доступны в результате динамической загрузки
   или в результате статической сборки.
  </simpara>
 </sect1>

 <sect1 xml:id="language.constants.magic">
  <title>Магические константы</title>
  <para>
   Есть девять магических констант, которые меняют своё значение в
   зависимости от контекста, в котором они используются.
   Например, значение <constant>__LINE__</constant> зависит от строки в скрипте,
   на которой эта константа указана. Все магические константы разрешаются во
   время компиляции, в отличие от обычных констант, которые разрешаются во
   время выполнения. Специальные константы нечувствительны
   к регистру и их список приведён ниже:
  </para>
  <para>
   <table>
    <title>Магические константы PHP</title>
    <tgroup cols="2">
     <thead>
      <row>
        <entry>&Name;</entry>
        <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row xml:id="constant.line">
       <entry><constant>__LINE__</constant></entry>
       <entry>
        Текущий номер строки в файле.
       </entry>
      </row>
      <row xml:id="constant.file">
       <entry><constant>__FILE__</constant></entry>
       <entry>
        Полный путь и имя текущего файла с развёрнутыми симлинками. Если используется
        внутри подключаемого файла, то возвращается имя данного файла.
       </entry>
      </row>
      <row xml:id="constant.dir">
       <entry><constant>__DIR__</constant></entry>
       <entry>
        Директория файла. Если используется внутри подключаемого файла,
        то возвращается директория этого файла. Это эквивалентно вызову
        <literal>dirname(__FILE__)</literal>. Возвращаемое имя директории
        не оканчивается на слеш, за исключением корневой директории.
       </entry>
      </row>
      <row xml:id="constant.function">
       <entry><constant>__FUNCTION__</constant></entry>
       <entry>
        Имя функции или <literal>{closure}</literal> в случае анонимной функции.
       </entry>
      </row>
      <row xml:id="constant.class">
       <entry><constant>__CLASS__</constant></entry>
       <entry>
        Имя класса. Это имя содержит название пространства имён, в котором класс был объявлен
        (например, <literal>Foo\Bar</literal>).
        При использовании в методах трейтов __CLASS__ является именем
        класса, в котором эти методы используется.
       </entry>
      </row>
      <row xml:id="constant.trait">
       <entry><constant>__TRAIT__</constant></entry>
       <entry>
        Имя трейта. Это имя содержит название пространства имён, в котором трейт
        был объявлен (например, <literal>Foo\Bar</literal>).
       </entry>
      </row>
      <row xml:id="constant.method">
       <entry><constant>__METHOD__</constant></entry>
       <entry>
        Имя метода класса.
       </entry>
      </row>
      <row xml:id="constant.namespace">
       <entry><constant>__NAMESPACE__</constant></entry>
       <entry>
        Имя текущего пространства имён.
       </entry>
      </row>
      <row xml:id="constant.coloncolonclass">
        <entry><constant><replaceable>ClassName</replaceable>::class</constant></entry>
        <entry>
         Полное имя класса.
        </entry>
       </row>
     </tbody>
    </tgroup>
   </table>
  </para>

  <sect2 role="seealso">
    &reftitle.seealso;
    <para>
     <simplelist>
      <member><link linkend="language.oop5.basic.class.class">::class</link></member>
      <member><function>get_class</function></member>
      <member><function>get_object_vars</function></member>
      <member><function>file_exists</function></member>
      <member><function>function_exists</function></member>
     </simplelist>
    </para>
   </sect2>

 </sect1>
</chapter>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
