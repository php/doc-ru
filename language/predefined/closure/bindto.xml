<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: c44475e1fafcbee203ed4935a6d5d7a01379fcdc Maintainer: irker Status: ready -->
<!-- Reviewed: yes Maintainer: lex -->
<refentry xml:id="closure.bindto" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>Closure::bindTo</refname>
  <refpurpose>
   Дублирует замыкание с указанием связанного объекта и области видимости класса
  </refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <modifier>public</modifier> <type class="union"><type>Closure</type><type>null</type></type><methodname>Closure::bindTo</methodname>
   <methodparam><type class="union"><type>object</type><type>null</type></type><parameter>newThis</parameter></methodparam>
   <methodparam choice="opt"><type class="union"><type>object</type><type>string</type><type>null</type></type><parameter>newScope</parameter><initializer>"static"</initializer></methodparam>
  </methodsynopsis>
  <para>
   Создаёт и возвращает новую <link linkend="functions.anonymous">анонимную
   функцию</link> с тем же телом функции и связанными переменными, но
   с другим связанным объектом или новой областью видимости класса.
  </para>

  <para>
   "Связанный объект" определяет значение <literal>$this</literal>,
   которое будет доступно в теле функции, а "область видимости класса"
   представляет собой класс, который определяет к каким protected (защищённым)
   и private (закрытым) элементам этого объекта будет иметь доступ анонимная функция.
   Если точнее, то это те элементы, как если бы анонимная функция была бы
   методом класса, переданного в параметре <parameter>newScope</parameter>.
  </para>

  <para>
   Статические замыкания не могут иметь привязанный объект (значение параметра
   <parameter>newThis</parameter> должно быть равно &null;), но эта функция может всё равно
   использоваться для изменения его области видимости класса.
  </para>

  <para>
   Данный метод гарантирует, что у нестатического замыкания с привязанным
   объектом будет задана область видимости и наоборот.
   Для выполнения этого условия применяются следующие правила:
   Для нестатического замыкания с указанной областью видимости и с &null;
   вместо объекта, будет создано статическое замыкание.
   Для нестатического замыкания с незаданной областью видимости, но с указанием
   объекта, создаётся замыкание с неуказанной областью видимости.
  </para>

  <note>
   <para>
    Если вам необходимо только дублировать анонимную функцию, то
    вы можете вместо данного метода использовать <link linkend="language.oop5.cloning">клонирование</link>.
   </para>
  </note>

 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <variablelist>
   <varlistentry>
    <term><parameter>newThis</parameter></term>
    <listitem>
     <para>
      Объект, к которому будет привязана переданная анонимная функция, или
      &null; для отсоединения замыкания от её текущего объекта.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><parameter>newScope</parameter></term>
    <listitem>
     <para>
      Область видимости класса, с которой должно быть связано замыкание или 'static'
      для сохранения текущей области видимости. Если передан объект, то будет
      использован его класс. Этот параметр определяет видимость protected (защищённых)
      и private (закрытых) методов привязанного объекта.
      Запрещается передавать в этот параметр внутренний класс (объект класса).
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Возвращает новый объект <classname>Closure</classname>
   или &null; в случае возникновения ошибки.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <example>
   <title>Пример <function>Closure::bindTo</function></title>
   <programlisting role="php">
<![CDATA[
<?php

class A {
    function __construct($val) {
        $this->val = $val;
    }
    function getClosure() {
        //возвращает замыкание, связанное с текущими объектом и областью видимости
        return function() { return $this->val; };
    }
}

$ob1 = new A(1);
$ob2 = new A(2);

$cl = $ob1->getClosure();
echo $cl(), "\n";
$cl = $cl->bindTo($ob2);
echo $cl(), "\n";
?>
]]>
   </programlisting>
   &example.outputs.similar;
   <screen>
<![CDATA[
1
2
]]>
   </screen>
  </example>
 </refsect1>


 <refsect1 role="seealso">
  &reftitle.seealso;
  <simplelist>
   <member><link linkend="functions.anonymous">Анонимные функции</link></member>
   <member><methodname>Closure::bind</methodname></member>
  </simplelist>
 </refsect1>

</refentry><!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
