<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: b8e1b1357def73f310c9f7405035b3acc0cb1eaf Maintainer: shein Status: ready -->
<!-- Reviewed: no -->
<chapter xml:id="faq.passwords" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
  <title>Безопасное хеширование паролей</title>
  <titleabbrev>Хеширование паролей</titleabbrev>

  <para>
   В этом разделе разъясняются причины, стоящие за хешированием паролей в целях
   безопасности, а также эффективные методы хеширования.
  </para>

  <qandaset>
   <qandaentry xml:id="faq.passwords.hashing">
    <question>
     <para>
      Почему я должен хешировать пароли пользователей в моем приложении?
     </para>
    </question>
    <answer>
     <para>
      Хеширование паролей является одним из самых основных соображений безопасности,
      которые необходимо сделать, при разработке приложения, принимающего пароли
      от пользователей. Без хеширования, пароли, хранящиеся в базе вашего приложения,
      могут быть украдены, например, если ваша база данных была скомпрометирована,
      а затем немедленно могут быть применены для компрометации не только вашего
      приложения, но и аккаунтов ваших пользователей на других сервисах, если
      они не используют уникальных паролей.
     </para>
     <para>
      Применяя хеширующий алгоритм к пользовательским паролям перед сохранением
      их в своей базе данных, вы делаете невозможным разгадывание оригинального
      пароля для атакующего вашу базу данных, в то же время сохраняя возможность
      сравнения полученного хеша с оригинальным паролем.
     </para>
     <para>
      Важно заметить, однако, что хеширование паролей защищает их только
      от компрометирования в вашем хранилище, но не обязательно от вмешательства
      вредоносного кода в вашем приложении.
     </para>
    </answer>
   </qandaentry>
   <qandaentry xml:id="faq.passwords.fasthash">
    <question>
     <para>
      Почему популярные хеширующие функции, такие как <function>md5</function> и
      <function>sha1</function> не подходят для паролей?
     </para>
    </question>
    <answer>
     <para>
      Такие хеширующие алгоритмы как MD5, SHA1 и SHA256 были спроектированы
      очень быстрыми и эффективными. При наличии современных технологий и
      оборудования, стало довольно просто выяснить результат этих алгоритмов методом
      "грубой силы" для определения оригинальных вводимых данных.
     </para>
     <para>
      Из-за той скорости, с которой современные компьютеры могут "обратить"
      эти хеширующие алгоритмы, многие профессионалы компьютерной безопасности
      строго не рекомендуют использовать их для хеширования паролей.
     </para>
    </answer>
   </qandaentry>
   <qandaentry xml:id="faq.passwords.bestpractice">
    <question>
     <para>
      Если популярные хеширующие функции не подходят, как же я тогда должен
      хешировать свои пароли?
     </para>
    </question>
    <answer>
     <para>
      При хешировании паролей существует два важных соображения: это стоимость
      вычисления и соль. Чем выше стоимость вычисления хеширующего алгоритма,
      тем больше времени требуется для взлома его вывода методом "грубой силы".
     </para>
     <para>
      PHP предоставляет <link linkend="book.password">встроенное API хеширования паролей</link>,
      которое безопасно работает и с <link linkend="function.password-hash">хешированием</link>
      и с <link linkend="function.password-verify">проверкой паролей</link>.
     </para>
     <!-- TODO Drop mention of crypt? -->
     <para>
      Другой возможностью является функция <function>crypt</function>, которая
      поддерживает несколько алгоритмов хеширования. При использовании
      этой функции вы можете быть уверенным, что выбранный вами алгоритм
      доступен, так как PHP содержит собственную реализацию каждого
      поддерживаемого алгоритма, даже в случае, если какие-то из них
      не поддерживаются вашей системой.
     </para>
     <para>
      При хешировании паролей рекомендуется применять алгоритм Blowfish, который
      также используется по умолчанию в API хеширования паролей, так как
      он значительно большей вычислительной сложности, чем MD5 или SHA1,
      при этом по-прежнему гибок.
     </para>
     <para>
      Учтите, что, если вы используете функцию <function>crypt</function> для проверки
      пароля, то вам нужно предостеречь себя от атак по времени, применяя
      сравнение строк, которое занимает постоянное время. Ни операторы PHP
      <link linkend="language.operators.comparison">== и ===</link>,
      ни функция <function>strcmp</function> не являются таковыми.
      Функция же <function>password_verify</function> как раз делает то, что нужно.
      Настоятельно рекомендуется использовать
      <link linkend="book.password">встроенное API хеширования паролей</link>,
      если есть такая возможность.
     </para>
    </answer>
   </qandaentry>
   <qandaentry xml:id="faq.passwords.salt">
    <question>
     <para>
      Что такое соль?
     </para>
    </question>
    <answer>
     <para>
      Криптографическая соль представляет собой данные, которые применяются в
      процессе хеширования для предотвращения возможности разгадать оригинальный ввод
      с помощью поиска результата хеширования в списке заранее вычисленных пар
      ввод-хеш, известном также как "радужная" таблица.
     </para>
     <para>
      Более простыми словами, соль - это кусочек дополнительных данных, которые
      делают ваши хеши намного более устойчивыми к взлому. Существует много
      онлайн-сервисов, предоставляющих обширные списки заранее вычисленных хешей
      вместе с их оригинальным вводом. Использование соли делает поиск результирующего
      хеша в таком списке маловероятным или даже невозможным.
     </para>
     <para>
      <function>password_hash</function> создаёт случайную соль в случае, если
      она не была передана, и чаще всего это наилучший и безопасный выбор.
     </para>
    </answer>
   </qandaentry>
   <qandaentry xml:id="faq.password.storing-salts">
    <question>
     <para>
      Как я должен хранить свою соль?
     </para>
    </question>
    <answer>
     <para>
      При использовании функции <function>password_hash</function> или
      <function>crypt</function>, возвращаемое значение уже содержит соль как часть
      созданного хеша. Это значение нужно хранить как есть в вашей базе данных,
      так как оно содержит также информацию о хеширующей функции, которая использовалась,
      и может быть непосредственно передано в функции <function>password_verify</function>
      или <function>crypt</function> при проверке пароля.
     </para>
     <para>
      Следующая диаграмма показывает формат возвращаемого значения функциями
      <function>crypt</function> или <function>password_hash</function>. Как
      можно видеть, они содержат полную информацию об алгоритме
      и соли, требуемых для будущей проверки пароля.
     </para>
     <para>
      <mediaobject>
       <alt>
        Компоненты значения, возвращаемые функциями password_hash и crypt, идут в следующем порядке:
        выбранный алгоритм, опции алгоритма, соль и хеш пароля.
       </alt>
       <imageobject>
        <imagedata fileref="en/faq/figures/crypt-text-rendered.svg" width="690" depth="192" format="SVG"/>
       </imageobject>
      </mediaobject>
     </para>
    </answer>
   </qandaentry>
  </qandaset>

 </chapter><!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
